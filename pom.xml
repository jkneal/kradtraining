<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
	<name>The kradtraining Application</name>
	<modelVersion>4.0.0</modelVersion>
	<groupId>org.kuali.rice</groupId>
	<artifactId>kradtraining</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<packaging>war</packaging>

	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
 
		<!--allows the supported database to be changed via parameter (ex: oracle 
			to mysql) -->
		<database.groupId>mysql</database.groupId>
		<database.artifactId>${mysql.jdbc.artifactId}</database.artifactId>
		<database.version>${mysql.jdbc.version}</database.version>

		<!--dependency versions -->
		<jsp-api.version>2.1</jsp-api.version>
		<junit.version>4.10</junit.version>
		<oracle.jdbc.version>10.2.0.3.0</oracle.jdbc.version>
		<oracle.jdbc.artifactId>ojdbc14</oracle.jdbc.artifactId>
		<mysql.jdbc.version>5.1.24</mysql.jdbc.version>
		<mysql.jdbc.artifactId>mysql-connector-java</mysql.jdbc.artifactId>

		<rice.version>2.5.0-M2-SNAPSHOT</rice.version>
		<servlet-api.version>2.5</servlet-api.version>

		<!--plugin versions -->
		<!-- It is a good idea to explicitly place plugin version numbers in a 
			build. This makes the build more stable and less dependant on a specific 
			version of maven. -->
		<plugin.compiler.version>2.5.1</plugin.compiler.version>
		<plugin.surefire.version>2.12.3</plugin.surefire.version>
		<plugin.failsafe.version>2.12.3</plugin.failsafe.version>
		<plugin.war.version>2.2</plugin.war.version>
		<plugin.jetty.version>8.1.7.v20120910</plugin.jetty.version>

		<!-- other properties -->
		<jetty.port>8080</jetty.port>
		<maven.failsafe.skip>true</maven.failsafe.skip>
		<plugin.compiler.source>1.6</plugin.compiler.source>
		<plugin.compiler.target>1.6</plugin.compiler.target>
		<tools.jar.path>${java.home}/lib/tools.jar</tools.jar.path>
	</properties>

	<build>
		<!-- To help manage complex builds, the maven enforcer plugin has many 
			useful rules. This is not configured in this sample pom for simplicity sake. 
			http://maven.apache.org/plugins/maven-enforcer-plugin/ -->
		<plugins>

			<!-- Compiler plugin to specify Java source and target versions and encoding -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>${plugin.compiler.version}</version>
				<configuration>
					<source>${plugin.compiler.source}</source>
					<target>${plugin.compiler.target}</target>
					<encoding>${project.build.sourceEncoding}</encoding>
				</configuration>
			</plugin>

			<!-- Using war overlays to extract the web content from the rice web module. -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-war-plugin</artifactId>
				<version>${plugin.war.version}</version>
				<configuration>
					<webResources>
						<resource>
							<filtering>true</filtering>
							<!-- this is relative to the pom.xml directory -->
							<directory>src/main/webapp/</directory>
							<includes>
								<include>**/web.xml</include>
							</includes>
						</resource>
					</webResources>

					<overlays>
						<overlay>
							<groupId>${project.groupId}</groupId>
							<artifactId>rice-web</artifactId>
							<filtered>false</filtered>
						</overlay>
					</overlays>
				</configuration>
			</plugin>

			<!-- This executes unit tests. These tests are executed by default when 
				the project is built. -->
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-surefire-plugin</artifactId>
				<version>${plugin.surefire.version}</version>
			</plugin>

			<!-- This allows the application be be launched in a jetty server using 
				a maven command. A tomcat plugin could also be configured and used if desired. -->
			<plugin>
				<groupId>org.mortbay.jetty</groupId>
				<artifactId>jetty-maven-plugin</artifactId>
				<version>${plugin.jetty.version}</version>
				<configuration>
					<webAppConfig>
						<contextPath>/kradtraining</contextPath>
					</webAppConfig>
					<connectors>
						<connector implementation="org.eclipse.jetty.server.nio.SelectChannelConnector">
							<port>${jetty.port}</port>
						</connector>
					</connectors>
				</configuration>
				<dependencies>
					<dependency>
						<groupId>${database.groupId}</groupId>
						<artifactId>${database.artifactId}</artifactId>
						<version>${database.version}</version>
						<scope>runtime</scope>
					</dependency>
				</dependencies>
			</plugin>
		</plugins>
	</build>

	<!-- This is a profile activate and enables a special build configuration 
		when executing integration tests. The profile is activated by setting the 
		property maven.failsafe.skip to false. -->
	<profiles>
		<profile>
			<id>itests</id>
			<activation>
				<property>
					<name>maven.failsafe.skip</name>
					<value>false</value>
				</property>
			</activation>
			<properties>
				<jetty.stop.port>9999</jetty.stop.port>
			</properties>
			<build>
				<plugins>

					<!-- This executes integration tests. These tests are NOT executed by 
						default when the project is built. -->
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-failsafe-plugin</artifactId>
						<version>${plugin.failsafe.version}</version>
						<executions>
							<execution>
								<id>integration-test</id>
								<phase>integration-test</phase>
								<goals>
									<goal>integration-test</goal>
									<goal>verify</goal>
								</goals>
							</execution>
						</executions>
						<configuration>
							<encoding>${project.build.sourceEncoding}</encoding>
							<skip>${maven.failsafe.skip}</skip>
							<failIfNoTests>false</failIfNoTests>
							<includes>
								<include>**/*IT.java</include>
							</includes>
							<systemPropertyVariables>
								<test.port>${jetty.port}</test.port>
							</systemPropertyVariables>
						</configuration>
					</plugin>

					<!-- This configures jetty to startup and shut down for integration 
						tests. This allows integration tests to call into the application using web 
						requests. A tomcat plugin could also be configured and used if desired. -->
					<plugin>
						<groupId>org.mortbay.jetty</groupId>
						<artifactId>jetty-maven-plugin</artifactId>
						<version>${plugin.jetty.version}</version>
						<configuration>
							<webAppConfig>
								<contextPath>/kradtraining</contextPath>
							</webAppConfig>
							<connectors>
								<connector implementation="org.eclipse.jetty.server.nio.SelectChannelConnector">
									<port>${jetty.port}</port>
								</connector>
							</connectors>
							<stopKey>stop_jetty</stopKey>
							<stopPort>${jetty.stop.port}</stopPort>
						</configuration>
						<executions>
							<execution>
								<id>start-jetty</id>
								<phase>pre-integration-test</phase>
								<goals>
									<goal>start</goal>
								</goals>
								<configuration>
									<scanIntervalSeconds>0</scanIntervalSeconds>
									<daemon>true</daemon>
								</configuration>
							</execution>
							<execution>
								<id>stop-jetty</id>
								<phase>post-integration-test</phase>
								<goals>
									<goal>stop</goal>
								</goals>
							</execution>
						</executions>
						<dependencies>
							<dependency>
								<groupId>${database.groupId}</groupId>
								<artifactId>${database.artifactId}</artifactId>
								<version>${database.version}</version>
								<scope>runtime</scope>
							</dependency>
						</dependencies>
					</plugin>
				</plugins>
			</build>
		</profile>
	</profiles>

	<repositories>
		<repository>
			<id>kuali.nexus</id>
			<name>Nexus Repository Manager</name>
			<url>https://shrub.appspot.com/maven.kuali.org</url>
			<releases>
				<enabled>true</enabled>
			</releases>
			<snapshots>
				<enabled>true</enabled>
			</snapshots>
		</repository>
	</repositories>

	<dependencies>

		<dependency>
			<groupId>org.kuali.rice</groupId>
			<artifactId>rice-krad-data</artifactId>
			<version>${rice.version}</version>
		</dependency>

		<dependency>
			<groupId>org.kuali.rice</groupId>
			<artifactId>rice-krad-app-framework</artifactId>
			<version>${rice.version}</version>
		</dependency>

		<dependency>
			<groupId>org.kuali.rice</groupId>
			<artifactId>rice-krad-web-framework</artifactId>
			<version>${rice.version}</version>
		</dependency>

		<dependency>
			<groupId>org.kuali.rice</groupId>
			<artifactId>rice-web</artifactId>
			<version>${rice.version}</version>
			<type>war</type>
		</dependency>

 		<dependency>
			<groupId>org.kuali.rice</groupId>
			<artifactId>rice-krad-development-tools</artifactId>
			<version>${rice.version}</version>
			<exclusions>
				<exclusion>
					<groupId>com.sun</groupId>
					<artifactId>tools</artifactId>
				</exclusion>
			</exclusions>
		</dependency>

		<dependency>
			<groupId>org.kuali.rice</groupId>
			<artifactId>rice-core-api</artifactId>
			<version>${rice.version}</version>
		</dependency>

		<dependency>
			<groupId>org.kuali.rice</groupId>
			<artifactId>rice-core-framework</artifactId>
			<version>${rice.version}</version>
		</dependency>

		<dependency>
			<groupId>org.kuali.rice</groupId>
			<artifactId>rice-core-web</artifactId>
			<version>${rice.version}</version>
		</dependency>

		<dependency>
			<groupId>org.kuali.rice</groupId>
			<artifactId>rice-impl</artifactId>
			<version>${rice.version}</version>
		</dependency>

		<dependency>
			<groupId>org.kuali.rice</groupId>
			<artifactId>rice-it-krad</artifactId>
			<version>${rice.version}</version>
			<type>test-jar</type>
			<scope>test</scope>
		</dependency>

		<dependency>
			<groupId>org.kuali.rice</groupId>
			<artifactId>rice-it-internal-tools</artifactId>
			<version>${rice.version}</version>
			<scope>test</scope>
		</dependency>

		<!-- ksb -->
		<dependency>
			<groupId>org.kuali.rice</groupId>
			<artifactId>rice-ksb-api</artifactId>
			<version>${rice.version}</version>
			<scope>compile</scope>
		</dependency>

		<dependency>
			<groupId>org.kuali.rice</groupId>
			<artifactId>rice-ksb-client-impl</artifactId>
			<version>${rice.version}</version>
			<scope>runtime</scope>
		</dependency>

		<dependency>
			<groupId>org.kuali.rice</groupId>
			<artifactId>rice-ksb-server-impl</artifactId>
			<version>${rice.version}</version>
			<scope>runtime</scope>
		</dependency>

		<dependency>
			<groupId>org.kuali.rice</groupId>
			<artifactId>rice-ksb-web</artifactId>
			<version>${rice.version}</version>
			<scope>runtime</scope>
		</dependency>

		<!-- krms -->
		<dependency>
			<groupId>org.kuali.rice</groupId>
			<artifactId>rice-krms-api</artifactId>
			<version>${rice.version}</version>
			<scope>compile</scope>
		</dependency>

		<dependency>
			<groupId>org.kuali.rice</groupId>
			<artifactId>rice-krms-framework</artifactId>
			<version>${rice.version}</version>
			<scope>compile</scope>
		</dependency>

		<dependency>
			<groupId>org.kuali.rice</groupId>
			<artifactId>rice-krms-impl</artifactId>
			<version>${rice.version}</version>
			<scope>runtime</scope>
		</dependency>

		<!-- edl -->
		<dependency>
			<groupId>org.kuali.rice</groupId>
			<artifactId>rice-edl-framework</artifactId>
			<version>${rice.version}</version>
			<scope>runtime</scope>
		</dependency>

		<dependency>
			<groupId>org.kuali.rice</groupId>
			<artifactId>rice-edl-impl</artifactId>
			<version>${rice.version}</version>
			<scope>runtime</scope>
		</dependency>

		<!-- ken -->
		<dependency>
			<groupId>org.kuali.rice</groupId>
			<artifactId>rice-ken-api</artifactId>
			<version>${rice.version}</version>
			<scope>runtime</scope>
		</dependency>

		<!-- third party libraries -->
		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>servlet-api</artifactId>
			<version>${servlet-api.version}</version>
			<scope>provided</scope>
		</dependency>

		<dependency>
			<groupId>javax.servlet.jsp</groupId>
			<artifactId>jsp-api</artifactId>
			<version>${jsp-api.version}</version>
			<scope>provided</scope>
		</dependency>

		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>${junit.version}</version>
			<scope>test</scope>
		</dependency>

		<dependency>
			<groupId>${database.groupId}</groupId>
			<artifactId>${database.artifactId}</artifactId>
			<version>${database.version}</version>
			<scope>runtime</scope>
		</dependency>

	</dependencies>
</project>
