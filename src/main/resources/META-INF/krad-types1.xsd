<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<xsd:schema xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns="http://www.kuali.org/krad/schema" xmlns:spring="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" attributeFormDefault="unqualified" elementFormDefault="qualified" targetNamespace="http://www.kuali.org/krad/schema" xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd  http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.1.xsd">
  <xsd:import namespace="http://www.springframework.org/schema/beans"/>
  <xsd:include schemaLocation="krad-baseTypes1.xsd"/>
  <xsd:include schemaLocation="krad-baseTypes2.xsd"/>
  <xsd:complexType name="toolTip-mixedType">
    <xsd:complexContent>
      <xsd:extension base="tooltip-type"/>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="componentSecurity-mixedType">
    <xsd:complexContent>
      <xsd:extension base="componentSecurity-type">
        <xsd:choice maxOccurs="1" minOccurs="0">
          <xsd:element ref="fieldSecurity"/>
          <xsd:element ref="dataFieldSecurity"/>
          <xsd:element ref="actionSecurity"/>
          <xsd:element ref="collectionGroupSecurity"/>
          <xsd:element ref="componentSecurity"/>
        </xsd:choice>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="breadcrumbs-type">
    <xsd:complexContent>
      <xsd:extension base="componentAttributes-type">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element maxOccurs="1" minOccurs="0" name="onChangeScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Breadcrumbs" xml:lang="en"><![CDATA[Script that should be executed when the component's onChange event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onKeyPressScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Breadcrumbs" xml:lang="en"><![CDATA[Script that should be executed when the component's onKeyPress event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="refreshTimer" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Breadcrumbs" xml:lang="en"><![CDATA[Time in seconds that the component will be automatically refreshed
 
 
 This will invoke the refresh process just like the conditionalRefresh and
 refreshWhenChangedPropertyNames. When using this property methodToCallOnRefresh and id should
 also be specified
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="disableSessionPersistence" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Breadcrumbs" xml:lang="en"><![CDATA[Disables the storage of the component in session (when the framework determines it needs to be due to a
 refresh condition)

 
 When the framework determines there is a condition on the component that requires it to keep around between
 posts, it will store the component instance in session. This flag can be set to disable this behavior (which
 would require custom application logic to support behavior such as refresh)
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onDblClickScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Breadcrumbs" xml:lang="en"><![CDATA[Script that should be executed when the component's onDblClick event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="additionalComponentsToRefresh" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Breadcrumbs" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onBlurScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Breadcrumbs" xml:lang="en"><![CDATA[Script that should be executed when the component's onBlur event is fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="selfRendered" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Breadcrumbs" xml:lang="en"><![CDATA[Indicates whether the component contains its own render output (through
 the renderOutput property)

 
 If self rendered is true, the corresponding template for the component
 will not be invoked and the renderOutput String will be written to the
 response as is.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="colSpan" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Breadcrumbs" xml:lang="en"><![CDATA[Number of places the component should take up horizontally in the
 container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how many places
 horizontally the component should take up within the container. This is
 only applicable for table based layout managers. Default is 1
 

 TODO: this should not be on component interface since it only applies if
 the layout manager supports it, need some sort of layoutOptions map for
 field level options that depend on the manager]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="additionalCssClasses" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Breadcrumbs" xml:lang="en"><![CDATA[Convenience property for adding css class names to the end of the list of cssClasses that may already exist on
 this Component (this is to avoid explicitly having to set list merge in the bean definition)]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="required" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Breadcrumbs" xml:lang="en"><![CDATA[Indicates whether the component is required

 
 At the general component level required means there is some action the
 user needs to take within the component. For example, within a section it
 might mean the fields within the section should be completed. At a field
 level, it means the field should be completed. This provides the ability
 for the renderers to indicate the required action.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="finalizeMethodToCall" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Breadcrumbs" xml:lang="en"><![CDATA[The name of the method that should be invoked for finalizing the component
 configuration (full method name, without parameters or return type)

 
 Note the method can also be set with the finalizeMethodInvoker
 targetMethod property. If the method is on the configured
 ViewHelperService, only this property needs to be configured
 

 
 The model backing the view will be passed as the first argument method and then
 the Component instance as the second argument. If any additional method
 arguments are declared with the finalizeMethodAdditionalArguments, they will then
 be passed in the order declared in the list
 

 
 If the component is selfRendered, the finalize method can return a string which
 will be set as the component's renderOutput. The selfRendered indicator will also
 be set to true on the component.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="resetDataOnRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Breadcrumbs" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onKeyDownScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Breadcrumbs" xml:lang="en"><![CDATA[Script that should be executed when the component's onKeyDown event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="template" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Breadcrumbs" xml:lang="en"><![CDATA[The path to the JSP file that should be called to render the component

 
 The path should be relative to the web root. An attribute will be available to the component to use under the
 name given by the method getComponentTypeName. Based on the component type, additional attributes could
 be available for use. See the component documentation for more information on such attributes.
 

 
 e.g. '/krad/WEB-INF/jsp/tiles/component.jsp'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="align" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Breadcrumbs" xml:lang="en"><![CDATA[Horizontal alignment of the component within its container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how the component
 should be aligned horizontally within the container. During the finalize
 phase the CSS text-align style will be created for the align setting.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="width" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Breadcrumbs" xml:lang="en"><![CDATA[Width the component should take up in the container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies a width the component
 should take up in the Container. This is not applicable for all layout
 managers. During the finalize phase the CSS width style will be created
 for the width setting.
 

 
 e.g. '30%', '55px'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseDownScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Breadcrumbs" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseDown event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="postContent">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Breadcrumbs" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:sequence>
                <xsd:any minOccurs="0" processContents="skip"/>
              </xsd:sequence>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onClickScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Breadcrumbs" xml:lang="en"><![CDATA[Script that should be executed when the component's onClick event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="render" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Breadcrumbs" xml:lang="en"><![CDATA[Indicates whether the component should be rendered in the UI

 
 If set to false, the corresponding component template will not be invoked
 (therefore nothing will be rendered to the UI).
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onLoadScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Breadcrumbs" xml:lang="en"><![CDATA[Script that should be executed when the component's onLoad event is fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="methodToCallOnRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Breadcrumbs" xml:lang="en"><![CDATA[Name of a method on the controller that should be invoked as part of the component refresh
 and disclosure process
 
 
 During the component refresh or disclosure process it might be necessary to perform other
 operations, such as preparing data or executing a business process. This allows the
 configuration of a method on the underlying controller that should be called for the
 component refresh action. In this method, the necessary logic can be performed and then the
 base component update method invoked to carry out the component refresh.
 
 
 
 Controller method to invoke must accept the form, binding result, request, and response
 arguments
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="finalizeMethodInvoker" type="org.kuali.rice.krad.uif.component.MethodInvokerConfig">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Breadcrumbs" xml:lang="en"><![CDATA[MethodInvokerConfig instance for the method that should be invoked
 for finalizing the component configuration

 
 MethodInvoker can be configured to specify the class or object the method
 should be called on. For static method invocations, the targetClass
 property can be configured. For object invocations, that targetObject
 property can be configured
 

 
 If the component is selfRendered, the finalize method can return a string which
 will be set as the component's renderOutput. The selfRendered indicator will also
 be set to true on the component.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="componentModifiers">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Breadcrumbs" xml:lang="en"><![CDATA[ComponentModifier instances that should be invoked to
 initialize the component

 
 These provide dynamic initialization behavior for the component and are
 configured through the components definition. Each initializer will get
 invoked by the initialize method.
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="org.kuali.rice.krad.uif.modifier.ComponentModifier">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="componentCode" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Breadcrumbs" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="propertyReplacers">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Breadcrumbs" xml:lang="en"><![CDATA[gets a list of PropertyReplacer instances

 They will be evaluated
 during the view lifecycle to conditionally set properties on the
 Component based on expression evaluations]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="org.kuali.rice.krad.uif.component.PropertyReplacer">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onDocumentReadyScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Breadcrumbs" xml:lang="en"><![CDATA[Script to be run when the document ready event is triggered]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="refreshWhenChangedPropertyNames" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Breadcrumbs" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseUpScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Breadcrumbs" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseUp event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="renderedHtmlOutput" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Breadcrumbs" xml:lang="en"><![CDATA[Rendering output for the component that will be sent as part of the
 response (can contain static text and HTML)]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onKeyUpScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Breadcrumbs" xml:lang="en"><![CDATA[Script that should be executed when the component's onKeyUp event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onCloseScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Breadcrumbs" xml:lang="en"><![CDATA[Script that should be executed when the component's onClose event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="id" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Breadcrumbs" xml:lang="en"><![CDATA[The unique id (within a given tree) for the element.

 The id is used to identify an element instance within the tree, and
 will be used by renderers to set the HTML element id. This gives a way to find various elements
 for scripting. If the id is not given, a default will be generated by the framework.
 

 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="title" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Breadcrumbs" xml:lang="en"><![CDATA[The component title

 
 Depending on the component can be used in various ways. For example with a Container component the title is
 used to set the header text. For components like controls other other components that render an HTML element it
 is used to set the HTML title attribute.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="order" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Breadcrumbs" xml:lang="en"><![CDATA[Order of a component within a List of other components

 Lower numbers are placed higher up in the list, while higher numbers are placed
 lower in the list]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="style" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Breadcrumbs" xml:lang="en"><![CDATA[CSS style string to be applied to the component

 
 Any style override or additions can be specified with this attribute.
 This is used by the renderer to set the style attribute on the
 corresponding element.
 

 
 e.g. 'color: #000000;text-decoration: underline;'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="finalizeMethodAdditionalArguments" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Breadcrumbs" xml:lang="en"><![CDATA[The List of Object instances that should be passed as arguments to the finalize method

 
 These arguments are passed to the finalize method after the standard model and component
 arguments. They are passed in the order declared in the list
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="usePathBasedBreadcrumbs" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Breadcrumbs" xml:lang="en"><![CDATA[If set to true, the breadcrumbs on the View will always be path-based (history backed)]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onSubmitScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Breadcrumbs" xml:lang="en"><![CDATA[Script that should be executed when the component's onSubmit event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="conditionalRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Breadcrumbs" xml:lang="en"><![CDATA[When set if the condition is satisfied, the component will be refreshed.
 
 
 The component MUST BE a container or field type. conditionalRefresh is defined in a limited
 Spring EL syntax. Only valid form property names, and, or, logical comparison operators
 (non-arithmetic), #listContains, #emptyList, and the matches clause are allowed. String and
 regex values must use single quotes ('), booleans must be either true or false, numbers must
 be a valid double either negative or positive.
 
 
 DO NOT use progressiveRender and conditionalRefresh on the same component unless it is known
 that the component will always be visible in all cases when a conditionalRefresh happens (ie
 conditionalRefresh has progressiveRender's condition anded with its own condition). If a
 component should be refreshed every time it is shown, use the progressiveRenderAndRefresh
 option with this property instead.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="rowSpan" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Breadcrumbs" xml:lang="en"><![CDATA[Number of places the component should take up vertically in the container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how many places
 vertically the component should take up within the container. This is
 only applicable for table based layout managers. Default is 1
 

 TODO: this should not be on component interface since it only applies if
 the layout manager supports it, need some sort of layoutOptions map for
 field level options that depend on the manager]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="retrieveViaAjax" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Breadcrumbs" xml:lang="en"><![CDATA[When true, this component will render as a placeholder component instead of rendering normally because the
 content will be later retrieved through manually ajax retrieval calls in the js

 This flag does not imply any automation, there must be a js call invoked for the content to be retrieved
 by the server, but this does mark it with a placeholder component which KRAD js uses during these calls.
 This placeholder component is used for ajax retrievals.  In particular, this flag is useful for use in
 combination with the showLightboxComponent js function which will automatically retrieve the
 real content of a component through ajax if a placeholder component is detected.  This allows for the full
 content to only be retrieved when the lightbox is first opened.
 When this flag is set to true, the forceSessionPersistence
 flag is set to true AUTOMATICALLY because it is implied that this component will be retrieved by an ajax call
 in the future.  This may also be useful for direct custom calls to retrieveComponent function,
 as well, which also relies on the placeholder being present.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="namespaceCode" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Breadcrumbs" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="progressiveRender" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Breadcrumbs" xml:lang="en"><![CDATA[When set if the condition is satisfied, the component will be displayed. The component MUST
 BE a container or field type. progressiveRender is defined in a limited Spring EL syntax.
 Only valid form property names, and, or, logical comparison operators (non-arithmetic),
 #listContains, #emptyList, matches clause are allowed. String and regex values must use
 single quotes ('), booleans must be either true or false, numbers must be a valid double,
 either negative or positive.
 
 
 DO NOT use progressiveRender and a conditional refresh statement on the same component unless
 it is known that the component will always be visible in all cases when a conditional refresh
 happens (ie conditional refresh has progressiveRender's condition anded with its own
 condition).
 
 
 
 If a component should be refreshed every time it is shown, use the
 progressiveRenderAndRefresh option with this property instead.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="templateOptionsJSString" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Breadcrumbs" xml:lang="en"><![CDATA[Builds a string from the underlying Map of template options that will export
 that options as a JavaScript Map for use in js and jQuery plugins]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="displayBreadcrumbsWhenOne" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Breadcrumbs" xml:lang="en"><![CDATA[If false, breadcrumbs will not be displayed if only one breadcrumb is
 going to be shown, this improves visual clarity of the page]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseOutScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Breadcrumbs" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseOut event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="templateOptions">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Breadcrumbs" xml:lang="en"><![CDATA[The options that are passed through to the Component renderer

 
 The Map key is the option name, with the Map value as the option value. See
 documentation on the particular widget render for available options.
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:mapType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:choice maxOccurs="1" minOccurs="0">
            <xsd:element ref="tooltip"/>
            <xsd:element ref="tooltipFocus"/>
            <xsd:element ref="tooltipHelp"/>
          </xsd:choice>
          <xsd:element maxOccurs="1" minOccurs="0" name="preContent">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Breadcrumbs" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:sequence>
                <xsd:any minOccurs="0" processContents="skip"/>
              </xsd:sequence>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseOverScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Breadcrumbs" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseOver event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="dataAttributes">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Breadcrumbs" xml:lang="en"><![CDATA[Get the dataAttributes setup for this component - to be written to the html/jQuery data
 
 
 The attributes that are complex objects (contain {}) they will be written through script. The
 attritubes that are simple (contain no objects) will be written directly to the html of the
 component using standard data-. Either way they can be access through .data() call in jQuery
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:mapType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:choice maxOccurs="1" minOccurs="0">
            <xsd:element ref="fieldSecurity"/>
            <xsd:element ref="dataFieldSecurity"/>
            <xsd:element ref="actionSecurity"/>
            <xsd:element ref="collectionGroupSecurity"/>
            <xsd:element ref="componentSecurity"/>
          </xsd:choice>
          <xsd:element maxOccurs="1" minOccurs="0" name="readOnly" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Breadcrumbs" xml:lang="en"><![CDATA[Indicates whether the component can be edited

 
 When readOnly the controls and widgets of Field components
 will not be rendered. If the Field has an underlying value it will be
 displayed readOnly to the user.
 

 
 For a Container component, the readOnly setting will apply
 to all contained components (making a section readOnly makes all fields
 within the section readOnly).
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseMoveScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Breadcrumbs" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseMove event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="progressiveRenderAndRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Breadcrumbs" xml:lang="en"><![CDATA[If true, when the progressiveRender condition is satisfied, the component will always be
 retrieved from the server and shown(as opposed to being stored on the client, but hidden,
 after the first retrieval as is the case with the progressiveRenderViaAJAX option).
 
 
 By default, this is false, so components with progressive render capabilities will always
 be already within the client html and toggled to be hidden or visible.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="hidden" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Breadcrumbs" xml:lang="en"><![CDATA[Indicates whether the component should be hidden in the UI

 
 How the hidden data is maintained depends on the views persistence mode.
 If the mode is request, the corresponding data will be rendered to the UI
 but not visible. If the mode is session, the data will not be rendered to
 the UI but maintained server side.
 

 
 For a Container component, the hidden setting will apply to
 all contained components (making a section hidden makes all fields within
 the section hidden)
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="skipInTabOrder" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Breadcrumbs" xml:lang="en"><![CDATA[Flag indicating that this component and its nested components must be skipped when keyboard
 tabbing.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onUnloadScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Breadcrumbs" xml:lang="en"><![CDATA[Script that should be executed when the component's onUnload event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="context">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Breadcrumbs" xml:lang="en"><![CDATA[Context map for the component

 
 Any el statements configured for the components properties (e.g.
 title="@{foo.property}") are evaluated using the el context map. This map
 will get populated with default objects like the model, view, and request
 from the ViewHelperService. Other components can push
 further objects into the context so that they are available for use with
 that component. For example, Field instances that are part
 of a collection line as receive the current line instance
 

 
 Context map also provides objects to methods that are invoked for
 GeneratedField instances
 

 
 The Map key gives the name of the variable that can be used within
 expressions, and the Map value gives the object instance for which
 expressions containing the variable should evaluate against
 

 
 NOTE: Calling getContext().putAll() will skip updating any configured property replacers for the
 component. Instead you should call #pushAllToContext
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:mapType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="forceSessionPersistence" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Breadcrumbs" xml:lang="en"><![CDATA[Indicates whether the component should be stored with the session view regardless of configuration

 
 By default the framework nulls out any components that do not have a refresh condition or are needed for
 collection processing. This can be a problem if custom application code is written to refresh a component
 without setting the corresponding component flag. In this case this property can be set to true to force the
 framework to keep the component in session. Defaults to false
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="valign" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Breadcrumbs" xml:lang="en"><![CDATA[Vertical alignment of the component within its container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how the component
 should be aligned vertically within the container. During the finalize
 phase the CSS vertical-align style will be created for the valign
 setting.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onFocusScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Breadcrumbs" xml:lang="en"><![CDATA[Script that should be executed when the component's onFocus event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="progressiveRenderViaAJAX" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Breadcrumbs" xml:lang="en"><![CDATA[When progressiveRenderViaAJAX is true, this component will be retrieved from the server when
 it first satisfies its progressive render condition.
 
 
 After the first retrieval, it is hidden/shown in the html by the js when its progressive
 condition result changes. By default, this is false, so components with progressive render
 capabilities will always be already within the client html and toggled to be hidden or
 visible.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="cssClasses" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Breadcrumbs" xml:lang="en"><![CDATA[CSS style class(s) to be applied to the component

 
 Declares style classes for the component. Multiple classes are specified
 with a space delimiter. This is used by the renderer to set the class
 attribute on the corresponding element. The class(s) declared must be
 available in the common style sheets or the style sheets specified for
 the view
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="templateName" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Breadcrumbs" xml:lang="en"><![CDATA[The name for which the template can be invoked by

 
 Whether the template name is needed depends on the underlying rendering engine being used. In the example of
 Freemarker, the template points to the actual source file, which then loads a macro. From then on the macro is
 simply invoked to execute the template
 

 
 e.g. 'uif_text'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="unbounded" minOccurs="0" ref="spring:property"/>
          <xsd:element maxOccurs="unbounded" minOccurs="0" ref="property"/>
        </xsd:choice>
        <xsd:attribute name="usePathBasedBreadcrumbs">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.widget.Breadcrumbs" xml:lang="en"><![CDATA[If set to true, the breadcrumbs on the View will always be path-based (history backed)]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="displayBreadcrumbsWhenOne">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.widget.Breadcrumbs" xml:lang="en"><![CDATA[If false, breadcrumbs will not be displayed if only one breadcrumb is
 going to be shown, this improves visual clarity of the page]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:anyAttribute processContents="skip"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="fieldSecurity-type">
    <xsd:choice maxOccurs="unbounded" minOccurs="0">
      <xsd:element maxOccurs="1" minOccurs="0" name="viewInLineAuthz" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.field.FieldSecurity" xml:lang="en"><![CDATA[Indicates whether the field has view in line unmask authorization and KIM should be consulted]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="viewAuthz" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.field.FieldSecurity" xml:lang="en"><![CDATA[Indicates whether the component has view authorization and KIM should be consulted]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="additionalRoleQualifiers">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.field.FieldSecurity" xml:lang="en"><![CDATA[Map of key value pairs that should be added as role qualifiers when doing KIM permission checks for this
 component

 
 Any qualifiers given here that will override qualifiers with the same key that were derived by the system
 ]]></xsd:documentation>
        </xsd:annotation>
        <xsd:complexType>
          <xsd:complexContent>
            <xsd:extension base="spring:mapType">
              <xsd:attribute name="merge" type="xsd:boolean"/>
            </xsd:extension>
          </xsd:complexContent>
        </xsd:complexType>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="namespaceCode" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.field.FieldSecurity" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="editAuthz" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.field.FieldSecurity" xml:lang="en"><![CDATA[Indicates whether the component has edit authorization and KIM should be consulted]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="editInLineAuthz" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.field.FieldSecurity" xml:lang="en"><![CDATA[Indicates whether the field has edit in line authorization and KIM should be consulted]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="componentCode" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.field.FieldSecurity" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="idAttribute" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.field.FieldSecurity" xml:lang="en"><![CDATA[Id that should be sent as permission detail when doing a permission check on this field

 
 By default they system will send the component id as a permission detail, this property can be configured to
 send a different id for the permission check
 ]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="componentAttribute" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.field.FieldSecurity" xml:lang="en"><![CDATA[Component code that should be sent as permission detail when doing a permission check on this field

 
 When the component code is a detail for a permission check, this property can be configured to override the
 component code derived by the system
 ]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="namespaceAttribute" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.field.FieldSecurity" xml:lang="en"><![CDATA[Namespace code that should be sent as permission detail when doing a permission check on this field

 
 When the namespace code is a detail for a permission check, this property can be configured to override the
 namespace derived by the system
 ]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="additionalPermissionDetails">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.field.FieldSecurity" xml:lang="en"><![CDATA[Map of key value pairs that should be added as permission details when doing KIM permission checks for this
 component

 
 Any details given here that will override details with the same key that were derived by the system
 ]]></xsd:documentation>
        </xsd:annotation>
        <xsd:complexType>
          <xsd:complexContent>
            <xsd:extension base="spring:mapType">
              <xsd:attribute name="merge" type="xsd:boolean"/>
            </xsd:extension>
          </xsd:complexContent>
        </xsd:complexType>
      </xsd:element>
      <xsd:element maxOccurs="unbounded" minOccurs="0" ref="spring:property"/>
      <xsd:element maxOccurs="unbounded" minOccurs="0" ref="property"/>
    </xsd:choice>
    <xsd:attribute name="viewInLineAuthz">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.field.FieldSecurity" xml:lang="en"><![CDATA[Indicates whether the field has view in line unmask authorization and KIM should be consulted]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="viewAuthz">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.field.FieldSecurity" xml:lang="en"><![CDATA[Indicates whether the component has view authorization and KIM should be consulted]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="additionalRoleQualifiers">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.field.FieldSecurity" xml:lang="en"><![CDATA[Map of key value pairs that should be added as role qualifiers when doing KIM permission checks for this
 component

 
 Any qualifiers given here that will override qualifiers with the same key that were derived by the system
 ]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="namespaceCode">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.field.FieldSecurity" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="editAuthz">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.field.FieldSecurity" xml:lang="en"><![CDATA[Indicates whether the component has edit authorization and KIM should be consulted]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="editInLineAuthz">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.field.FieldSecurity" xml:lang="en"><![CDATA[Indicates whether the field has edit in line authorization and KIM should be consulted]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="componentCode">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.field.FieldSecurity" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="idAttribute">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.field.FieldSecurity" xml:lang="en"><![CDATA[Id that should be sent as permission detail when doing a permission check on this field

 
 By default they system will send the component id as a permission detail, this property can be configured to
 send a different id for the permission check
 ]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="componentAttribute">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.field.FieldSecurity" xml:lang="en"><![CDATA[Component code that should be sent as permission detail when doing a permission check on this field

 
 When the component code is a detail for a permission check, this property can be configured to override the
 component code derived by the system
 ]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="namespaceAttribute">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.field.FieldSecurity" xml:lang="en"><![CDATA[Namespace code that should be sent as permission detail when doing a permission check on this field

 
 When the namespace code is a detail for a permission check, this property can be configured to override the
 namespace derived by the system
 ]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="additionalPermissionDetails">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.field.FieldSecurity" xml:lang="en"><![CDATA[Map of key value pairs that should be added as permission details when doing KIM permission checks for this
 component

 
 Any details given here that will override details with the same key that were derived by the system
 ]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="parent" type="xsd:string"/>
    <xsd:anyAttribute processContents="skip"/>
  </xsd:complexType>
  <xsd:complexType name="disclosure-type">
    <xsd:complexContent>
      <xsd:extension base="componentAttributes-type">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element maxOccurs="1" minOccurs="0" name="onChangeScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Disclosure" xml:lang="en"><![CDATA[Script that should be executed when the component's onChange event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onKeyPressScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Disclosure" xml:lang="en"><![CDATA[Script that should be executed when the component's onKeyPress event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="refreshTimer" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Disclosure" xml:lang="en"><![CDATA[Time in seconds that the component will be automatically refreshed
 
 
 This will invoke the refresh process just like the conditionalRefresh and
 refreshWhenChangedPropertyNames. When using this property methodToCallOnRefresh and id should
 also be specified
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="disableSessionPersistence" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Disclosure" xml:lang="en"><![CDATA[Disables the storage of the component in session (when the framework determines it needs to be due to a
 refresh condition)

 
 When the framework determines there is a condition on the component that requires it to keep around between
 posts, it will store the component instance in session. This flag can be set to disable this behavior (which
 would require custom application logic to support behavior such as refresh)
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onDblClickScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Disclosure" xml:lang="en"><![CDATA[Script that should be executed when the component's onDblClick event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="additionalComponentsToRefresh" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Disclosure" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onBlurScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Disclosure" xml:lang="en"><![CDATA[Script that should be executed when the component's onBlur event is fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="selfRendered" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Disclosure" xml:lang="en"><![CDATA[Indicates whether the component contains its own render output (through
 the renderOutput property)

 
 If self rendered is true, the corresponding template for the component
 will not be invoked and the renderOutput String will be written to the
 response as is.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="colSpan" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Disclosure" xml:lang="en"><![CDATA[Number of places the component should take up horizontally in the
 container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how many places
 horizontally the component should take up within the container. This is
 only applicable for table based layout managers. Default is 1
 

 TODO: this should not be on component interface since it only applies if
 the layout manager supports it, need some sort of layoutOptions map for
 field level options that depend on the manager]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="additionalCssClasses" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Disclosure" xml:lang="en"><![CDATA[Convenience property for adding css class names to the end of the list of cssClasses that may already exist on
 this Component (this is to avoid explicitly having to set list merge in the bean definition)]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="required" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Disclosure" xml:lang="en"><![CDATA[Indicates whether the component is required

 
 At the general component level required means there is some action the
 user needs to take within the component. For example, within a section it
 might mean the fields within the section should be completed. At a field
 level, it means the field should be completed. This provides the ability
 for the renderers to indicate the required action.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="finalizeMethodToCall" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Disclosure" xml:lang="en"><![CDATA[The name of the method that should be invoked for finalizing the component
 configuration (full method name, without parameters or return type)

 
 Note the method can also be set with the finalizeMethodInvoker
 targetMethod property. If the method is on the configured
 ViewHelperService, only this property needs to be configured
 

 
 The model backing the view will be passed as the first argument method and then
 the Component instance as the second argument. If any additional method
 arguments are declared with the finalizeMethodAdditionalArguments, they will then
 be passed in the order declared in the list
 

 
 If the component is selfRendered, the finalize method can return a string which
 will be set as the component's renderOutput. The selfRendered indicator will also
 be set to true on the component.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="resetDataOnRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Disclosure" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onKeyDownScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Disclosure" xml:lang="en"><![CDATA[Script that should be executed when the component's onKeyDown event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="template" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Disclosure" xml:lang="en"><![CDATA[The path to the JSP file that should be called to render the component

 
 The path should be relative to the web root. An attribute will be available to the component to use under the
 name given by the method getComponentTypeName. Based on the component type, additional attributes could
 be available for use. See the component documentation for more information on such attributes.
 

 
 e.g. '/krad/WEB-INF/jsp/tiles/component.jsp'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="align" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Disclosure" xml:lang="en"><![CDATA[Horizontal alignment of the component within its container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how the component
 should be aligned horizontally within the container. During the finalize
 phase the CSS text-align style will be created for the align setting.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="width" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Disclosure" xml:lang="en"><![CDATA[Width the component should take up in the container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies a width the component
 should take up in the Container. This is not applicable for all layout
 managers. During the finalize phase the CSS width style will be created
 for the width setting.
 

 
 e.g. '30%', '55px'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseDownScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Disclosure" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseDown event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="postContent">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Disclosure" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:sequence>
                <xsd:any minOccurs="0" processContents="skip"/>
              </xsd:sequence>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onClickScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Disclosure" xml:lang="en"><![CDATA[Script that should be executed when the component's onClick event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="render" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Disclosure" xml:lang="en"><![CDATA[Indicates whether the component should be rendered in the UI

 
 If set to false, the corresponding component template will not be invoked
 (therefore nothing will be rendered to the UI).
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onLoadScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Disclosure" xml:lang="en"><![CDATA[Script that should be executed when the component's onLoad event is fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="methodToCallOnRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Disclosure" xml:lang="en"><![CDATA[Name of a method on the controller that should be invoked as part of the component refresh
 and disclosure process
 
 
 During the component refresh or disclosure process it might be necessary to perform other
 operations, such as preparing data or executing a business process. This allows the
 configuration of a method on the underlying controller that should be called for the
 component refresh action. In this method, the necessary logic can be performed and then the
 base component update method invoked to carry out the component refresh.
 
 
 
 Controller method to invoke must accept the form, binding result, request, and response
 arguments
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="finalizeMethodInvoker" type="org.kuali.rice.krad.uif.component.MethodInvokerConfig">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Disclosure" xml:lang="en"><![CDATA[MethodInvokerConfig instance for the method that should be invoked
 for finalizing the component configuration

 
 MethodInvoker can be configured to specify the class or object the method
 should be called on. For static method invocations, the targetClass
 property can be configured. For object invocations, that targetObject
 property can be configured
 

 
 If the component is selfRendered, the finalize method can return a string which
 will be set as the component's renderOutput. The selfRendered indicator will also
 be set to true on the component.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="defaultOpen" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Disclosure" xml:lang="en"><![CDATA[Indicates whether the group should be initially open]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="componentModifiers">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Disclosure" xml:lang="en"><![CDATA[ComponentModifier instances that should be invoked to
 initialize the component

 
 These provide dynamic initialization behavior for the component and are
 configured through the components definition. Each initializer will get
 invoked by the initialize method.
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="org.kuali.rice.krad.uif.modifier.ComponentModifier">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="componentCode" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Disclosure" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="propertyReplacers">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Disclosure" xml:lang="en"><![CDATA[gets a list of PropertyReplacer instances

 They will be evaluated
 during the view lifecycle to conditionally set properties on the
 Component based on expression evaluations]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="org.kuali.rice.krad.uif.component.PropertyReplacer">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onDocumentReadyScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Disclosure" xml:lang="en"><![CDATA[Script to be run when the document ready event is triggered]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="refreshWhenChangedPropertyNames" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Disclosure" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseUpScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Disclosure" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseUp event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="renderedHtmlOutput" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Disclosure" xml:lang="en"><![CDATA[Rendering output for the component that will be sent as part of the
 response (can contain static text and HTML)]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onKeyUpScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Disclosure" xml:lang="en"><![CDATA[Script that should be executed when the component's onKeyUp event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onCloseScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Disclosure" xml:lang="en"><![CDATA[Script that should be executed when the component's onClose event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="id" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Disclosure" xml:lang="en"><![CDATA[The unique id (within a given tree) for the element.

 The id is used to identify an element instance within the tree, and
 will be used by renderers to set the HTML element id. This gives a way to find various elements
 for scripting. If the id is not given, a default will be generated by the framework.
 

 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="title" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Disclosure" xml:lang="en"><![CDATA[The component title

 
 Depending on the component can be used in various ways. For example with a Container component the title is
 used to set the header text. For components like controls other other components that render an HTML element it
 is used to set the HTML title attribute.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="order" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Disclosure" xml:lang="en"><![CDATA[Order of a component within a List of other components

 Lower numbers are placed higher up in the list, while higher numbers are placed
 lower in the list]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="style" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Disclosure" xml:lang="en"><![CDATA[CSS style string to be applied to the component

 
 Any style override or additions can be specified with this attribute.
 This is used by the renderer to set the style attribute on the
 corresponding element.
 

 
 e.g. 'color: #000000;text-decoration: underline;'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="finalizeMethodAdditionalArguments" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Disclosure" xml:lang="en"><![CDATA[The List of Object instances that should be passed as arguments to the finalize method

 
 These arguments are passed to the finalize method after the standard model and component
 arguments. They are passed in the order declared in the list
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onSubmitScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Disclosure" xml:lang="en"><![CDATA[Script that should be executed when the component's onSubmit event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="conditionalRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Disclosure" xml:lang="en"><![CDATA[When set if the condition is satisfied, the component will be refreshed.
 
 
 The component MUST BE a container or field type. conditionalRefresh is defined in a limited
 Spring EL syntax. Only valid form property names, and, or, logical comparison operators
 (non-arithmetic), #listContains, #emptyList, and the matches clause are allowed. String and
 regex values must use single quotes ('), booleans must be either true or false, numbers must
 be a valid double either negative or positive.
 
 
 DO NOT use progressiveRender and conditionalRefresh on the same component unless it is known
 that the component will always be visible in all cases when a conditionalRefresh happens (ie
 conditionalRefresh has progressiveRender's condition anded with its own condition). If a
 component should be refreshed every time it is shown, use the progressiveRenderAndRefresh
 option with this property instead.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="rowSpan" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Disclosure" xml:lang="en"><![CDATA[Number of places the component should take up vertically in the container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how many places
 vertically the component should take up within the container. This is
 only applicable for table based layout managers. Default is 1
 

 TODO: this should not be on component interface since it only applies if
 the layout manager supports it, need some sort of layoutOptions map for
 field level options that depend on the manager]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="retrieveViaAjax" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Disclosure" xml:lang="en"><![CDATA[When true, this component will render as a placeholder component instead of rendering normally because the
 content will be later retrieved through manually ajax retrieval calls in the js

 This flag does not imply any automation, there must be a js call invoked for the content to be retrieved
 by the server, but this does mark it with a placeholder component which KRAD js uses during these calls.
 This placeholder component is used for ajax retrievals.  In particular, this flag is useful for use in
 combination with the showLightboxComponent js function which will automatically retrieve the
 real content of a component through ajax if a placeholder component is detected.  This allows for the full
 content to only be retrieved when the lightbox is first opened.
 When this flag is set to true, the forceSessionPersistence
 flag is set to true AUTOMATICALLY because it is implied that this component will be retrieved by an ajax call
 in the future.  This may also be useful for direct custom calls to retrieveComponent function,
 as well, which also relies on the placeholder being present.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="namespaceCode" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Disclosure" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="progressiveRender" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Disclosure" xml:lang="en"><![CDATA[When set if the condition is satisfied, the component will be displayed. The component MUST
 BE a container or field type. progressiveRender is defined in a limited Spring EL syntax.
 Only valid form property names, and, or, logical comparison operators (non-arithmetic),
 #listContains, #emptyList, matches clause are allowed. String and regex values must use
 single quotes ('), booleans must be either true or false, numbers must be a valid double,
 either negative or positive.
 
 
 DO NOT use progressiveRender and a conditional refresh statement on the same component unless
 it is known that the component will always be visible in all cases when a conditional refresh
 happens (ie conditional refresh has progressiveRender's condition anded with its own
 condition).
 
 
 
 If a component should be refreshed every time it is shown, use the
 progressiveRenderAndRefresh option with this property instead.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="templateOptionsJSString" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Disclosure" xml:lang="en"><![CDATA[Builds a string from the underlying Map of template options that will export
 that options as a JavaScript Map for use in js and jQuery plugins]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseOutScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Disclosure" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseOut event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="templateOptions">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Disclosure" xml:lang="en"><![CDATA[The options that are passed through to the Component renderer

 
 The Map key is the option name, with the Map value as the option value. See
 documentation on the particular widget render for available options.
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:mapType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:choice maxOccurs="1" minOccurs="0">
            <xsd:element ref="tooltip"/>
            <xsd:element ref="tooltipFocus"/>
            <xsd:element ref="tooltipHelp"/>
          </xsd:choice>
          <xsd:element maxOccurs="1" minOccurs="0" name="preContent">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Disclosure" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:sequence>
                <xsd:any minOccurs="0" processContents="skip"/>
              </xsd:sequence>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseOverScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Disclosure" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseOver event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="dataAttributes">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Disclosure" xml:lang="en"><![CDATA[Get the dataAttributes setup for this component - to be written to the html/jQuery data
 
 
 The attributes that are complex objects (contain {}) they will be written through script. The
 attritubes that are simple (contain no objects) will be written directly to the html of the
 component using standard data-. Either way they can be access through .data() call in jQuery
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:mapType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:choice maxOccurs="1" minOccurs="0">
            <xsd:element ref="fieldSecurity"/>
            <xsd:element ref="dataFieldSecurity"/>
            <xsd:element ref="actionSecurity"/>
            <xsd:element ref="collectionGroupSecurity"/>
            <xsd:element ref="componentSecurity"/>
          </xsd:choice>
          <xsd:element maxOccurs="1" minOccurs="0" name="readOnly" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Disclosure" xml:lang="en"><![CDATA[Indicates whether the component can be edited

 
 When readOnly the controls and widgets of Field components
 will not be rendered. If the Field has an underlying value it will be
 displayed readOnly to the user.
 

 
 For a Container component, the readOnly setting will apply
 to all contained components (making a section readOnly makes all fields
 within the section readOnly).
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseMoveScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Disclosure" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseMove event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="progressiveRenderAndRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Disclosure" xml:lang="en"><![CDATA[If true, when the progressiveRender condition is satisfied, the component will always be
 retrieved from the server and shown(as opposed to being stored on the client, but hidden,
 after the first retrieval as is the case with the progressiveRenderViaAJAX option).
 
 
 By default, this is false, so components with progressive render capabilities will always
 be already within the client html and toggled to be hidden or visible.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="hidden" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Disclosure" xml:lang="en"><![CDATA[Indicates whether the component should be hidden in the UI

 
 How the hidden data is maintained depends on the views persistence mode.
 If the mode is request, the corresponding data will be rendered to the UI
 but not visible. If the mode is session, the data will not be rendered to
 the UI but maintained server side.
 

 
 For a Container component, the hidden setting will apply to
 all contained components (making a section hidden makes all fields within
 the section hidden)
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="skipInTabOrder" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Disclosure" xml:lang="en"><![CDATA[Flag indicating that this component and its nested components must be skipped when keyboard
 tabbing.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onUnloadScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Disclosure" xml:lang="en"><![CDATA[Script that should be executed when the component's onUnload event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="context">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Disclosure" xml:lang="en"><![CDATA[Context map for the component

 
 Any el statements configured for the components properties (e.g.
 title="@{foo.property}") are evaluated using the el context map. This map
 will get populated with default objects like the model, view, and request
 from the ViewHelperService. Other components can push
 further objects into the context so that they are available for use with
 that component. For example, Field instances that are part
 of a collection line as receive the current line instance
 

 
 Context map also provides objects to methods that are invoked for
 GeneratedField instances
 

 
 The Map key gives the name of the variable that can be used within
 expressions, and the Map value gives the object instance for which
 expressions containing the variable should evaluate against
 

 
 NOTE: Calling getContext().putAll() will skip updating any configured property replacers for the
 component. Instead you should call #pushAllToContext
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:mapType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="animationSpeed" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Disclosure" xml:lang="en"><![CDATA[Gives the speed for the open/close animation, a smaller int will result
 in a faster animation]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="forceSessionPersistence" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Disclosure" xml:lang="en"><![CDATA[Indicates whether the component should be stored with the session view regardless of configuration

 
 By default the framework nulls out any components that do not have a refresh condition or are needed for
 collection processing. This can be a problem if custom application code is written to refresh a component
 without setting the corresponding component flag. In this case this property can be set to true to force the
 framework to keep the component in session. Defaults to false
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="valign" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Disclosure" xml:lang="en"><![CDATA[Vertical alignment of the component within its container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how the component
 should be aligned vertically within the container. During the finalize
 phase the CSS vertical-align style will be created for the valign
 setting.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onFocusScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Disclosure" xml:lang="en"><![CDATA[Script that should be executed when the component's onFocus event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="progressiveRenderViaAJAX" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Disclosure" xml:lang="en"><![CDATA[When progressiveRenderViaAJAX is true, this component will be retrieved from the server when
 it first satisfies its progressive render condition.
 
 
 After the first retrieval, it is hidden/shown in the html by the js when its progressive
 condition result changes. By default, this is false, so components with progressive render
 capabilities will always be already within the client html and toggled to be hidden or
 visible.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="cssClasses" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Disclosure" xml:lang="en"><![CDATA[CSS style class(s) to be applied to the component

 
 Declares style classes for the component. Multiple classes are specified
 with a space delimiter. This is used by the renderer to set the class
 attribute on the corresponding element. The class(s) declared must be
 available in the common style sheets or the style sheets specified for
 the view
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="templateName" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Disclosure" xml:lang="en"><![CDATA[The name for which the template can be invoked by

 
 Whether the template name is needed depends on the underlying rendering engine being used. In the example of
 Freemarker, the template points to the actual source file, which then loads a macro. From then on the macro is
 simply invoked to execute the template
 

 
 e.g. 'uif_text'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="unbounded" minOccurs="0" ref="spring:property"/>
          <xsd:element maxOccurs="unbounded" minOccurs="0" ref="property"/>
        </xsd:choice>
        <xsd:attribute name="defaultOpen">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.widget.Disclosure" xml:lang="en"><![CDATA[Indicates whether the group should be initially open]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="animationSpeed">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.widget.Disclosure" xml:lang="en"><![CDATA[Gives the speed for the open/close animation, a smaller int will result
 in a faster animation]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:anyAttribute processContents="skip"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="help-mixedType">
    <xsd:complexContent>
      <xsd:extension base="help-type">
        <xsd:choice maxOccurs="1" minOccurs="0">
          <xsd:element ref="help"/>
        </xsd:choice>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="header-mixedType">
    <xsd:complexContent>
      <xsd:extension base="header-type">
        <xsd:choice maxOccurs="1" minOccurs="0">
          <xsd:element ref="pageHeader"/>
          <xsd:element ref="header"/>
          <xsd:element ref="headerSix"/>
          <xsd:element ref="headerTwo"/>
          <xsd:element ref="sectionHeader"/>
          <xsd:element ref="headerOne"/>
          <xsd:element ref="headerFive"/>
          <xsd:element ref="subCollectionHeader"/>
          <xsd:element ref="headerThree"/>
          <xsd:element ref="subSectionHeader"/>
          <xsd:element ref="headerFour"/>
          <xsd:element ref="viewHeader"/>
        </xsd:choice>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="validationMessages-mixedType">
    <xsd:complexContent>
      <xsd:extension base="validationMessages-type">
        <xsd:choice maxOccurs="1" minOccurs="0">
          <xsd:element ref="pageValidationMessages"/>
          <xsd:element ref="fieldValidationMessages"/>
          <xsd:element ref="groupValidationMessages"/>
          <xsd:element ref="validationMessages"/>
        </xsd:choice>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="footer-mixedType">
    <xsd:complexContent>
      <xsd:extension base="group-type">
        <xsd:choice maxOccurs="1" minOccurs="0">
          <xsd:element ref="tabSubSection"/>
          <xsd:element ref="tabGroup"/>
          <xsd:element ref="tabSection"/>
          <xsd:element ref="treeGroup"/>
          <xsd:element ref="treeSection"/>
          <xsd:element ref="treeSubSection"/>
          <xsd:element ref="sidebarNavigation"/>
          <xsd:element ref="menuNavigation"/>
          <xsd:element ref="lightTable"/>
          <xsd:element ref="lightTableSection"/>
          <xsd:element ref="lightTableSubSection"/>
          <xsd:element ref="formFooter"/>
          <xsd:element ref="collectionVerticalBoxItem"/>
          <xsd:element ref="horizontalSection"/>
          <xsd:element ref="horizontalGroup"/>
          <xsd:element ref="maintenanceVerticalSubSection"/>
          <xsd:element ref="subSection"/>
          <xsd:element ref="subSection2Col"/>
          <xsd:element ref="headerUpperGroup"/>
          <xsd:element ref="cssGrid"/>
          <xsd:element ref="listSection"/>
          <xsd:element ref="subSection1Col"/>
          <xsd:element ref="disclosureVerticalSection"/>
          <xsd:element ref="headerLowerGroup"/>
          <xsd:element ref="headerRightGroup"/>
          <xsd:element ref="disclosureHorizontalSection"/>
          <xsd:element ref="grid"/>
          <xsd:element ref="maintenanceHorizontalSection"/>
          <xsd:element ref="maintenanceGridSubSection"/>
          <xsd:element ref="subSection3Col"/>
          <xsd:element ref="gridSection"/>
          <xsd:element ref="maintenanceVerticalSection"/>
          <xsd:element ref="section3Col"/>
          <xsd:element ref="section"/>
          <xsd:element ref="list"/>
          <xsd:element ref="collectionGridItem"/>
          <xsd:element ref="boxGroup"/>
          <xsd:element ref="listSubSection"/>
          <xsd:element ref="collectionHorizontalBoxItem"/>
          <xsd:element ref="maintenanceVerticalGroup"/>
          <xsd:element ref="verticalSubSection"/>
          <xsd:element ref="maintenanceHorizontalGroup"/>
          <xsd:element ref="disclosureGridSection"/>
          <xsd:element ref="disclosureListSection"/>
          <xsd:element ref="verticalSection"/>
          <xsd:element ref="section1Col"/>
          <xsd:element ref="section2Col"/>
          <xsd:element ref="maintenanceGrid"/>
          <xsd:element ref="maintenanceGridSection"/>
          <xsd:element ref="group"/>
          <xsd:element ref="horizontalSubSection"/>
          <xsd:element ref="disclosureListSubSection"/>
          <xsd:element ref="verticalGroup"/>
          <xsd:element ref="gridSubSection"/>
          <xsd:element ref="maintenanceHorizontalSubSection"/>
          <xsd:element ref="disclosureHorizontalSubSection"/>
          <xsd:element ref="disclosureVerticalSubSection"/>
          <xsd:element ref="linkGroup"/>
          <xsd:element ref="linkSubGroup"/>
          <xsd:element ref="accordionSubSection"/>
          <xsd:element ref="accordionGroup"/>
          <xsd:element ref="accordionSection"/>
          <xsd:element ref="disclosureAccordionSection"/>
          <xsd:element ref="disclosureAccordionSubSection"/>
          <xsd:element ref="disclosureStackedSubSection"/>
          <xsd:element ref="maintenanceStackedSubCollection-withinSection"/>
          <xsd:element ref="disclosureTableSubCollection-withinSection"/>
          <xsd:element ref="maintenanceStackedSection"/>
          <xsd:element ref="stackedSubSection"/>
          <xsd:element ref="tableSubCollection-withinSection"/>
          <xsd:element ref="disclosureTableSubSection"/>
          <xsd:element ref="stacked"/>
          <xsd:element ref="disclosureStackedSubCollection-withinSubSection"/>
          <xsd:element ref="maintenanceTableSubCollection-withinSection"/>
          <xsd:element ref="table"/>
          <xsd:element ref="disclosureStackedSection"/>
          <xsd:element ref="disclosureStackedSubCollection-withinSection"/>
          <xsd:element ref="listCollectionSection"/>
          <xsd:element ref="disclosureTableSubCollection-withinSubSection"/>
          <xsd:element ref="stackedSection"/>
          <xsd:element ref="collectionGroup"/>
          <xsd:element ref="maintenanceTableSection"/>
          <xsd:element ref="listCollectionSubSection"/>
          <xsd:element ref="tableSubCollection-withinSubSection"/>
          <xsd:element ref="tableSection"/>
          <xsd:element ref="stackedSubCollection-withinSubSection"/>
          <xsd:element ref="tableSubSection"/>
          <xsd:element ref="stackedSubCollection-withinSection"/>
          <xsd:element ref="listCollection"/>
          <xsd:element ref="disclosureTableSection"/>
          <xsd:element ref="radioButtonDialog"/>
          <xsd:element ref="okCancelDialog"/>
          <xsd:element ref="dialog"/>
          <xsd:element ref="checkboxDialog"/>
          <xsd:element ref="yesNoDialog"/>
          <xsd:element ref="trueFalseDialog"/>
          <xsd:element ref="navigation"/>
          <xsd:element ref="tabNavigation"/>
          <xsd:element ref="documentPage"/>
          <xsd:element ref="page"/>
          <xsd:element ref="maintenancePage"/>
          <xsd:element ref="inquiryPage"/>
        </xsd:choice>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="scrollpane-mixedType">
    <xsd:complexContent>
      <xsd:extension base="scrollpane-type">
        <xsd:choice maxOccurs="1" minOccurs="0">
          <xsd:element ref="scrollpane"/>
        </xsd:choice>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="tabGroup-type">
    <xsd:complexContent>
      <xsd:extension base="componentAttributes-type">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element maxOccurs="1" minOccurs="0" name="onChangeScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TabGroup" xml:lang="en"><![CDATA[Script that should be executed when the component's onChange event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onKeyPressScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TabGroup" xml:lang="en"><![CDATA[Script that should be executed when the component's onKeyPress event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="refreshTimer" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TabGroup" xml:lang="en"><![CDATA[Time in seconds that the component will be automatically refreshed
 
 
 This will invoke the refresh process just like the conditionalRefresh and
 refreshWhenChangedPropertyNames. When using this property methodToCallOnRefresh and id should
 also be specified
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="disableSessionPersistence" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TabGroup" xml:lang="en"><![CDATA[Disables the storage of the component in session (when the framework determines it needs to be due to a
 refresh condition)

 
 When the framework determines there is a condition on the component that requires it to keep around between
 posts, it will store the component instance in session. This flag can be set to disable this behavior (which
 would require custom application logic to support behavior such as refresh)
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onDblClickScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TabGroup" xml:lang="en"><![CDATA[Script that should be executed when the component's onDblClick event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="additionalComponentsToRefresh" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TabGroup" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onBlurScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TabGroup" xml:lang="en"><![CDATA[Script that should be executed when the component's onBlur event is fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:choice maxOccurs="1" minOccurs="0">
            <xsd:element ref="help"/>
          </xsd:choice>
          <xsd:element maxOccurs="1" minOccurs="0" name="selfRendered" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TabGroup" xml:lang="en"><![CDATA[Indicates whether the component contains its own render output (through
 the renderOutput property)

 
 If self rendered is true, the corresponding template for the component
 will not be invoked and the renderOutput String will be written to the
 response as is.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="colSpan" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TabGroup" xml:lang="en"><![CDATA[Number of places the component should take up horizontally in the
 container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how many places
 horizontally the component should take up within the container. This is
 only applicable for table based layout managers. Default is 1
 

 TODO: this should not be on component interface since it only applies if
 the layout manager supports it, need some sort of layoutOptions map for
 field level options that depend on the manager]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="additionalCssClasses" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TabGroup" xml:lang="en"><![CDATA[Convenience property for adding css class names to the end of the list of cssClasses that may already exist on
 this Component (this is to avoid explicitly having to set list merge in the bean definition)]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="required" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TabGroup" xml:lang="en"><![CDATA[Indicates whether the component is required

 
 At the general component level required means there is some action the
 user needs to take within the component. For example, within a section it
 might mean the fields within the section should be completed. At a field
 level, it means the field should be completed. This provides the ability
 for the renderers to indicate the required action.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="finalizeMethodToCall" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TabGroup" xml:lang="en"><![CDATA[The name of the method that should be invoked for finalizing the component
 configuration (full method name, without parameters or return type)

 
 Note the method can also be set with the finalizeMethodInvoker
 targetMethod property. If the method is on the configured
 ViewHelperService, only this property needs to be configured
 

 
 The model backing the view will be passed as the first argument method and then
 the Component instance as the second argument. If any additional method
 arguments are declared with the finalizeMethodAdditionalArguments, they will then
 be passed in the order declared in the list
 

 
 If the component is selfRendered, the finalize method can return a string which
 will be set as the component's renderOutput. The selfRendered indicator will also
 be set to true on the component.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="resetDataOnRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TabGroup" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onKeyDownScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TabGroup" xml:lang="en"><![CDATA[Script that should be executed when the component's onKeyDown event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="template" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TabGroup" xml:lang="en"><![CDATA[The path to the JSP file that should be called to render the component

 
 The path should be relative to the web root. An attribute will be available to the component to use under the
 name given by the method getComponentTypeName. Based on the component type, additional attributes could
 be available for use. See the component documentation for more information on such attributes.
 

 
 e.g. '/krad/WEB-INF/jsp/tiles/component.jsp'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="align" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TabGroup" xml:lang="en"><![CDATA[Horizontal alignment of the component within its container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how the component
 should be aligned horizontally within the container. During the finalize
 phase the CSS text-align style will be created for the align setting.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseDownScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TabGroup" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseDown event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="width" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TabGroup" xml:lang="en"><![CDATA[Width the component should take up in the container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies a width the component
 should take up in the Container. This is not applicable for all layout
 managers. During the finalize phase the CSS width style will be created
 for the width setting.
 

 
 e.g. '30%', '55px'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="postContent">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TabGroup" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:sequence>
                <xsd:any minOccurs="0" processContents="skip"/>
              </xsd:sequence>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="Disclosure" type="org.kuali.rice.krad.uif.widget.Disclosure">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TabGroup" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onClickScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TabGroup" xml:lang="en"><![CDATA[Script that should be executed when the component's onClick event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:choice maxOccurs="1" minOccurs="0">
            <xsd:element ref="pageHeader"/>
            <xsd:element ref="header"/>
            <xsd:element ref="headerSix"/>
            <xsd:element ref="headerTwo"/>
            <xsd:element ref="sectionHeader"/>
            <xsd:element ref="headerOne"/>
            <xsd:element ref="headerFive"/>
            <xsd:element ref="subCollectionHeader"/>
            <xsd:element ref="headerThree"/>
            <xsd:element ref="subSectionHeader"/>
            <xsd:element ref="headerFour"/>
            <xsd:element ref="viewHeader"/>
          </xsd:choice>
          <xsd:element maxOccurs="1" minOccurs="0" name="render" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TabGroup" xml:lang="en"><![CDATA[Indicates whether the component should be rendered in the UI

 
 If set to false, the corresponding component template will not be invoked
 (therefore nothing will be rendered to the UI).
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onLoadScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TabGroup" xml:lang="en"><![CDATA[Script that should be executed when the component's onLoad event is fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="methodToCallOnRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TabGroup" xml:lang="en"><![CDATA[Name of a method on the controller that should be invoked as part of the component refresh
 and disclosure process
 
 
 During the component refresh or disclosure process it might be necessary to perform other
 operations, such as preparing data or executing a business process. This allows the
 configuration of a method on the underlying controller that should be called for the
 component refresh action. In this method, the necessary logic can be performed and then the
 base component update method invoked to carry out the component refresh.
 
 
 
 Controller method to invoke must accept the form, binding result, request, and response
 arguments
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="finalizeMethodInvoker" type="org.kuali.rice.krad.uif.component.MethodInvokerConfig">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TabGroup" xml:lang="en"><![CDATA[MethodInvokerConfig instance for the method that should be invoked
 for finalizing the component configuration

 
 MethodInvoker can be configured to specify the class or object the method
 should be called on. For static method invocations, the targetClass
 property can be configured. For object invocations, that targetObject
 property can be configured
 

 
 If the component is selfRendered, the finalize method can return a string which
 will be set as the component's renderOutput. The selfRendered indicator will also
 be set to true on the component.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="items">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TabGroup" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:listOrSetType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="componentModifiers">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TabGroup" xml:lang="en"><![CDATA[ComponentModifier instances that should be invoked to
 initialize the component

 
 These provide dynamic initialization behavior for the component and are
 configured through the components definition. Each initializer will get
 invoked by the initialize method.
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="org.kuali.rice.krad.uif.modifier.ComponentModifier">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="componentCode" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TabGroup" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="headertext" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TabGroup" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onDocumentReadyScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TabGroup" xml:lang="en"><![CDATA[Script to be run when the document ready event is triggered]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="propertyReplacers">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TabGroup" xml:lang="en"><![CDATA[gets a list of PropertyReplacer instances

 They will be evaluated
 during the view lifecycle to conditionally set properties on the
 Component based on expression evaluations]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="org.kuali.rice.krad.uif.component.PropertyReplacer">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="defaultItemPosition" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TabGroup" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="refreshWhenChangedPropertyNames" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TabGroup" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="instructionalText" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TabGroup" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseUpScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TabGroup" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseUp event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:choice maxOccurs="1" minOccurs="0">
            <xsd:element ref="pageValidationMessages"/>
            <xsd:element ref="fieldValidationMessages"/>
            <xsd:element ref="groupValidationMessages"/>
            <xsd:element ref="validationMessages"/>
          </xsd:choice>
          <xsd:element maxOccurs="1" minOccurs="0" name="onKeyUpScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TabGroup" xml:lang="en"><![CDATA[Script that should be executed when the component's onKeyUp event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="renderedHtmlOutput" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TabGroup" xml:lang="en"><![CDATA[Rendering output for the component that will be sent as part of the
 response (can contain static text and HTML)]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onCloseScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TabGroup" xml:lang="en"><![CDATA[Script that should be executed when the component's onClose event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="id" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TabGroup" xml:lang="en"><![CDATA[The unique id (within a given tree) for the element.

 The id is used to identify an element instance within the tree, and
 will be used by renderers to set the HTML element id. This gives a way to find various elements
 for scripting. If the id is not given, a default will be generated by the framework.
 

 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="title" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TabGroup" xml:lang="en"><![CDATA[The component title

 
 Depending on the component can be used in various ways. For example with a Container component the title is
 used to set the header text. For components like controls other other components that render an HTML element it
 is used to set the HTML title attribute.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="order" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TabGroup" xml:lang="en"><![CDATA[Order of a component within a List of other components

 Lower numbers are placed higher up in the list, while higher numbers are placed
 lower in the list]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="style" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TabGroup" xml:lang="en"><![CDATA[CSS style string to be applied to the component

 
 Any style override or additions can be specified with this attribute.
 This is used by the renderer to set the style attribute on the
 corresponding element.
 

 
 e.g. 'color: #000000;text-decoration: underline;'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="finalizeMethodAdditionalArguments" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TabGroup" xml:lang="en"><![CDATA[The List of Object instances that should be passed as arguments to the finalize method

 
 These arguments are passed to the finalize method after the standard model and component
 arguments. They are passed in the order declared in the list
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="conditionalRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TabGroup" xml:lang="en"><![CDATA[When set if the condition is satisfied, the component will be refreshed.
 
 
 The component MUST BE a container or field type. conditionalRefresh is defined in a limited
 Spring EL syntax. Only valid form property names, and, or, logical comparison operators
 (non-arithmetic), #listContains, #emptyList, and the matches clause are allowed. String and
 regex values must use single quotes ('), booleans must be either true or false, numbers must
 be a valid double either negative or positive.
 
 
 DO NOT use progressiveRender and conditionalRefresh on the same component unless it is known
 that the component will always be visible in all cases when a conditionalRefresh happens (ie
 conditionalRefresh has progressiveRender's condition anded with its own condition). If a
 component should be refreshed every time it is shown, use the progressiveRenderAndRefresh
 option with this property instead.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onSubmitScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TabGroup" xml:lang="en"><![CDATA[Script that should be executed when the component's onSubmit event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="rowSpan" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TabGroup" xml:lang="en"><![CDATA[Number of places the component should take up vertically in the container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how many places
 vertically the component should take up within the container. This is
 only applicable for table based layout managers. Default is 1
 

 TODO: this should not be on component interface since it only applies if
 the layout manager supports it, need some sort of layoutOptions map for
 field level options that depend on the manager]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="retrieveViaAjax" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TabGroup" xml:lang="en"><![CDATA[When true, this component will render as a placeholder component instead of rendering normally because the
 content will be later retrieved through manually ajax retrieval calls in the js

 This flag does not imply any automation, there must be a js call invoked for the content to be retrieved
 by the server, but this does mark it with a placeholder component which KRAD js uses during these calls.
 This placeholder component is used for ajax retrievals.  In particular, this flag is useful for use in
 combination with the showLightboxComponent js function which will automatically retrieve the
 real content of a component through ajax if a placeholder component is detected.  This allows for the full
 content to only be retrieved when the lightbox is first opened.
 When this flag is set to true, the forceSessionPersistence
 flag is set to true AUTOMATICALLY because it is implied that this component will be retrieved by an ajax call
 in the future.  This may also be useful for direct custom calls to retrieveComponent function,
 as well, which also relies on the placeholder being present.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="namespaceCode" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TabGroup" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="progressiveRender" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TabGroup" xml:lang="en"><![CDATA[When set if the condition is satisfied, the component will be displayed. The component MUST
 BE a container or field type. progressiveRender is defined in a limited Spring EL syntax.
 Only valid form property names, and, or, logical comparison operators (non-arithmetic),
 #listContains, #emptyList, matches clause are allowed. String and regex values must use
 single quotes ('), booleans must be either true or false, numbers must be a valid double,
 either negative or positive.
 
 
 DO NOT use progressiveRender and a conditional refresh statement on the same component unless
 it is known that the component will always be visible in all cases when a conditional refresh
 happens (ie conditional refresh has progressiveRender's condition anded with its own
 condition).
 
 
 
 If a component should be refreshed every time it is shown, use the
 progressiveRenderAndRefresh option with this property instead.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="templateOptionsJSString" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TabGroup" xml:lang="en"><![CDATA[Builds a string from the underlying Map of template options that will export
 that options as a JavaScript Map for use in js and jQuery plugins]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseOutScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TabGroup" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseOut event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="templateOptions">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TabGroup" xml:lang="en"><![CDATA[The options that are passed through to the Component renderer

 
 The Map key is the option name, with the Map value as the option value. See
 documentation on the particular widget render for available options.
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:mapType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="fieldBindingObjectPath" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TabGroup" xml:lang="en"><![CDATA[Object binding path to set on each of the group's
 InputField instances

 
 When the attributes of the group belong to a object whose path is
 different from the default then this property can be given to set each of
 the attributes instead of setting the model path on each one. The object
 path can be overridden at the attribute level. The object path is set to
 the fieldBindingObjectPath during the initialize phase.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:choice maxOccurs="1" minOccurs="0">
            <xsd:element ref="tooltip"/>
            <xsd:element ref="tooltipFocus"/>
            <xsd:element ref="tooltipHelp"/>
          </xsd:choice>
          <xsd:element maxOccurs="1" minOccurs="0" name="preContent">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TabGroup" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:sequence>
                <xsd:any minOccurs="0" processContents="skip"/>
              </xsd:sequence>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseOverScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TabGroup" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseOver event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="dataAttributes">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TabGroup" xml:lang="en"><![CDATA[Get the dataAttributes setup for this component - to be written to the html/jQuery data
 
 
 The attributes that are complex objects (contain {}) they will be written through script. The
 attritubes that are simple (contain no objects) will be written directly to the html of the
 component using standard data-. Either way they can be access through .data() call in jQuery
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:mapType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="fieldBindByNamePrefix" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TabGroup" xml:lang="en"><![CDATA[Binding prefix string to set on each of the groups DataField instances

 
 As opposed to setting the bindingPrefix on each attribute field instance,
 it can be set here for the group. During initialize the string will then
 be set on each attribute field instance if the bindingPrefix is blank and
 not a form field
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element ref="footer"/>
          <xsd:choice maxOccurs="1" minOccurs="0">
            <xsd:element ref="fieldSecurity"/>
            <xsd:element ref="dataFieldSecurity"/>
            <xsd:element ref="actionSecurity"/>
            <xsd:element ref="collectionGroupSecurity"/>
            <xsd:element ref="componentSecurity"/>
          </xsd:choice>
          <xsd:choice maxOccurs="1" minOccurs="0">
            <xsd:element ref="tableLayout"/>
            <xsd:element ref="listLayout"/>
            <xsd:element ref="orderedListLayout"/>
            <xsd:element ref="cssGridLayout"/>
            <xsd:element ref="fourColumnGridLayout"/>
            <xsd:element ref="gridLayout"/>
            <xsd:element ref="sixColumnGridLayout"/>
            <xsd:element ref="twoColumnGridLayout"/>
            <xsd:element ref="cssGridLabelColumnLayout"/>
            <xsd:element ref="cssGridLayoutBase"/>
            <xsd:element ref="stackedLayout"/>
            <xsd:element ref="stackedLayoutGridItems"/>
            <xsd:element ref="stackedLayoutList"/>
            <xsd:element ref="stackedLayoutBoxItems"/>
            <xsd:element ref="boxLayout"/>
            <xsd:element ref="horizontalBoxLayout"/>
            <xsd:element ref="verticalBoxLayout"/>
            <xsd:element maxOccurs="1" minOccurs="0" name="layoutManager" type="org.kuali.rice.krad.uif.layout.LayoutManager"/>
          </xsd:choice>
          <xsd:element maxOccurs="1" minOccurs="0" name="readOnly" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TabGroup" xml:lang="en"><![CDATA[Indicates whether the component can be edited

 
 When readOnly the controls and widgets of Field components
 will not be rendered. If the Field has an underlying value it will be
 displayed readOnly to the user.
 

 
 For a Container component, the readOnly setting will apply
 to all contained components (making a section readOnly makes all fields
 within the section readOnly).
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseMoveScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TabGroup" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseMove event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="progressiveRenderAndRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TabGroup" xml:lang="en"><![CDATA[If true, when the progressiveRender condition is satisfied, the component will always be
 retrieved from the server and shown(as opposed to being stored on the client, but hidden,
 after the first retrieval as is the case with the progressiveRenderViaAJAX option).
 
 
 By default, this is false, so components with progressive render capabilities will always
 be already within the client html and toggled to be hidden or visible.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="hidden" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TabGroup" xml:lang="en"><![CDATA[Indicates whether the component should be hidden in the UI

 
 How the hidden data is maintained depends on the views persistence mode.
 If the mode is request, the corresponding data will be rendered to the UI
 but not visible. If the mode is session, the data will not be rendered to
 the UI but maintained server side.
 

 
 For a Container component, the hidden setting will apply to
 all contained components (making a section hidden makes all fields within
 the section hidden)
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="skipInTabOrder" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TabGroup" xml:lang="en"><![CDATA[Flag indicating that this component and its nested components must be skipped when keyboard
 tabbing.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="context">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TabGroup" xml:lang="en"><![CDATA[Context map for the component

 
 Any el statements configured for the components properties (e.g.
 title="@{foo.property}") are evaluated using the el context map. This map
 will get populated with default objects like the model, view, and request
 from the ViewHelperService. Other components can push
 further objects into the context so that they are available for use with
 that component. For example, Field instances that are part
 of a collection line as receive the current line instance
 

 
 Context map also provides objects to methods that are invoked for
 GeneratedField instances
 

 
 The Map key gives the name of the variable that can be used within
 expressions, and the Map value gives the object instance for which
 expressions containing the variable should evaluate against
 

 
 NOTE: Calling getContext().putAll() will skip updating any configured property replacers for the
 component. Instead you should call #pushAllToContext
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:mapType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="tabsWidget" type="org.kuali.rice.krad.uif.widget.Tabs">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TabGroup" xml:lang="en"><![CDATA[Gets the widget which contains any configuration for the tab widget component used to render
 this TabGroup]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onUnloadScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TabGroup" xml:lang="en"><![CDATA[Script that should be executed when the component's onUnload event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="forceSessionPersistence" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TabGroup" xml:lang="en"><![CDATA[Indicates whether the component should be stored with the session view regardless of configuration

 
 By default the framework nulls out any components that do not have a refresh condition or are needed for
 collection processing. This can be a problem if custom application code is written to refresh a component
 without setting the corresponding component flag. In this case this property can be set to true to force the
 framework to keep the component in session. Defaults to false
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="valign" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TabGroup" xml:lang="en"><![CDATA[Vertical alignment of the component within its container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how the component
 should be aligned vertically within the container. During the finalize
 phase the CSS vertical-align style will be created for the valign
 setting.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:choice maxOccurs="1" minOccurs="0">
            <xsd:element ref="scrollpane"/>
          </xsd:choice>
          <xsd:element maxOccurs="1" minOccurs="0" name="progressiveRenderViaAJAX" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TabGroup" xml:lang="en"><![CDATA[When progressiveRenderViaAJAX is true, this component will be retrieved from the server when
 it first satisfies its progressive render condition.
 
 
 After the first retrieval, it is hidden/shown in the html by the js when its progressive
 condition result changes. By default, this is false, so components with progressive render
 capabilities will always be already within the client html and toggled to be hidden or
 visible.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onFocusScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TabGroup" xml:lang="en"><![CDATA[Script that should be executed when the component's onFocus event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="instructionalMessage" type="org.kuali.rice.krad.uif.element.Message">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TabGroup" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="templateName" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TabGroup" xml:lang="en"><![CDATA[The name for which the template can be invoked by

 
 Whether the template name is needed depends on the underlying rendering engine being used. In the example of
 Freemarker, the template points to the actual source file, which then loads a macro. From then on the macro is
 simply invoked to execute the template
 

 
 e.g. 'uif_text'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="cssClasses" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TabGroup" xml:lang="en"><![CDATA[CSS style class(s) to be applied to the component

 
 Declares style classes for the component. Multiple classes are specified
 with a space delimiter. This is used by the renderer to set the class
 attribute on the corresponding element. The class(s) declared must be
 available in the common style sheets or the style sheets specified for
 the view
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="unbounded" minOccurs="0" ref="spring:property"/>
          <xsd:element maxOccurs="unbounded" minOccurs="0" ref="property"/>
        </xsd:choice>
        <xsd:attribute name="headertext">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.container.TabGroup" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="defaultItemPosition">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.container.TabGroup" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="instructionalText">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.container.TabGroup" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="fieldBindingObjectPath">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.container.TabGroup" xml:lang="en"><![CDATA[Object binding path to set on each of the group's
 InputField instances

 
 When the attributes of the group belong to a object whose path is
 different from the default then this property can be given to set each of
 the attributes instead of setting the model path on each one. The object
 path can be overridden at the attribute level. The object path is set to
 the fieldBindingObjectPath during the initialize phase.
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="fieldBindByNamePrefix">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.container.TabGroup" xml:lang="en"><![CDATA[Binding prefix string to set on each of the groups DataField instances

 
 As opposed to setting the bindingPrefix on each attribute field instance,
 it can be set here for the group. During initialize the string will then
 be set on each attribute field instance if the bindingPrefix is blank and
 not a form field
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:anyAttribute processContents="skip"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="helpDefinition-mixedType">
    <xsd:complexContent>
      <xsd:extension base="helpDefinition-type">
        <xsd:choice maxOccurs="1" minOccurs="0">
          <xsd:element ref="helpDefinition"/>
        </xsd:choice>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="help-type">
    <xsd:complexContent>
      <xsd:extension base="componentAttributes-type">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element maxOccurs="1" minOccurs="0" name="onChangeScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Help" xml:lang="en"><![CDATA[Script that should be executed when the component's onChange event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onKeyPressScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Help" xml:lang="en"><![CDATA[Script that should be executed when the component's onKeyPress event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="refreshTimer" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Help" xml:lang="en"><![CDATA[Time in seconds that the component will be automatically refreshed
 
 
 This will invoke the refresh process just like the conditionalRefresh and
 refreshWhenChangedPropertyNames. When using this property methodToCallOnRefresh and id should
 also be specified
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="disableSessionPersistence" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Help" xml:lang="en"><![CDATA[Disables the storage of the component in session (when the framework determines it needs to be due to a
 refresh condition)

 
 When the framework determines there is a condition on the component that requires it to keep around between
 posts, it will store the component instance in session. This flag can be set to disable this behavior (which
 would require custom application logic to support behavior such as refresh)
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onDblClickScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Help" xml:lang="en"><![CDATA[Script that should be executed when the component's onDblClick event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="additionalComponentsToRefresh" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Help" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onBlurScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Help" xml:lang="en"><![CDATA[Script that should be executed when the component's onBlur event is fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="tooltipHelpContent" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Help" xml:lang="en"><![CDATA[TooltipHelpContent]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="selfRendered" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Help" xml:lang="en"><![CDATA[Indicates whether the component contains its own render output (through
 the renderOutput property)

 
 If self rendered is true, the corresponding template for the component
 will not be invoked and the renderOutput String will be written to the
 response as is.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="colSpan" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Help" xml:lang="en"><![CDATA[Number of places the component should take up horizontally in the
 container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how many places
 horizontally the component should take up within the container. This is
 only applicable for table based layout managers. Default is 1
 

 TODO: this should not be on component interface since it only applies if
 the layout manager supports it, need some sort of layoutOptions map for
 field level options that depend on the manager]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="additionalCssClasses" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Help" xml:lang="en"><![CDATA[Convenience property for adding css class names to the end of the list of cssClasses that may already exist on
 this Component (this is to avoid explicitly having to set list merge in the bean definition)]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="helpAction" type="org.kuali.rice.krad.uif.element.Action">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Help" xml:lang="en"><![CDATA[HelpActionField is used for rendering external help]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="required" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Help" xml:lang="en"><![CDATA[Indicates whether the component is required

 
 At the general component level required means there is some action the
 user needs to take within the component. For example, within a section it
 might mean the fields within the section should be completed. At a field
 level, it means the field should be completed. This provides the ability
 for the renderers to indicate the required action.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="finalizeMethodToCall" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Help" xml:lang="en"><![CDATA[The name of the method that should be invoked for finalizing the component
 configuration (full method name, without parameters or return type)

 
 Note the method can also be set with the finalizeMethodInvoker
 targetMethod property. If the method is on the configured
 ViewHelperService, only this property needs to be configured
 

 
 The model backing the view will be passed as the first argument method and then
 the Component instance as the second argument. If any additional method
 arguments are declared with the finalizeMethodAdditionalArguments, they will then
 be passed in the order declared in the list
 

 
 If the component is selfRendered, the finalize method can return a string which
 will be set as the component's renderOutput. The selfRendered indicator will also
 be set to true on the component.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="resetDataOnRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Help" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onKeyDownScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Help" xml:lang="en"><![CDATA[Script that should be executed when the component's onKeyDown event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="template" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Help" xml:lang="en"><![CDATA[The path to the JSP file that should be called to render the component

 
 The path should be relative to the web root. An attribute will be available to the component to use under the
 name given by the method getComponentTypeName. Based on the component type, additional attributes could
 be available for use. See the component documentation for more information on such attributes.
 

 
 e.g. '/krad/WEB-INF/jsp/tiles/component.jsp'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="align" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Help" xml:lang="en"><![CDATA[Horizontal alignment of the component within its container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how the component
 should be aligned horizontally within the container. During the finalize
 phase the CSS text-align style will be created for the align setting.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="width" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Help" xml:lang="en"><![CDATA[Width the component should take up in the container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies a width the component
 should take up in the Container. This is not applicable for all layout
 managers. During the finalize phase the CSS width style will be created
 for the width setting.
 

 
 e.g. '30%', '55px'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseDownScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Help" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseDown event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="postContent">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Help" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:sequence>
                <xsd:any minOccurs="0" processContents="skip"/>
              </xsd:sequence>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onClickScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Help" xml:lang="en"><![CDATA[Script that should be executed when the component's onClick event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="render" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Help" xml:lang="en"><![CDATA[Indicates whether the component should be rendered in the UI

 
 If set to false, the corresponding component template will not be invoked
 (therefore nothing will be rendered to the UI).
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onLoadScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Help" xml:lang="en"><![CDATA[Script that should be executed when the component's onLoad event is fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="methodToCallOnRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Help" xml:lang="en"><![CDATA[Name of a method on the controller that should be invoked as part of the component refresh
 and disclosure process
 
 
 During the component refresh or disclosure process it might be necessary to perform other
 operations, such as preparing data or executing a business process. This allows the
 configuration of a method on the underlying controller that should be called for the
 component refresh action. In this method, the necessary logic can be performed and then the
 base component update method invoked to carry out the component refresh.
 
 
 
 Controller method to invoke must accept the form, binding result, request, and response
 arguments
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="externalHelpUrl" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Help" xml:lang="en"><![CDATA[The external help Url

 
 This should contain a valid URL.  When specified this URL takes precedence over the external help URL from
 the system parameters.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="finalizeMethodInvoker" type="org.kuali.rice.krad.uif.component.MethodInvokerConfig">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Help" xml:lang="en"><![CDATA[MethodInvokerConfig instance for the method that should be invoked
 for finalizing the component configuration

 
 MethodInvoker can be configured to specify the class or object the method
 should be called on. For static method invocations, the targetClass
 property can be configured. For object invocations, that targetObject
 property can be configured
 

 
 If the component is selfRendered, the finalize method can return a string which
 will be set as the component's renderOutput. The selfRendered indicator will also
 be set to true on the component.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="componentModifiers">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Help" xml:lang="en"><![CDATA[ComponentModifier instances that should be invoked to
 initialize the component

 
 These provide dynamic initialization behavior for the component and are
 configured through the components definition. Each initializer will get
 invoked by the initialize method.
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="org.kuali.rice.krad.uif.modifier.ComponentModifier">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="componentCode" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Help" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="propertyReplacers">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Help" xml:lang="en"><![CDATA[gets a list of PropertyReplacer instances

 They will be evaluated
 during the view lifecycle to conditionally set properties on the
 Component based on expression evaluations]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="org.kuali.rice.krad.uif.component.PropertyReplacer">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onDocumentReadyScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Help" xml:lang="en"><![CDATA[Script to be run when the document ready event is triggered]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="refreshWhenChangedPropertyNames" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Help" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseUpScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Help" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseUp event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="renderedHtmlOutput" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Help" xml:lang="en"><![CDATA[Rendering output for the component that will be sent as part of the
 response (can contain static text and HTML)]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onKeyUpScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Help" xml:lang="en"><![CDATA[Script that should be executed when the component's onKeyUp event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:choice maxOccurs="1" minOccurs="0">
            <xsd:element ref="helpDefinition"/>
          </xsd:choice>
          <xsd:element maxOccurs="1" minOccurs="0" name="onCloseScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Help" xml:lang="en"><![CDATA[Script that should be executed when the component's onClose event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="id" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Help" xml:lang="en"><![CDATA[The unique id (within a given tree) for the element.

 The id is used to identify an element instance within the tree, and
 will be used by renderers to set the HTML element id. This gives a way to find various elements
 for scripting. If the id is not given, a default will be generated by the framework.
 

 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="title" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Help" xml:lang="en"><![CDATA[The component title

 
 Depending on the component can be used in various ways. For example with a Container component the title is
 used to set the header text. For components like controls other other components that render an HTML element it
 is used to set the HTML title attribute.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="order" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Help" xml:lang="en"><![CDATA[Order of a component within a List of other components

 Lower numbers are placed higher up in the list, while higher numbers are placed
 lower in the list]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="style" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Help" xml:lang="en"><![CDATA[CSS style string to be applied to the component

 
 Any style override or additions can be specified with this attribute.
 This is used by the renderer to set the style attribute on the
 corresponding element.
 

 
 e.g. 'color: #000000;text-decoration: underline;'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="finalizeMethodAdditionalArguments" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Help" xml:lang="en"><![CDATA[The List of Object instances that should be passed as arguments to the finalize method

 
 These arguments are passed to the finalize method after the standard model and component
 arguments. They are passed in the order declared in the list
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onSubmitScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Help" xml:lang="en"><![CDATA[Script that should be executed when the component's onSubmit event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="conditionalRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Help" xml:lang="en"><![CDATA[When set if the condition is satisfied, the component will be refreshed.
 
 
 The component MUST BE a container or field type. conditionalRefresh is defined in a limited
 Spring EL syntax. Only valid form property names, and, or, logical comparison operators
 (non-arithmetic), #listContains, #emptyList, and the matches clause are allowed. String and
 regex values must use single quotes ('), booleans must be either true or false, numbers must
 be a valid double either negative or positive.
 
 
 DO NOT use progressiveRender and conditionalRefresh on the same component unless it is known
 that the component will always be visible in all cases when a conditionalRefresh happens (ie
 conditionalRefresh has progressiveRender's condition anded with its own condition). If a
 component should be refreshed every time it is shown, use the progressiveRenderAndRefresh
 option with this property instead.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="rowSpan" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Help" xml:lang="en"><![CDATA[Number of places the component should take up vertically in the container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how many places
 vertically the component should take up within the container. This is
 only applicable for table based layout managers. Default is 1
 

 TODO: this should not be on component interface since it only applies if
 the layout manager supports it, need some sort of layoutOptions map for
 field level options that depend on the manager]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="retrieveViaAjax" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Help" xml:lang="en"><![CDATA[When true, this component will render as a placeholder component instead of rendering normally because the
 content will be later retrieved through manually ajax retrieval calls in the js

 This flag does not imply any automation, there must be a js call invoked for the content to be retrieved
 by the server, but this does mark it with a placeholder component which KRAD js uses during these calls.
 This placeholder component is used for ajax retrievals.  In particular, this flag is useful for use in
 combination with the showLightboxComponent js function which will automatically retrieve the
 real content of a component through ajax if a placeholder component is detected.  This allows for the full
 content to only be retrieved when the lightbox is first opened.
 When this flag is set to true, the forceSessionPersistence
 flag is set to true AUTOMATICALLY because it is implied that this component will be retrieved by an ajax call
 in the future.  This may also be useful for direct custom calls to retrieveComponent function,
 as well, which also relies on the placeholder being present.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="namespaceCode" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Help" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="progressiveRender" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Help" xml:lang="en"><![CDATA[When set if the condition is satisfied, the component will be displayed. The component MUST
 BE a container or field type. progressiveRender is defined in a limited Spring EL syntax.
 Only valid form property names, and, or, logical comparison operators (non-arithmetic),
 #listContains, #emptyList, matches clause are allowed. String and regex values must use
 single quotes ('), booleans must be either true or false, numbers must be a valid double,
 either negative or positive.
 
 
 DO NOT use progressiveRender and a conditional refresh statement on the same component unless
 it is known that the component will always be visible in all cases when a conditional refresh
 happens (ie conditional refresh has progressiveRender's condition anded with its own
 condition).
 
 
 
 If a component should be refreshed every time it is shown, use the
 progressiveRenderAndRefresh option with this property instead.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="templateOptionsJSString" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Help" xml:lang="en"><![CDATA[Builds a string from the underlying Map of template options that will export
 that options as a JavaScript Map for use in js and jQuery plugins]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseOutScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Help" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseOut event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="templateOptions">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Help" xml:lang="en"><![CDATA[The options that are passed through to the Component renderer

 
 The Map key is the option name, with the Map value as the option value. See
 documentation on the particular widget render for available options.
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:mapType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:choice maxOccurs="1" minOccurs="0">
            <xsd:element ref="tooltip"/>
            <xsd:element ref="tooltipFocus"/>
            <xsd:element ref="tooltipHelp"/>
          </xsd:choice>
          <xsd:element maxOccurs="1" minOccurs="0" name="preContent">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Help" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:sequence>
                <xsd:any minOccurs="0" processContents="skip"/>
              </xsd:sequence>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseOverScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Help" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseOver event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="dataAttributes">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Help" xml:lang="en"><![CDATA[Get the dataAttributes setup for this component - to be written to the html/jQuery data
 
 
 The attributes that are complex objects (contain {}) they will be written through script. The
 attritubes that are simple (contain no objects) will be written directly to the html of the
 component using standard data-. Either way they can be access through .data() call in jQuery
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:mapType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:choice maxOccurs="1" minOccurs="0">
            <xsd:element ref="fieldSecurity"/>
            <xsd:element ref="dataFieldSecurity"/>
            <xsd:element ref="actionSecurity"/>
            <xsd:element ref="collectionGroupSecurity"/>
            <xsd:element ref="componentSecurity"/>
          </xsd:choice>
          <xsd:element maxOccurs="1" minOccurs="0" name="readOnly" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Help" xml:lang="en"><![CDATA[Indicates whether the component can be edited

 
 When readOnly the controls and widgets of Field components
 will not be rendered. If the Field has an underlying value it will be
 displayed readOnly to the user.
 

 
 For a Container component, the readOnly setting will apply
 to all contained components (making a section readOnly makes all fields
 within the section readOnly).
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseMoveScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Help" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseMove event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="progressiveRenderAndRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Help" xml:lang="en"><![CDATA[If true, when the progressiveRender condition is satisfied, the component will always be
 retrieved from the server and shown(as opposed to being stored on the client, but hidden,
 after the first retrieval as is the case with the progressiveRenderViaAJAX option).
 
 
 By default, this is false, so components with progressive render capabilities will always
 be already within the client html and toggled to be hidden or visible.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="hidden" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Help" xml:lang="en"><![CDATA[Indicates whether the component should be hidden in the UI

 
 How the hidden data is maintained depends on the views persistence mode.
 If the mode is request, the corresponding data will be rendered to the UI
 but not visible. If the mode is session, the data will not be rendered to
 the UI but maintained server side.
 

 
 For a Container component, the hidden setting will apply to
 all contained components (making a section hidden makes all fields within
 the section hidden)
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="skipInTabOrder" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Help" xml:lang="en"><![CDATA[Flag indicating that this component and its nested components must be skipped when keyboard
 tabbing.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="context">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Help" xml:lang="en"><![CDATA[Context map for the component

 
 Any el statements configured for the components properties (e.g.
 title="@{foo.property}") are evaluated using the el context map. This map
 will get populated with default objects like the model, view, and request
 from the ViewHelperService. Other components can push
 further objects into the context so that they are available for use with
 that component. For example, Field instances that are part
 of a collection line as receive the current line instance
 

 
 Context map also provides objects to methods that are invoked for
 GeneratedField instances
 

 
 The Map key gives the name of the variable that can be used within
 expressions, and the Map value gives the object instance for which
 expressions containing the variable should evaluate against
 

 
 NOTE: Calling getContext().putAll() will skip updating any configured property replacers for the
 component. Instead you should call #pushAllToContext
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:mapType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onUnloadScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Help" xml:lang="en"><![CDATA[Script that should be executed when the component's onUnload event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="forceSessionPersistence" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Help" xml:lang="en"><![CDATA[Indicates whether the component should be stored with the session view regardless of configuration

 
 By default the framework nulls out any components that do not have a refresh condition or are needed for
 collection processing. This can be a problem if custom application code is written to refresh a component
 without setting the corresponding component flag. In this case this property can be set to true to force the
 framework to keep the component in session. Defaults to false
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="valign" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Help" xml:lang="en"><![CDATA[Vertical alignment of the component within its container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how the component
 should be aligned vertically within the container. During the finalize
 phase the CSS vertical-align style will be created for the valign
 setting.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="progressiveRenderViaAJAX" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Help" xml:lang="en"><![CDATA[When progressiveRenderViaAJAX is true, this component will be retrieved from the server when
 it first satisfies its progressive render condition.
 
 
 After the first retrieval, it is hidden/shown in the html by the js when its progressive
 condition result changes. By default, this is false, so components with progressive render
 capabilities will always be already within the client html and toggled to be hidden or
 visible.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onFocusScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Help" xml:lang="en"><![CDATA[Script that should be executed when the component's onFocus event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="cssClasses" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Help" xml:lang="en"><![CDATA[CSS style class(s) to be applied to the component

 
 Declares style classes for the component. Multiple classes are specified
 with a space delimiter. This is used by the renderer to set the class
 attribute on the corresponding element. The class(s) declared must be
 available in the common style sheets or the style sheets specified for
 the view
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="templateName" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Help" xml:lang="en"><![CDATA[The name for which the template can be invoked by

 
 Whether the template name is needed depends on the underlying rendering engine being used. In the example of
 Freemarker, the template points to the actual source file, which then loads a macro. From then on the macro is
 simply invoked to execute the template
 

 
 e.g. 'uif_text'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="unbounded" minOccurs="0" ref="spring:property"/>
          <xsd:element maxOccurs="unbounded" minOccurs="0" ref="property"/>
        </xsd:choice>
        <xsd:attribute name="tooltipHelpContent">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.widget.Help" xml:lang="en"><![CDATA[TooltipHelpContent]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="externalHelpUrl">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.widget.Help" xml:lang="en"><![CDATA[The external help Url

 
 This should contain a valid URL.  When specified this URL takes precedence over the external help URL from
 the system parameters.
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:anyAttribute processContents="skip"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="parentLocation-type">
    <xsd:choice maxOccurs="unbounded" minOccurs="0">
      <xsd:element maxOccurs="1" minOccurs="0" name="viewBreadcrumbItem" type="org.kuali.rice.krad.uif.util.BreadcrumbItem">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.util.ParentLocation" xml:lang="en"><![CDATA[The viewBreadcrumbItem to use for the parent location view breadcrumb.  Url should NOT be set here because
 parentViewUrl is ALWAYS set into this breadcrumbItem, regardless of value.]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="parentPageUrl" type="org.kuali.rice.krad.uif.util.UrlInfo">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.util.ParentLocation" xml:lang="en"><![CDATA[The parentPageUrl representing a page url that is the parent of this View.  In order for automated label
 determination to work for the page breadcrumbItem, the viewId and controllerMapping must match with the
 parentViewUrl.

 
 This url can explicitly set an href or can set a pageId.  The parentViewUrl MUST be set before this option can
 be set.  If the needed behavior is such that the parent view breadcrumbItem should not be shown and only this
 item should be shown, set 'parentLocation.viewBreadcrumbItem.render' to false.
 ]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="parentPageLabel" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.util.ParentLocation" xml:lang="en"><![CDATA[The parentPageLabel is the text used for breadcrumbItem label of the parent page.

 
 If not set, the the label is determined
 by looking at the parent PageGroup's breadcrumbItem and then its headerText.  This retrieval can only happen
 if the parentViewUrl is set.
 If the parent PageGroup's retrieved value
 contain expressions, those expressions must be able to be evaluated in the current context (ie, the properties
 they reference must also exist on the current form at the same location) or an exception will be thrown.
 ]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="pageBreadcrumbItem" type="org.kuali.rice.krad.uif.util.BreadcrumbItem">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.util.ParentLocation" xml:lang="en"><![CDATA[The pageBreadcrumbItem to use for the parent location view breadcrumb.  Url should NOT be set here because
 parentPageUrl is ALWAYS set into this breadcrumbItem, regardless of value.]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="namespaceCode" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.util.ParentLocation" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="componentCode" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.util.ParentLocation" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="parentViewLabel" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.util.ParentLocation" xml:lang="en"><![CDATA[The parentViewLabel is the text used for breadcrumbItem label of the parent view.

 
 If not set, the the label is determined
 by looking at the parent View's breadcrumbItem and then its headerText.  If the parent view's retrieved value
 contain expressions, those expressions must be able to be evaluated in the current context (ie, the properties
 they reference must also exist on the current form at the same location) or an exception will be thrown.
 ]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="parentViewUrl" type="org.kuali.rice.krad.uif.util.UrlInfo">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.util.ParentLocation" xml:lang="en"><![CDATA[The parentViewUrl representing the url that is the parent of this View.

 
 This url can explicitly set an href
 or can set a controller and viewId.  Parent view traversal is only performed if the controller and viewId
 properties are set and NOT the explicit href (this affects if breadcrumbs are generated in a recursive chain).
 ]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="unbounded" minOccurs="0" ref="spring:property"/>
      <xsd:element maxOccurs="unbounded" minOccurs="0" ref="property"/>
    </xsd:choice>
    <xsd:attribute name="parentPageLabel">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.util.ParentLocation" xml:lang="en"><![CDATA[The parentPageLabel is the text used for breadcrumbItem label of the parent page.

 
 If not set, the the label is determined
 by looking at the parent PageGroup's breadcrumbItem and then its headerText.  This retrieval can only happen
 if the parentViewUrl is set.
 If the parent PageGroup's retrieved value
 contain expressions, those expressions must be able to be evaluated in the current context (ie, the properties
 they reference must also exist on the current form at the same location) or an exception will be thrown.
 ]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="namespaceCode">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.util.ParentLocation" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="componentCode">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.util.ParentLocation" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="parentViewLabel">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.util.ParentLocation" xml:lang="en"><![CDATA[The parentViewLabel is the text used for breadcrumbItem label of the parent view.

 
 If not set, the the label is determined
 by looking at the parent View's breadcrumbItem and then its headerText.  If the parent view's retrieved value
 contain expressions, those expressions must be able to be evaluated in the current context (ie, the properties
 they reference must also exist on the current form at the same location) or an exception will be thrown.
 ]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="parent" type="xsd:string"/>
    <xsd:anyAttribute processContents="skip"/>
  </xsd:complexType>
  <xsd:complexType name="kimPersonControl-type">
    <xsd:complexContent>
      <xsd:extension base="componentAttributes-type">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element maxOccurs="1" minOccurs="0" name="onChangeScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.UserControl" xml:lang="en"><![CDATA[Script that should be executed when the component's onChange event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onKeyPressScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.UserControl" xml:lang="en"><![CDATA[Script that should be executed when the component's onKeyPress event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="datePicker" type="xsd:anyType">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.UserControl" xml:lang="en"><![CDATA[Renders a calendar that can be used to select a date value for the text
 control. The Calendar instance contains configuration such
 as the date format string]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="refreshTimer" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.UserControl" xml:lang="en"><![CDATA[Time in seconds that the component will be automatically refreshed
 
 
 This will invoke the refresh process just like the conditionalRefresh and
 refreshWhenChangedPropertyNames. When using this property methodToCallOnRefresh and id should
 also be specified
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="disableSessionPersistence" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.UserControl" xml:lang="en"><![CDATA[Disables the storage of the component in session (when the framework determines it needs to be due to a
 refresh condition)

 
 When the framework determines there is a condition on the component that requires it to keep around between
 posts, it will store the component instance in session. This flag can be set to disable this behavior (which
 would require custom application logic to support behavior such as refresh)
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="tabIndex" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.UserControl" xml:lang="en"><![CDATA[Unique index of the control within the tab order

 
 Tab index provides a way to set the order users will tab through the
 controls. The control with index 1 will receive focus when the page is
 rendered. Tabing from the field will then take the user to the control
 with index 2, then index 3, and so on.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onDblClickScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.UserControl" xml:lang="en"><![CDATA[Script that should be executed when the component's onDblClick event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="additionalComponentsToRefresh" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.UserControl" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onBlurScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.UserControl" xml:lang="en"><![CDATA[Script that should be executed when the component's onBlur event is fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="selfRendered" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.UserControl" xml:lang="en"><![CDATA[Indicates whether the component contains its own render output (through
 the renderOutput property)

 
 If self rendered is true, the corresponding template for the component
 will not be invoked and the renderOutput String will be written to the
 response as is.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="colSpan" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.UserControl" xml:lang="en"><![CDATA[Number of places the component should take up horizontally in the
 container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how many places
 horizontally the component should take up within the container. This is
 only applicable for table based layout managers. Default is 1
 

 TODO: this should not be on component interface since it only applies if
 the layout manager supports it, need some sort of layoutOptions map for
 field level options that depend on the manager]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="additionalCssClasses" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.UserControl" xml:lang="en"><![CDATA[Convenience property for adding css class names to the end of the list of cssClasses that may already exist on
 this Component (this is to avoid explicitly having to set list merge in the bean definition)]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="required" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.UserControl" xml:lang="en"><![CDATA[Indicates whether the component is required

 
 At the general component level required means there is some action the
 user needs to take within the component. For example, within a section it
 might mean the fields within the section should be completed. At a field
 level, it means the field should be completed. This provides the ability
 for the renderers to indicate the required action.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="finalizeMethodToCall" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.UserControl" xml:lang="en"><![CDATA[The name of the method that should be invoked for finalizing the component
 configuration (full method name, without parameters or return type)

 
 Note the method can also be set with the finalizeMethodInvoker
 targetMethod property. If the method is on the configured
 ViewHelperService, only this property needs to be configured
 

 
 The model backing the view will be passed as the first argument method and then
 the Component instance as the second argument. If any additional method
 arguments are declared with the finalizeMethodAdditionalArguments, they will then
 be passed in the order declared in the list
 

 
 If the component is selfRendered, the finalize method can return a string which
 will be set as the component's renderOutput. The selfRendered indicator will also
 be set to true on the component.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="resetDataOnRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.UserControl" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onKeyDownScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.UserControl" xml:lang="en"><![CDATA[Script that should be executed when the component's onKeyDown event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="template" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.UserControl" xml:lang="en"><![CDATA[The path to the JSP file that should be called to render the component

 
 The path should be relative to the web root. An attribute will be available to the component to use under the
 name given by the method getComponentTypeName. Based on the component type, additional attributes could
 be available for use. See the component documentation for more information on such attributes.
 

 
 e.g. '/krad/WEB-INF/jsp/tiles/component.jsp'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="align" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.UserControl" xml:lang="en"><![CDATA[Horizontal alignment of the component within its container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how the component
 should be aligned horizontally within the container. During the finalize
 phase the CSS text-align style will be created for the align setting.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseDownScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.UserControl" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseDown event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="width" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.UserControl" xml:lang="en"><![CDATA[Width the component should take up in the container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies a width the component
 should take up in the Container. This is not applicable for all layout
 managers. During the finalize phase the CSS width style will be created
 for the width setting.
 

 
 e.g. '30%', '55px'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="postContent">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.UserControl" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:sequence>
                <xsd:any minOccurs="0" processContents="skip"/>
              </xsd:sequence>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onClickScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.UserControl" xml:lang="en"><![CDATA[Script that should be executed when the component's onClick event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="personNamePropertyName" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.UserControl" xml:lang="en"><![CDATA[The name of the property on the parent object that holds the person name]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="render" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.UserControl" xml:lang="en"><![CDATA[Indicates whether the component should be rendered in the UI

 
 If set to false, the corresponding component template will not be invoked
 (therefore nothing will be rendered to the UI).
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="size" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.UserControl" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onLoadScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.UserControl" xml:lang="en"><![CDATA[Script that should be executed when the component's onLoad event is fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="methodToCallOnRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.UserControl" xml:lang="en"><![CDATA[Name of a method on the controller that should be invoked as part of the component refresh
 and disclosure process
 
 
 During the component refresh or disclosure process it might be necessary to perform other
 operations, such as preparing data or executing a business process. This allows the
 configuration of a method on the underlying controller that should be called for the
 component refresh action. In this method, the necessary logic can be performed and then the
 base component update method invoked to carry out the component refresh.
 
 
 
 Controller method to invoke must accept the form, binding result, request, and response
 arguments
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="finalizeMethodInvoker" type="org.kuali.rice.krad.uif.component.MethodInvokerConfig">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.UserControl" xml:lang="en"><![CDATA[MethodInvokerConfig instance for the method that should be invoked
 for finalizing the component configuration

 
 MethodInvoker can be configured to specify the class or object the method
 should be called on. For static method invocations, the targetClass
 property can be configured. For object invocations, that targetObject
 property can be configured
 

 
 If the component is selfRendered, the finalize method can return a string which
 will be set as the component's renderOutput. The selfRendered indicator will also
 be set to true on the component.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="componentModifiers">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.UserControl" xml:lang="en"><![CDATA[ComponentModifier instances that should be invoked to
 initialize the component

 
 These provide dynamic initialization behavior for the component and are
 configured through the components definition. Each initializer will get
 invoked by the initialize method.
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="org.kuali.rice.krad.uif.modifier.ComponentModifier">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="ensabledConditionControlNames" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.UserControl" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="disabledWhenChangedPropertyNames" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.UserControl" xml:lang="en"><![CDATA[Gets the property names of fields that when changed, will disable this component]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="componentCode" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.UserControl" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onDocumentReadyScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.UserControl" xml:lang="en"><![CDATA[Script to be run when the document ready event is triggered]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="propertyReplacers">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.UserControl" xml:lang="en"><![CDATA[gets a list of PropertyReplacer instances

 They will be evaluated
 during the view lifecycle to conditionally set properties on the
 Component based on expression evaluations]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="org.kuali.rice.krad.uif.component.PropertyReplacer">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="refreshWhenChangedPropertyNames" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.UserControl" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseUpScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.UserControl" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseUp event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onKeyUpScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.UserControl" xml:lang="en"><![CDATA[Script that should be executed when the component's onKeyUp event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="renderedHtmlOutput" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.UserControl" xml:lang="en"><![CDATA[Rendering output for the component that will be sent as part of the
 response (can contain static text and HTML)]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="disabledReason" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.UserControl" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="personObjectPropertyName" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.UserControl" xml:lang="en"><![CDATA[The name of the property on the parent object that holds the person object]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onCloseScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.UserControl" xml:lang="en"><![CDATA[Script that should be executed when the component's onClose event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="id" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.UserControl" xml:lang="en"><![CDATA[The unique id (within a given tree) for the element.

 The id is used to identify an element instance within the tree, and
 will be used by renderers to set the HTML element id. This gives a way to find various elements
 for scripting. If the id is not given, a default will be generated by the framework.
 

 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="title" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.UserControl" xml:lang="en"><![CDATA[The component title

 
 Depending on the component can be used in various ways. For example with a Container component the title is
 used to set the header text. For components like controls other other components that render an HTML element it
 is used to set the HTML title attribute.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="order" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.UserControl" xml:lang="en"><![CDATA[Order of a component within a List of other components

 Lower numbers are placed higher up in the list, while higher numbers are placed
 lower in the list]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="style" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.UserControl" xml:lang="en"><![CDATA[CSS style string to be applied to the component

 
 Any style override or additions can be specified with this attribute.
 This is used by the renderer to set the style attribute on the
 corresponding element.
 

 
 e.g. 'color: #000000;text-decoration: underline;'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="maxLength" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.UserControl" xml:lang="en"><![CDATA[Maximum number of characters that can be inputted

 If not set on control, max length of field will be used]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="finalizeMethodAdditionalArguments" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.UserControl" xml:lang="en"><![CDATA[The List of Object instances that should be passed as arguments to the finalize method

 
 These arguments are passed to the finalize method after the standard model and component
 arguments. They are passed in the order declared in the list
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="conditionalRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.UserControl" xml:lang="en"><![CDATA[When set if the condition is satisfied, the component will be refreshed.
 
 
 The component MUST BE a container or field type. conditionalRefresh is defined in a limited
 Spring EL syntax. Only valid form property names, and, or, logical comparison operators
 (non-arithmetic), #listContains, #emptyList, and the matches clause are allowed. String and
 regex values must use single quotes ('), booleans must be either true or false, numbers must
 be a valid double either negative or positive.
 
 
 DO NOT use progressiveRender and conditionalRefresh on the same component unless it is known
 that the component will always be visible in all cases when a conditionalRefresh happens (ie
 conditionalRefresh has progressiveRender's condition anded with its own condition). If a
 component should be refreshed every time it is shown, use the progressiveRenderAndRefresh
 option with this property instead.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onSubmitScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.UserControl" xml:lang="en"><![CDATA[Script that should be executed when the component's onSubmit event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="minLength" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.UserControl" xml:lang="en"><![CDATA[Minimum number of characters that can be inputted

 If not set on control, min length of field will be used]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="rowSpan" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.UserControl" xml:lang="en"><![CDATA[Number of places the component should take up vertically in the container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how many places
 vertically the component should take up within the container. This is
 only applicable for table based layout managers. Default is 1
 

 TODO: this should not be on component interface since it only applies if
 the layout manager supports it, need some sort of layoutOptions map for
 field level options that depend on the manager]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="retrieveViaAjax" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.UserControl" xml:lang="en"><![CDATA[When true, this component will render as a placeholder component instead of rendering normally because the
 content will be later retrieved through manually ajax retrieval calls in the js

 This flag does not imply any automation, there must be a js call invoked for the content to be retrieved
 by the server, but this does mark it with a placeholder component which KRAD js uses during these calls.
 This placeholder component is used for ajax retrievals.  In particular, this flag is useful for use in
 combination with the showLightboxComponent js function which will automatically retrieve the
 real content of a component through ajax if a placeholder component is detected.  This allows for the full
 content to only be retrieved when the lightbox is first opened.
 When this flag is set to true, the forceSessionPersistence
 flag is set to true AUTOMATICALLY because it is implied that this component will be retrieved by an ajax call
 in the future.  This may also be useful for direct custom calls to retrieveComponent function,
 as well, which also relies on the placeholder being present.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="namespaceCode" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.UserControl" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="progressiveRender" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.UserControl" xml:lang="en"><![CDATA[When set if the condition is satisfied, the component will be displayed. The component MUST
 BE a container or field type. progressiveRender is defined in a limited Spring EL syntax.
 Only valid form property names, and, or, logical comparison operators (non-arithmetic),
 #listContains, #emptyList, matches clause are allowed. String and regex values must use
 single quotes ('), booleans must be either true or false, numbers must be a valid double,
 either negative or positive.
 
 
 DO NOT use progressiveRender and a conditional refresh statement on the same component unless
 it is known that the component will always be visible in all cases when a conditional refresh
 happens (ie conditional refresh has progressiveRender's condition anded with its own
 condition).
 
 
 
 If a component should be refreshed every time it is shown, use the
 progressiveRenderAndRefresh option with this property instead.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="templateOptionsJSString" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.UserControl" xml:lang="en"><![CDATA[Builds a string from the underlying Map of template options that will export
 that options as a JavaScript Map for use in js and jQuery plugins]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseOutScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.UserControl" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseOut event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="templateOptions">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.UserControl" xml:lang="en"><![CDATA[The options that are passed through to the Component renderer

 
 The Map key is the option name, with the Map value as the option value. See
 documentation on the particular widget render for available options.
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:mapType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="principalIdPropertyName" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.UserControl" xml:lang="en"><![CDATA[The name of the property on the parent object that holds the principal id]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:choice maxOccurs="1" minOccurs="0">
            <xsd:element ref="tooltip"/>
            <xsd:element ref="tooltipFocus"/>
            <xsd:element ref="tooltipHelp"/>
          </xsd:choice>
          <xsd:element maxOccurs="1" minOccurs="0" name="preContent">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.UserControl" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:sequence>
                <xsd:any minOccurs="0" processContents="skip"/>
              </xsd:sequence>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseOverScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.UserControl" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseOver event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="dataAttributes">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.UserControl" xml:lang="en"><![CDATA[Get the dataAttributes setup for this component - to be written to the html/jQuery data
 
 
 The attributes that are complex objects (contain {}) they will be written through script. The
 attritubes that are simple (contain no objects) will be written directly to the html of the
 component using standard data-. Either way they can be access through .data() call in jQuery
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:mapType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="evaluateDisabledOnKeyUp" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.UserControl" xml:lang="en"><![CDATA[Evaluate the disable condition on controls which disable it on each key up event]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="textExpand" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.UserControl" xml:lang="en"><![CDATA[If set to true, this control will have a button which can be clicked to expand the text area through
 a popup window so the user has more space to type and see the data they are entering in this text field.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:choice maxOccurs="1" minOccurs="0">
            <xsd:element ref="fieldSecurity"/>
            <xsd:element ref="dataFieldSecurity"/>
            <xsd:element ref="actionSecurity"/>
            <xsd:element ref="collectionGroupSecurity"/>
            <xsd:element ref="componentSecurity"/>
          </xsd:choice>
          <xsd:element maxOccurs="1" minOccurs="0" name="readOnly" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.UserControl" xml:lang="en"><![CDATA[Indicates whether the component can be edited

 
 When readOnly the controls and widgets of Field components
 will not be rendered. If the Field has an underlying value it will be
 displayed readOnly to the user.
 

 
 For a Container component, the readOnly setting will apply
 to all contained components (making a section readOnly makes all fields
 within the section readOnly).
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseMoveScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.UserControl" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseMove event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="progressiveRenderAndRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.UserControl" xml:lang="en"><![CDATA[If true, when the progressiveRender condition is satisfied, the component will always be
 retrieved from the server and shown(as opposed to being stored on the client, but hidden,
 after the first retrieval as is the case with the progressiveRenderViaAJAX option).
 
 
 By default, this is false, so components with progressive render capabilities will always
 be already within the client html and toggled to be hidden or visible.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="hidden" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.UserControl" xml:lang="en"><![CDATA[Indicates whether the component should be hidden in the UI

 
 How the hidden data is maintained depends on the views persistence mode.
 If the mode is request, the corresponding data will be rendered to the UI
 but not visible. If the mode is session, the data will not be rendered to
 the UI but maintained server side.
 

 
 For a Container component, the hidden setting will apply to
 all contained components (making a section hidden makes all fields within
 the section hidden)
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="skipInTabOrder" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.UserControl" xml:lang="en"><![CDATA[Flag indicating that this component and its nested components must be skipped when keyboard
 tabbing.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="context">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.UserControl" xml:lang="en"><![CDATA[Context map for the component

 
 Any el statements configured for the components properties (e.g.
 title="@{foo.property}") are evaluated using the el context map. This map
 will get populated with default objects like the model, view, and request
 from the ViewHelperService. Other components can push
 further objects into the context so that they are available for use with
 that component. For example, Field instances that are part
 of a collection line as receive the current line instance
 

 
 Context map also provides objects to methods that are invoked for
 GeneratedField instances
 

 
 The Map key gives the name of the variable that can be used within
 expressions, and the Map value gives the object instance for which
 expressions containing the variable should evaluate against
 

 
 NOTE: Calling getContext().putAll() will skip updating any configured property replacers for the
 component. Instead you should call #pushAllToContext
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:mapType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onUnloadScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.UserControl" xml:lang="en"><![CDATA[Script that should be executed when the component's onUnload event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="forceSessionPersistence" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.UserControl" xml:lang="en"><![CDATA[Indicates whether the component should be stored with the session view regardless of configuration

 
 By default the framework nulls out any components that do not have a refresh condition or are needed for
 collection processing. This can be a problem if custom application code is written to refresh a component
 without setting the corresponding component flag. In this case this property can be set to true to force the
 framework to keep the component in session. Defaults to false
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="valign" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.UserControl" xml:lang="en"><![CDATA[Vertical alignment of the component within its container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how the component
 should be aligned vertically within the container. During the finalize
 phase the CSS vertical-align style will be created for the valign
 setting.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="watermarkText" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.UserControl" xml:lang="en"><![CDATA[Gets the watermark text for this TextControl.

 
 A watermark typically appears as light gray text within the text input element whenever the
 element is empty and does not have focus. This provides a hint to the user as to what the input
 is used for, or the type of input that is required.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="progressiveRenderViaAJAX" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.UserControl" xml:lang="en"><![CDATA[When progressiveRenderViaAJAX is true, this component will be retrieved from the server when
 it first satisfies its progressive render condition.
 
 
 After the first retrieval, it is hidden/shown in the html by the js when its progressive
 condition result changes. By default, this is false, so components with progressive render
 capabilities will always be already within the client html and toggled to be hidden or
 visible.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="disabled" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.UserControl" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onFocusScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.UserControl" xml:lang="en"><![CDATA[Script that should be executed when the component's onFocus event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="templateName" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.UserControl" xml:lang="en"><![CDATA[The name for which the template can be invoked by

 
 Whether the template name is needed depends on the underlying rendering engine being used. In the example of
 Freemarker, the template points to the actual source file, which then loads a macro. From then on the macro is
 simply invoked to execute the template
 

 
 e.g. 'uif_text'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="cssClasses" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.control.UserControl" xml:lang="en"><![CDATA[CSS style class(s) to be applied to the component

 
 Declares style classes for the component. Multiple classes are specified
 with a space delimiter. This is used by the renderer to set the class
 attribute on the corresponding element. The class(s) declared must be
 available in the common style sheets or the style sheets specified for
 the view
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="unbounded" minOccurs="0" ref="spring:property"/>
          <xsd:element maxOccurs="unbounded" minOccurs="0" ref="property"/>
        </xsd:choice>
        <xsd:attribute name="datePicker">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.control.UserControl" xml:lang="en"><![CDATA[Renders a calendar that can be used to select a date value for the text
 control. The Calendar instance contains configuration such
 as the date format string]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="tabIndex">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.control.UserControl" xml:lang="en"><![CDATA[Unique index of the control within the tab order

 
 Tab index provides a way to set the order users will tab through the
 controls. The control with index 1 will receive focus when the page is
 rendered. Tabing from the field will then take the user to the control
 with index 2, then index 3, and so on.
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="personNamePropertyName">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.control.UserControl" xml:lang="en"><![CDATA[The name of the property on the parent object that holds the person name]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="size">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.control.UserControl" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="ensabledConditionControlNames">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.control.UserControl" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="disabledWhenChangedPropertyNames">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.control.UserControl" xml:lang="en"><![CDATA[Gets the property names of fields that when changed, will disable this component]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="disabledReason">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.control.UserControl" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="personObjectPropertyName">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.control.UserControl" xml:lang="en"><![CDATA[The name of the property on the parent object that holds the person object]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="maxLength">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.control.UserControl" xml:lang="en"><![CDATA[Maximum number of characters that can be inputted

 If not set on control, max length of field will be used]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="minLength">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.control.UserControl" xml:lang="en"><![CDATA[Minimum number of characters that can be inputted

 If not set on control, min length of field will be used]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="principalIdPropertyName">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.control.UserControl" xml:lang="en"><![CDATA[The name of the property on the parent object that holds the principal id]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="evaluateDisabledOnKeyUp">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.control.UserControl" xml:lang="en"><![CDATA[Evaluate the disable condition on controls which disable it on each key up event]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="textExpand">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.control.UserControl" xml:lang="en"><![CDATA[If set to true, this control will have a button which can be clicked to expand the text area through
 a popup window so the user has more space to type and see the data they are entering in this text field.]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="watermarkText">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.control.UserControl" xml:lang="en"><![CDATA[Gets the watermark text for this TextControl.

 
 A watermark typically appears as light gray text within the text input element whenever the
 element is empty and does not have focus. This provides a hint to the user as to what the input
 is used for, or the type of input that is required.
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="disabled">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.control.UserControl" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:anyAttribute processContents="skip"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="defaultNodePrototype-mixedType">
    <xsd:complexContent>
      <xsd:extension base="nodePrototype-type">
        <xsd:choice maxOccurs="1" minOccurs="0">
          <xsd:element ref="nodePrototype"/>
        </xsd:choice>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="treeGroup-type">
    <xsd:complexContent>
      <xsd:extension base="componentAttributes-type">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element maxOccurs="1" minOccurs="0" name="onChangeScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TreeGroup" xml:lang="en"><![CDATA[Script that should be executed when the component's onChange event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onKeyPressScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TreeGroup" xml:lang="en"><![CDATA[Script that should be executed when the component's onKeyPress event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="refreshTimer" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TreeGroup" xml:lang="en"><![CDATA[Time in seconds that the component will be automatically refreshed
 
 
 This will invoke the refresh process just like the conditionalRefresh and
 refreshWhenChangedPropertyNames. When using this property methodToCallOnRefresh and id should
 also be specified
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="disableSessionPersistence" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TreeGroup" xml:lang="en"><![CDATA[Disables the storage of the component in session (when the framework determines it needs to be due to a
 refresh condition)

 
 When the framework determines there is a condition on the component that requires it to keep around between
 posts, it will store the component instance in session. This flag can be set to disable this behavior (which
 would require custom application logic to support behavior such as refresh)
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onDblClickScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TreeGroup" xml:lang="en"><![CDATA[Script that should be executed when the component's onDblClick event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="NodePrototypeMap">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TreeGroup" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:mapType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="additionalComponentsToRefresh" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TreeGroup" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onBlurScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TreeGroup" xml:lang="en"><![CDATA[Script that should be executed when the component's onBlur event is fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:choice maxOccurs="1" minOccurs="0">
            <xsd:element ref="help"/>
          </xsd:choice>
          <xsd:element maxOccurs="1" minOccurs="0" name="tree" type="org.kuali.rice.krad.uif.widget.Tree">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TreeGroup" xml:lang="en"/>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="selfRendered" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TreeGroup" xml:lang="en"><![CDATA[Indicates whether the component contains its own render output (through
 the renderOutput property)

 
 If self rendered is true, the corresponding template for the component
 will not be invoked and the renderOutput String will be written to the
 response as is.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="colSpan" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TreeGroup" xml:lang="en"><![CDATA[Number of places the component should take up horizontally in the
 container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how many places
 horizontally the component should take up within the container. This is
 only applicable for table based layout managers. Default is 1
 

 TODO: this should not be on component interface since it only applies if
 the layout manager supports it, need some sort of layoutOptions map for
 field level options that depend on the manager]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="additionalCssClasses" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TreeGroup" xml:lang="en"><![CDATA[Convenience property for adding css class names to the end of the list of cssClasses that may already exist on
 this Component (this is to avoid explicitly having to set list merge in the bean definition)]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="required" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TreeGroup" xml:lang="en"><![CDATA[Indicates whether the component is required

 
 At the general component level required means there is some action the
 user needs to take within the component. For example, within a section it
 might mean the fields within the section should be completed. At a field
 level, it means the field should be completed. This provides the ability
 for the renderers to indicate the required action.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="finalizeMethodToCall" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TreeGroup" xml:lang="en"><![CDATA[The name of the method that should be invoked for finalizing the component
 configuration (full method name, without parameters or return type)

 
 Note the method can also be set with the finalizeMethodInvoker
 targetMethod property. If the method is on the configured
 ViewHelperService, only this property needs to be configured
 

 
 The model backing the view will be passed as the first argument method and then
 the Component instance as the second argument. If any additional method
 arguments are declared with the finalizeMethodAdditionalArguments, they will then
 be passed in the order declared in the list
 

 
 If the component is selfRendered, the finalize method can return a string which
 will be set as the component's renderOutput. The selfRendered indicator will also
 be set to true on the component.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="resetDataOnRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TreeGroup" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onKeyDownScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TreeGroup" xml:lang="en"><![CDATA[Script that should be executed when the component's onKeyDown event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="template" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TreeGroup" xml:lang="en"><![CDATA[The path to the JSP file that should be called to render the component

 
 The path should be relative to the web root. An attribute will be available to the component to use under the
 name given by the method getComponentTypeName. Based on the component type, additional attributes could
 be available for use. See the component documentation for more information on such attributes.
 

 
 e.g. '/krad/WEB-INF/jsp/tiles/component.jsp'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="propertyName" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TreeGroup" xml:lang="en"/>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="align" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TreeGroup" xml:lang="en"><![CDATA[Horizontal alignment of the component within its container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how the component
 should be aligned horizontally within the container. During the finalize
 phase the CSS text-align style will be created for the align setting.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseDownScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TreeGroup" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseDown event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="width" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TreeGroup" xml:lang="en"><![CDATA[Width the component should take up in the container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies a width the component
 should take up in the Container. This is not applicable for all layout
 managers. During the finalize phase the CSS width style will be created
 for the width setting.
 

 
 e.g. '30%', '55px'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="postContent">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TreeGroup" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:sequence>
                <xsd:any minOccurs="0" processContents="skip"/>
              </xsd:sequence>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="Disclosure" type="org.kuali.rice.krad.uif.widget.Disclosure">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TreeGroup" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onClickScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TreeGroup" xml:lang="en"><![CDATA[Script that should be executed when the component's onClick event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:choice maxOccurs="1" minOccurs="0">
            <xsd:element ref="pageHeader"/>
            <xsd:element ref="header"/>
            <xsd:element ref="headerSix"/>
            <xsd:element ref="headerTwo"/>
            <xsd:element ref="sectionHeader"/>
            <xsd:element ref="headerOne"/>
            <xsd:element ref="headerFive"/>
            <xsd:element ref="subCollectionHeader"/>
            <xsd:element ref="headerThree"/>
            <xsd:element ref="subSectionHeader"/>
            <xsd:element ref="headerFour"/>
            <xsd:element ref="viewHeader"/>
          </xsd:choice>
          <xsd:element maxOccurs="1" minOccurs="0" name="render" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TreeGroup" xml:lang="en"><![CDATA[Indicates whether the component should be rendered in the UI

 
 If set to false, the corresponding component template will not be invoked
 (therefore nothing will be rendered to the UI).
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onLoadScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TreeGroup" xml:lang="en"><![CDATA[Script that should be executed when the component's onLoad event is fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="methodToCallOnRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TreeGroup" xml:lang="en"><![CDATA[Name of a method on the controller that should be invoked as part of the component refresh
 and disclosure process
 
 
 During the component refresh or disclosure process it might be necessary to perform other
 operations, such as preparing data or executing a business process. This allows the
 configuration of a method on the underlying controller that should be called for the
 component refresh action. In this method, the necessary logic can be performed and then the
 base component update method invoked to carry out the component refresh.
 
 
 
 Controller method to invoke must accept the form, binding result, request, and response
 arguments
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="treeGroups">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TreeGroup" xml:lang="en"/>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:mapType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="finalizeMethodInvoker" type="org.kuali.rice.krad.uif.component.MethodInvokerConfig">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TreeGroup" xml:lang="en"><![CDATA[MethodInvokerConfig instance for the method that should be invoked
 for finalizing the component configuration

 
 MethodInvoker can be configured to specify the class or object the method
 should be called on. For static method invocations, the targetClass
 property can be configured. For object invocations, that targetObject
 property can be configured
 

 
 If the component is selfRendered, the finalize method can return a string which
 will be set as the component's renderOutput. The selfRendered indicator will also
 be set to true on the component.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="items">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TreeGroup" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:listOrSetType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="componentModifiers">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TreeGroup" xml:lang="en"><![CDATA[ComponentModifier instances that should be invoked to
 initialize the component

 
 These provide dynamic initialization behavior for the component and are
 configured through the components definition. Each initializer will get
 invoked by the initialize method.
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="org.kuali.rice.krad.uif.modifier.ComponentModifier">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="componentCode" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TreeGroup" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="headertext" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TreeGroup" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onDocumentReadyScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TreeGroup" xml:lang="en"><![CDATA[Script to be run when the document ready event is triggered]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="propertyReplacers">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TreeGroup" xml:lang="en"><![CDATA[gets a list of PropertyReplacer instances

 They will be evaluated
 during the view lifecycle to conditionally set properties on the
 Component based on expression evaluations]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="org.kuali.rice.krad.uif.component.PropertyReplacer">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="defaultItemPosition" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TreeGroup" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="refreshWhenChangedPropertyNames" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TreeGroup" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="instructionalText" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TreeGroup" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseUpScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TreeGroup" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseUp event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:choice maxOccurs="1" minOccurs="0">
            <xsd:element ref="pageValidationMessages"/>
            <xsd:element ref="fieldValidationMessages"/>
            <xsd:element ref="groupValidationMessages"/>
            <xsd:element ref="validationMessages"/>
          </xsd:choice>
          <xsd:element maxOccurs="1" minOccurs="0" name="onKeyUpScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TreeGroup" xml:lang="en"><![CDATA[Script that should be executed when the component's onKeyUp event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="renderedHtmlOutput" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TreeGroup" xml:lang="en"><![CDATA[Rendering output for the component that will be sent as part of the
 response (can contain static text and HTML)]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onCloseScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TreeGroup" xml:lang="en"><![CDATA[Script that should be executed when the component's onClose event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="id" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TreeGroup" xml:lang="en"><![CDATA[The unique id (within a given tree) for the element.

 The id is used to identify an element instance within the tree, and
 will be used by renderers to set the HTML element id. This gives a way to find various elements
 for scripting. If the id is not given, a default will be generated by the framework.
 

 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="title" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TreeGroup" xml:lang="en"><![CDATA[The component title

 
 Depending on the component can be used in various ways. For example with a Container component the title is
 used to set the header text. For components like controls other other components that render an HTML element it
 is used to set the HTML title attribute.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="order" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TreeGroup" xml:lang="en"><![CDATA[Order of a component within a List of other components

 Lower numbers are placed higher up in the list, while higher numbers are placed
 lower in the list]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="style" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TreeGroup" xml:lang="en"><![CDATA[CSS style string to be applied to the component

 
 Any style override or additions can be specified with this attribute.
 This is used by the renderer to set the style attribute on the
 corresponding element.
 

 
 e.g. 'color: #000000;text-decoration: underline;'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="finalizeMethodAdditionalArguments" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TreeGroup" xml:lang="en"><![CDATA[The List of Object instances that should be passed as arguments to the finalize method

 
 These arguments are passed to the finalize method after the standard model and component
 arguments. They are passed in the order declared in the list
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="conditionalRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TreeGroup" xml:lang="en"><![CDATA[When set if the condition is satisfied, the component will be refreshed.
 
 
 The component MUST BE a container or field type. conditionalRefresh is defined in a limited
 Spring EL syntax. Only valid form property names, and, or, logical comparison operators
 (non-arithmetic), #listContains, #emptyList, and the matches clause are allowed. String and
 regex values must use single quotes ('), booleans must be either true or false, numbers must
 be a valid double either negative or positive.
 
 
 DO NOT use progressiveRender and conditionalRefresh on the same component unless it is known
 that the component will always be visible in all cases when a conditionalRefresh happens (ie
 conditionalRefresh has progressiveRender's condition anded with its own condition). If a
 component should be refreshed every time it is shown, use the progressiveRenderAndRefresh
 option with this property instead.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onSubmitScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TreeGroup" xml:lang="en"><![CDATA[Script that should be executed when the component's onSubmit event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="rowSpan" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TreeGroup" xml:lang="en"><![CDATA[Number of places the component should take up vertically in the container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how many places
 vertically the component should take up within the container. This is
 only applicable for table based layout managers. Default is 1
 

 TODO: this should not be on component interface since it only applies if
 the layout manager supports it, need some sort of layoutOptions map for
 field level options that depend on the manager]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="retrieveViaAjax" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TreeGroup" xml:lang="en"><![CDATA[When true, this component will render as a placeholder component instead of rendering normally because the
 content will be later retrieved through manually ajax retrieval calls in the js

 This flag does not imply any automation, there must be a js call invoked for the content to be retrieved
 by the server, but this does mark it with a placeholder component which KRAD js uses during these calls.
 This placeholder component is used for ajax retrievals.  In particular, this flag is useful for use in
 combination with the showLightboxComponent js function which will automatically retrieve the
 real content of a component through ajax if a placeholder component is detected.  This allows for the full
 content to only be retrieved when the lightbox is first opened.
 When this flag is set to true, the forceSessionPersistence
 flag is set to true AUTOMATICALLY because it is implied that this component will be retrieved by an ajax call
 in the future.  This may also be useful for direct custom calls to retrieveComponent function,
 as well, which also relies on the placeholder being present.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="namespaceCode" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TreeGroup" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="progressiveRender" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TreeGroup" xml:lang="en"><![CDATA[When set if the condition is satisfied, the component will be displayed. The component MUST
 BE a container or field type. progressiveRender is defined in a limited Spring EL syntax.
 Only valid form property names, and, or, logical comparison operators (non-arithmetic),
 #listContains, #emptyList, matches clause are allowed. String and regex values must use
 single quotes ('), booleans must be either true or false, numbers must be a valid double,
 either negative or positive.
 
 
 DO NOT use progressiveRender and a conditional refresh statement on the same component unless
 it is known that the component will always be visible in all cases when a conditional refresh
 happens (ie conditional refresh has progressiveRender's condition anded with its own
 condition).
 
 
 
 If a component should be refreshed every time it is shown, use the
 progressiveRenderAndRefresh option with this property instead.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="templateOptionsJSString" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TreeGroup" xml:lang="en"><![CDATA[Builds a string from the underlying Map of template options that will export
 that options as a JavaScript Map for use in js and jQuery plugins]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseOutScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TreeGroup" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseOut event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="templateOptions">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TreeGroup" xml:lang="en"><![CDATA[The options that are passed through to the Component renderer

 
 The Map key is the option name, with the Map value as the option value. See
 documentation on the particular widget render for available options.
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:mapType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="fieldBindingObjectPath" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TreeGroup" xml:lang="en"><![CDATA[Object binding path to set on each of the group's
 InputField instances

 
 When the attributes of the group belong to a object whose path is
 different from the default then this property can be given to set each of
 the attributes instead of setting the model path on each one. The object
 path can be overridden at the attribute level. The object path is set to
 the fieldBindingObjectPath during the initialize phase.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:choice maxOccurs="1" minOccurs="0">
            <xsd:element ref="tooltip"/>
            <xsd:element ref="tooltipFocus"/>
            <xsd:element ref="tooltipHelp"/>
          </xsd:choice>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseOverScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TreeGroup" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseOver event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="preContent">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TreeGroup" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:sequence>
                <xsd:any minOccurs="0" processContents="skip"/>
              </xsd:sequence>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="dataAttributes">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TreeGroup" xml:lang="en"><![CDATA[Get the dataAttributes setup for this component - to be written to the html/jQuery data
 
 
 The attributes that are complex objects (contain {}) they will be written through script. The
 attritubes that are simple (contain no objects) will be written directly to the html of the
 component using standard data-. Either way they can be access through .data() call in jQuery
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:mapType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="fieldBindByNamePrefix" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TreeGroup" xml:lang="en"><![CDATA[Binding prefix string to set on each of the groups DataField instances

 
 As opposed to setting the bindingPrefix on each attribute field instance,
 it can be set here for the group. During initialize the string will then
 be set on each attribute field instance if the bindingPrefix is blank and
 not a form field
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element ref="footer"/>
          <xsd:choice maxOccurs="1" minOccurs="0">
            <xsd:element ref="tableLayout"/>
            <xsd:element ref="listLayout"/>
            <xsd:element ref="orderedListLayout"/>
            <xsd:element ref="cssGridLayout"/>
            <xsd:element ref="fourColumnGridLayout"/>
            <xsd:element ref="gridLayout"/>
            <xsd:element ref="sixColumnGridLayout"/>
            <xsd:element ref="twoColumnGridLayout"/>
            <xsd:element ref="cssGridLabelColumnLayout"/>
            <xsd:element ref="cssGridLayoutBase"/>
            <xsd:element ref="stackedLayout"/>
            <xsd:element ref="stackedLayoutGridItems"/>
            <xsd:element ref="stackedLayoutList"/>
            <xsd:element ref="stackedLayoutBoxItems"/>
            <xsd:element ref="boxLayout"/>
            <xsd:element ref="horizontalBoxLayout"/>
            <xsd:element ref="verticalBoxLayout"/>
            <xsd:element maxOccurs="1" minOccurs="0" name="layoutManager" type="org.kuali.rice.krad.uif.layout.LayoutManager"/>
          </xsd:choice>
          <xsd:choice maxOccurs="1" minOccurs="0">
            <xsd:element ref="nodePrototype"/>
          </xsd:choice>
          <xsd:choice maxOccurs="1" minOccurs="0">
            <xsd:element ref="fieldSecurity"/>
            <xsd:element ref="dataFieldSecurity"/>
            <xsd:element ref="actionSecurity"/>
            <xsd:element ref="collectionGroupSecurity"/>
            <xsd:element ref="componentSecurity"/>
          </xsd:choice>
          <xsd:element maxOccurs="1" minOccurs="0" name="readOnly" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TreeGroup" xml:lang="en"><![CDATA[Indicates whether the component can be edited

 
 When readOnly the controls and widgets of Field components
 will not be rendered. If the Field has an underlying value it will be
 displayed readOnly to the user.
 

 
 For a Container component, the readOnly setting will apply
 to all contained components (making a section readOnly makes all fields
 within the section readOnly).
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseMoveScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TreeGroup" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseMove event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="progressiveRenderAndRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TreeGroup" xml:lang="en"><![CDATA[If true, when the progressiveRender condition is satisfied, the component will always be
 retrieved from the server and shown(as opposed to being stored on the client, but hidden,
 after the first retrieval as is the case with the progressiveRenderViaAJAX option).
 
 
 By default, this is false, so components with progressive render capabilities will always
 be already within the client html and toggled to be hidden or visible.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="bindingInfo" type="org.kuali.rice.krad.uif.component.BindingInfo">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TreeGroup" xml:lang="en"/>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="hidden" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TreeGroup" xml:lang="en"><![CDATA[Indicates whether the component should be hidden in the UI

 
 How the hidden data is maintained depends on the views persistence mode.
 If the mode is request, the corresponding data will be rendered to the UI
 but not visible. If the mode is session, the data will not be rendered to
 the UI but maintained server side.
 

 
 For a Container component, the hidden setting will apply to
 all contained components (making a section hidden makes all fields within
 the section hidden)
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="skipInTabOrder" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TreeGroup" xml:lang="en"><![CDATA[Flag indicating that this component and its nested components must be skipped when keyboard
 tabbing.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="context">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TreeGroup" xml:lang="en"><![CDATA[Context map for the component

 
 Any el statements configured for the components properties (e.g.
 title="@{foo.property}") are evaluated using the el context map. This map
 will get populated with default objects like the model, view, and request
 from the ViewHelperService. Other components can push
 further objects into the context so that they are available for use with
 that component. For example, Field instances that are part
 of a collection line as receive the current line instance
 

 
 Context map also provides objects to methods that are invoked for
 GeneratedField instances
 

 
 The Map key gives the name of the variable that can be used within
 expressions, and the Map value gives the object instance for which
 expressions containing the variable should evaluate against
 

 
 NOTE: Calling getContext().putAll() will skip updating any configured property replacers for the
 component. Instead you should call #pushAllToContext
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:mapType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onUnloadScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TreeGroup" xml:lang="en"><![CDATA[Script that should be executed when the component's onUnload event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="forceSessionPersistence" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TreeGroup" xml:lang="en"><![CDATA[Indicates whether the component should be stored with the session view regardless of configuration

 
 By default the framework nulls out any components that do not have a refresh condition or are needed for
 collection processing. This can be a problem if custom application code is written to refresh a component
 without setting the corresponding component flag. In this case this property can be set to true to force the
 framework to keep the component in session. Defaults to false
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="valign" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TreeGroup" xml:lang="en"><![CDATA[Vertical alignment of the component within its container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how the component
 should be aligned vertically within the container. During the finalize
 phase the CSS vertical-align style will be created for the valign
 setting.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:choice maxOccurs="1" minOccurs="0">
            <xsd:element ref="scrollpane"/>
          </xsd:choice>
          <xsd:element maxOccurs="1" minOccurs="0" name="progressiveRenderViaAJAX" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TreeGroup" xml:lang="en"><![CDATA[When progressiveRenderViaAJAX is true, this component will be retrieved from the server when
 it first satisfies its progressive render condition.
 
 
 After the first retrieval, it is hidden/shown in the html by the js when its progressive
 condition result changes. By default, this is false, so components with progressive render
 capabilities will always be already within the client html and toggled to be hidden or
 visible.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onFocusScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TreeGroup" xml:lang="en"><![CDATA[Script that should be executed when the component's onFocus event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="instructionalMessage" type="org.kuali.rice.krad.uif.element.Message">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TreeGroup" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="templateName" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TreeGroup" xml:lang="en"><![CDATA[The name for which the template can be invoked by

 
 Whether the template name is needed depends on the underlying rendering engine being used. In the example of
 Freemarker, the template points to the actual source file, which then loads a macro. From then on the macro is
 simply invoked to execute the template
 

 
 e.g. 'uif_text'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="cssClasses" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.container.TreeGroup" xml:lang="en"><![CDATA[CSS style class(s) to be applied to the component

 
 Declares style classes for the component. Multiple classes are specified
 with a space delimiter. This is used by the renderer to set the class
 attribute on the corresponding element. The class(s) declared must be
 available in the common style sheets or the style sheets specified for
 the view
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="unbounded" minOccurs="0" ref="spring:property"/>
          <xsd:element maxOccurs="unbounded" minOccurs="0" ref="property"/>
        </xsd:choice>
        <xsd:attribute name="propertyName">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.container.TreeGroup" xml:lang="en"/>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="headertext">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.container.TreeGroup" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="defaultItemPosition">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.container.TreeGroup" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="instructionalText">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.container.TreeGroup" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="fieldBindingObjectPath">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.container.TreeGroup" xml:lang="en"><![CDATA[Object binding path to set on each of the group's
 InputField instances

 
 When the attributes of the group belong to a object whose path is
 different from the default then this property can be given to set each of
 the attributes instead of setting the model path on each one. The object
 path can be overridden at the attribute level. The object path is set to
 the fieldBindingObjectPath during the initialize phase.
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="fieldBindByNamePrefix">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.container.TreeGroup" xml:lang="en"><![CDATA[Binding prefix string to set on each of the groups DataField instances

 
 As opposed to setting the bindingPrefix on each attribute field instance,
 it can be set here for the group. During initialize the string will then
 be set on each attribute field instance if the bindingPrefix is blank and
 not a form field
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:anyAttribute processContents="skip"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="helpDefinition-type">
    <xsd:choice maxOccurs="unbounded" minOccurs="0">
      <xsd:element maxOccurs="1" minOccurs="0" name="id" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.HelpDefinition" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="parameterDetailType" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.HelpDefinition" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="parameterNamespace" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.HelpDefinition" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="namespaceCode" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.HelpDefinition" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="componentCode" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.HelpDefinition" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="parameterName" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.HelpDefinition" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="unbounded" minOccurs="0" ref="spring:property"/>
      <xsd:element maxOccurs="unbounded" minOccurs="0" ref="property"/>
    </xsd:choice>
    <xsd:attribute name="id">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.HelpDefinition" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="parameterDetailType">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.HelpDefinition" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="parameterNamespace">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.HelpDefinition" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="namespaceCode">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.HelpDefinition" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="componentCode">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.HelpDefinition" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="parameterName">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.HelpDefinition" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="parent" type="xsd:string"/>
    <xsd:anyAttribute processContents="skip"/>
  </xsd:complexType>
  <xsd:complexType name="spaceField-type">
    <xsd:complexContent>
      <xsd:extension base="componentAttributes-type">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element maxOccurs="1" minOccurs="0" name="onChangeScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.SpaceField" xml:lang="en"><![CDATA[Script that should be executed when the component's onChange event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onKeyPressScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.SpaceField" xml:lang="en"><![CDATA[Script that should be executed when the component's onKeyPress event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="refreshTimer" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.SpaceField" xml:lang="en"><![CDATA[Time in seconds that the component will be automatically refreshed
 
 
 This will invoke the refresh process just like the conditionalRefresh and
 refreshWhenChangedPropertyNames. When using this property methodToCallOnRefresh and id should
 also be specified
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="disableSessionPersistence" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.SpaceField" xml:lang="en"><![CDATA[Disables the storage of the component in session (when the framework determines it needs to be due to a
 refresh condition)

 
 When the framework determines there is a condition on the component that requires it to keep around between
 posts, it will store the component instance in session. This flag can be set to disable this behavior (which
 would require custom application logic to support behavior such as refresh)
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onDblClickScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.SpaceField" xml:lang="en"><![CDATA[Script that should be executed when the component's onDblClick event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="additionalComponentsToRefresh" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.SpaceField" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onBlurScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.SpaceField" xml:lang="en"><![CDATA[Script that should be executed when the component's onBlur event is fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="selfRendered" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.SpaceField" xml:lang="en"><![CDATA[Indicates whether the component contains its own render output (through
 the renderOutput property)

 
 If self rendered is true, the corresponding template for the component
 will not be invoked and the renderOutput String will be written to the
 response as is.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="colSpan" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.SpaceField" xml:lang="en"><![CDATA[Number of places the component should take up horizontally in the
 container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how many places
 horizontally the component should take up within the container. This is
 only applicable for table based layout managers. Default is 1
 

 TODO: this should not be on component interface since it only applies if
 the layout manager supports it, need some sort of layoutOptions map for
 field level options that depend on the manager]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="additionalCssClasses" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.SpaceField" xml:lang="en"><![CDATA[Convenience property for adding css class names to the end of the list of cssClasses that may already exist on
 this Component (this is to avoid explicitly having to set list merge in the bean definition)]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="required" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.SpaceField" xml:lang="en"><![CDATA[Indicates whether the component is required

 
 At the general component level required means there is some action the
 user needs to take within the component. For example, within a section it
 might mean the fields within the section should be completed. At a field
 level, it means the field should be completed. This provides the ability
 for the renderers to indicate the required action.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="finalizeMethodToCall" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.SpaceField" xml:lang="en"><![CDATA[The name of the method that should be invoked for finalizing the component
 configuration (full method name, without parameters or return type)

 
 Note the method can also be set with the finalizeMethodInvoker
 targetMethod property. If the method is on the configured
 ViewHelperService, only this property needs to be configured
 

 
 The model backing the view will be passed as the first argument method and then
 the Component instance as the second argument. If any additional method
 arguments are declared with the finalizeMethodAdditionalArguments, they will then
 be passed in the order declared in the list
 

 
 If the component is selfRendered, the finalize method can return a string which
 will be set as the component's renderOutput. The selfRendered indicator will also
 be set to true on the component.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="resetDataOnRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.SpaceField" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onKeyDownScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.SpaceField" xml:lang="en"><![CDATA[Script that should be executed when the component's onKeyDown event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="template" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.SpaceField" xml:lang="en"><![CDATA[The path to the JSP file that should be called to render the component

 
 The path should be relative to the web root. An attribute will be available to the component to use under the
 name given by the method getComponentTypeName. Based on the component type, additional attributes could
 be available for use. See the component documentation for more information on such attributes.
 

 
 e.g. '/krad/WEB-INF/jsp/tiles/component.jsp'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="align" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.SpaceField" xml:lang="en"><![CDATA[Horizontal alignment of the component within its container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how the component
 should be aligned horizontally within the container. During the finalize
 phase the CSS text-align style will be created for the align setting.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="width" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.SpaceField" xml:lang="en"><![CDATA[Width the component should take up in the container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies a width the component
 should take up in the Container. This is not applicable for all layout
 managers. During the finalize phase the CSS width style will be created
 for the width setting.
 

 
 e.g. '30%', '55px'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseDownScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.SpaceField" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseDown event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="label" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.SpaceField" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="postContent">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.SpaceField" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:sequence>
                <xsd:any minOccurs="0" processContents="skip"/>
              </xsd:sequence>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onClickScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.SpaceField" xml:lang="en"><![CDATA[Script that should be executed when the component's onClick event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="render" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.SpaceField" xml:lang="en"><![CDATA[Indicates whether the component should be rendered in the UI

 
 If set to false, the corresponding component template will not be invoked
 (therefore nothing will be rendered to the UI).
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onLoadScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.SpaceField" xml:lang="en"><![CDATA[Script that should be executed when the component's onLoad event is fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="methodToCallOnRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.SpaceField" xml:lang="en"><![CDATA[Name of a method on the controller that should be invoked as part of the component refresh
 and disclosure process
 
 
 During the component refresh or disclosure process it might be necessary to perform other
 operations, such as preparing data or executing a business process. This allows the
 configuration of a method on the underlying controller that should be called for the
 component refresh action. In this method, the necessary logic can be performed and then the
 base component update method invoked to carry out the component refresh.
 
 
 
 Controller method to invoke must accept the form, binding result, request, and response
 arguments
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="finalizeMethodInvoker" type="org.kuali.rice.krad.uif.component.MethodInvokerConfig">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.SpaceField" xml:lang="en"><![CDATA[MethodInvokerConfig instance for the method that should be invoked
 for finalizing the component configuration

 
 MethodInvoker can be configured to specify the class or object the method
 should be called on. For static method invocations, the targetClass
 property can be configured. For object invocations, that targetObject
 property can be configured
 

 
 If the component is selfRendered, the finalize method can return a string which
 will be set as the component's renderOutput. The selfRendered indicator will also
 be set to true on the component.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="shortLabel" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.SpaceField" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="componentModifiers">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.SpaceField" xml:lang="en"><![CDATA[ComponentModifier instances that should be invoked to
 initialize the component

 
 These provide dynamic initialization behavior for the component and are
 configured through the components definition. Each initializer will get
 invoked by the initialize method.
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="org.kuali.rice.krad.uif.modifier.ComponentModifier">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="componentCode" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.SpaceField" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="propertyReplacers">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.SpaceField" xml:lang="en"><![CDATA[gets a list of PropertyReplacer instances

 They will be evaluated
 during the view lifecycle to conditionally set properties on the
 Component based on expression evaluations]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="org.kuali.rice.krad.uif.component.PropertyReplacer">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onDocumentReadyScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.SpaceField" xml:lang="en"><![CDATA[Script to be run when the document ready event is triggered]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="refreshWhenChangedPropertyNames" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.SpaceField" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseUpScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.SpaceField" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseUp event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="renderedHtmlOutput" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.SpaceField" xml:lang="en"><![CDATA[Rendering output for the component that will be sent as part of the
 response (can contain static text and HTML)]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onKeyUpScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.SpaceField" xml:lang="en"><![CDATA[Script that should be executed when the component's onKeyUp event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="fieldLabel" type="org.kuali.rice.krad.uif.element.Label">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.SpaceField" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onCloseScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.SpaceField" xml:lang="en"><![CDATA[Script that should be executed when the component's onClose event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="id" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.SpaceField" xml:lang="en"><![CDATA[The unique id (within a given tree) for the element.

 The id is used to identify an element instance within the tree, and
 will be used by renderers to set the HTML element id. This gives a way to find various elements
 for scripting. If the id is not given, a default will be generated by the framework.
 

 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="title" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.SpaceField" xml:lang="en"><![CDATA[The component title

 
 Depending on the component can be used in various ways. For example with a Container component the title is
 used to set the header text. For components like controls other other components that render an HTML element it
 is used to set the HTML title attribute.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="order" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.SpaceField" xml:lang="en"><![CDATA[Order of a component within a List of other components

 Lower numbers are placed higher up in the list, while higher numbers are placed
 lower in the list]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="style" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.SpaceField" xml:lang="en"><![CDATA[CSS style string to be applied to the component

 
 Any style override or additions can be specified with this attribute.
 This is used by the renderer to set the style attribute on the
 corresponding element.
 

 
 e.g. 'color: #000000;text-decoration: underline;'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="finalizeMethodAdditionalArguments" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.SpaceField" xml:lang="en"><![CDATA[The List of Object instances that should be passed as arguments to the finalize method

 
 These arguments are passed to the finalize method after the standard model and component
 arguments. They are passed in the order declared in the list
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="conditionalRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.SpaceField" xml:lang="en"><![CDATA[When set if the condition is satisfied, the component will be refreshed.
 
 
 The component MUST BE a container or field type. conditionalRefresh is defined in a limited
 Spring EL syntax. Only valid form property names, and, or, logical comparison operators
 (non-arithmetic), #listContains, #emptyList, and the matches clause are allowed. String and
 regex values must use single quotes ('), booleans must be either true or false, numbers must
 be a valid double either negative or positive.
 
 
 DO NOT use progressiveRender and conditionalRefresh on the same component unless it is known
 that the component will always be visible in all cases when a conditionalRefresh happens (ie
 conditionalRefresh has progressiveRender's condition anded with its own condition). If a
 component should be refreshed every time it is shown, use the progressiveRenderAndRefresh
 option with this property instead.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onSubmitScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.SpaceField" xml:lang="en"><![CDATA[Script that should be executed when the component's onSubmit event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="rowSpan" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.SpaceField" xml:lang="en"><![CDATA[Number of places the component should take up vertically in the container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how many places
 vertically the component should take up within the container. This is
 only applicable for table based layout managers. Default is 1
 

 TODO: this should not be on component interface since it only applies if
 the layout manager supports it, need some sort of layoutOptions map for
 field level options that depend on the manager]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="retrieveViaAjax" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.SpaceField" xml:lang="en"><![CDATA[When true, this component will render as a placeholder component instead of rendering normally because the
 content will be later retrieved through manually ajax retrieval calls in the js

 This flag does not imply any automation, there must be a js call invoked for the content to be retrieved
 by the server, but this does mark it with a placeholder component which KRAD js uses during these calls.
 This placeholder component is used for ajax retrievals.  In particular, this flag is useful for use in
 combination with the showLightboxComponent js function which will automatically retrieve the
 real content of a component through ajax if a placeholder component is detected.  This allows for the full
 content to only be retrieved when the lightbox is first opened.
 When this flag is set to true, the forceSessionPersistence
 flag is set to true AUTOMATICALLY because it is implied that this component will be retrieved by an ajax call
 in the future.  This may also be useful for direct custom calls to retrieveComponent function,
 as well, which also relies on the placeholder being present.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="namespaceCode" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.SpaceField" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="progressiveRender" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.SpaceField" xml:lang="en"><![CDATA[When set if the condition is satisfied, the component will be displayed. The component MUST
 BE a container or field type. progressiveRender is defined in a limited Spring EL syntax.
 Only valid form property names, and, or, logical comparison operators (non-arithmetic),
 #listContains, #emptyList, matches clause are allowed. String and regex values must use
 single quotes ('), booleans must be either true or false, numbers must be a valid double,
 either negative or positive.
 
 
 DO NOT use progressiveRender and a conditional refresh statement on the same component unless
 it is known that the component will always be visible in all cases when a conditional refresh
 happens (ie conditional refresh has progressiveRender's condition anded with its own
 condition).
 
 
 
 If a component should be refreshed every time it is shown, use the
 progressiveRenderAndRefresh option with this property instead.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="labelPlacement" type="xsd:anyType">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.SpaceField" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="templateOptionsJSString" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.SpaceField" xml:lang="en"><![CDATA[Builds a string from the underlying Map of template options that will export
 that options as a JavaScript Map for use in js and jQuery plugins]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseOutScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.SpaceField" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseOut event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="templateOptions">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.SpaceField" xml:lang="en"><![CDATA[The options that are passed through to the Component renderer

 
 The Map key is the option name, with the Map value as the option value. See
 documentation on the particular widget render for available options.
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:mapType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:choice maxOccurs="1" minOccurs="0">
            <xsd:element ref="tooltip"/>
            <xsd:element ref="tooltipFocus"/>
            <xsd:element ref="tooltipHelp"/>
          </xsd:choice>
          <xsd:element maxOccurs="1" minOccurs="0" name="preContent">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.SpaceField" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:sequence>
                <xsd:any minOccurs="0" processContents="skip"/>
              </xsd:sequence>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseOverScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.SpaceField" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseOver event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="dataAttributes">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.SpaceField" xml:lang="en"><![CDATA[Get the dataAttributes setup for this component - to be written to the html/jQuery data
 
 
 The attributes that are complex objects (contain {}) they will be written through script. The
 attritubes that are simple (contain no objects) will be written directly to the html of the
 component using standard data-. Either way they can be access through .data() call in jQuery
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:mapType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="labelColSpan" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.SpaceField" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:choice maxOccurs="1" minOccurs="0">
            <xsd:element ref="fieldSecurity"/>
            <xsd:element ref="dataFieldSecurity"/>
            <xsd:element ref="actionSecurity"/>
            <xsd:element ref="collectionGroupSecurity"/>
            <xsd:element ref="componentSecurity"/>
          </xsd:choice>
          <xsd:element maxOccurs="1" minOccurs="0" name="readOnly" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.SpaceField" xml:lang="en"><![CDATA[Indicates whether the component can be edited

 
 When readOnly the controls and widgets of Field components
 will not be rendered. If the Field has an underlying value it will be
 displayed readOnly to the user.
 

 
 For a Container component, the readOnly setting will apply
 to all contained components (making a section readOnly makes all fields
 within the section readOnly).
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseMoveScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.SpaceField" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseMove event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="progressiveRenderAndRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.SpaceField" xml:lang="en"><![CDATA[If true, when the progressiveRender condition is satisfied, the component will always be
 retrieved from the server and shown(as opposed to being stored on the client, but hidden,
 after the first retrieval as is the case with the progressiveRenderViaAJAX option).
 
 
 By default, this is false, so components with progressive render capabilities will always
 be already within the client html and toggled to be hidden or visible.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="labelStyleClasses" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.SpaceField" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="hidden" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.SpaceField" xml:lang="en"><![CDATA[Indicates whether the component should be hidden in the UI

 
 How the hidden data is maintained depends on the views persistence mode.
 If the mode is request, the corresponding data will be rendered to the UI
 but not visible. If the mode is session, the data will not be rendered to
 the UI but maintained server side.
 

 
 For a Container component, the hidden setting will apply to
 all contained components (making a section hidden makes all fields within
 the section hidden)
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="skipInTabOrder" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.SpaceField" xml:lang="en"><![CDATA[Flag indicating that this component and its nested components must be skipped when keyboard
 tabbing.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="context">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.SpaceField" xml:lang="en"><![CDATA[Context map for the component

 
 Any el statements configured for the components properties (e.g.
 title="@{foo.property}") are evaluated using the el context map. This map
 will get populated with default objects like the model, view, and request
 from the ViewHelperService. Other components can push
 further objects into the context so that they are available for use with
 that component. For example, Field instances that are part
 of a collection line as receive the current line instance
 

 
 Context map also provides objects to methods that are invoked for
 GeneratedField instances
 

 
 The Map key gives the name of the variable that can be used within
 expressions, and the Map value gives the object instance for which
 expressions containing the variable should evaluate against
 

 
 NOTE: Calling getContext().putAll() will skip updating any configured property replacers for the
 component. Instead you should call #pushAllToContext
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:mapType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onUnloadScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.SpaceField" xml:lang="en"><![CDATA[Script that should be executed when the component's onUnload event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="labelRendered" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.SpaceField" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="forceSessionPersistence" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.SpaceField" xml:lang="en"><![CDATA[Indicates whether the component should be stored with the session view regardless of configuration

 
 By default the framework nulls out any components that do not have a refresh condition or are needed for
 collection processing. This can be a problem if custom application code is written to refresh a component
 without setting the corresponding component flag. In this case this property can be set to true to force the
 framework to keep the component in session. Defaults to false
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="valign" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.SpaceField" xml:lang="en"><![CDATA[Vertical alignment of the component within its container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how the component
 should be aligned vertically within the container. During the finalize
 phase the CSS vertical-align style will be created for the valign
 setting.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="progressiveRenderViaAJAX" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.SpaceField" xml:lang="en"><![CDATA[When progressiveRenderViaAJAX is true, this component will be retrieved from the server when
 it first satisfies its progressive render condition.
 
 
 After the first retrieval, it is hidden/shown in the html by the js when its progressive
 condition result changes. By default, this is false, so components with progressive render
 capabilities will always be already within the client html and toggled to be hidden or
 visible.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onFocusScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.SpaceField" xml:lang="en"><![CDATA[Script that should be executed when the component's onFocus event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="cssClasses" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.SpaceField" xml:lang="en"><![CDATA[CSS style class(s) to be applied to the component

 
 Declares style classes for the component. Multiple classes are specified
 with a space delimiter. This is used by the renderer to set the class
 attribute on the corresponding element. The class(s) declared must be
 available in the common style sheets or the style sheets specified for
 the view
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="templateName" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.SpaceField" xml:lang="en"><![CDATA[The name for which the template can be invoked by

 
 Whether the template name is needed depends on the underlying rendering engine being used. In the example of
 Freemarker, the template points to the actual source file, which then loads a macro. From then on the macro is
 simply invoked to execute the template
 

 
 e.g. 'uif_text'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="unbounded" minOccurs="0" ref="spring:property"/>
          <xsd:element maxOccurs="unbounded" minOccurs="0" ref="property"/>
        </xsd:choice>
        <xsd:attribute name="label">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.SpaceField" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="shortLabel">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.SpaceField" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="labelColSpan">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.SpaceField" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="labelStyleClasses">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.SpaceField" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="labelRendered">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.SpaceField" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:anyAttribute processContents="skip"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="message-mixedType">
    <xsd:complexContent>
      <xsd:extension base="message-type">
        <xsd:choice maxOccurs="1" minOccurs="0">
          <xsd:element ref="message"/>
        </xsd:choice>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="messageField-type">
    <xsd:complexContent>
      <xsd:extension base="componentAttributes-type">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element maxOccurs="1" minOccurs="0" name="onChangeScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.MessageField" xml:lang="en"><![CDATA[Script that should be executed when the component's onChange event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="messageText" type="xsd:anyType">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.MessageField" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="messageComponentStructure" type="xsd:anyType">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.MessageField" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onKeyPressScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.MessageField" xml:lang="en"><![CDATA[Script that should be executed when the component's onKeyPress event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="refreshTimer" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.MessageField" xml:lang="en"><![CDATA[Time in seconds that the component will be automatically refreshed
 
 
 This will invoke the refresh process just like the conditionalRefresh and
 refreshWhenChangedPropertyNames. When using this property methodToCallOnRefresh and id should
 also be specified
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="disableSessionPersistence" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.MessageField" xml:lang="en"><![CDATA[Disables the storage of the component in session (when the framework determines it needs to be due to a
 refresh condition)

 
 When the framework determines there is a condition on the component that requires it to keep around between
 posts, it will store the component instance in session. This flag can be set to disable this behavior (which
 would require custom application logic to support behavior such as refresh)
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onDblClickScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.MessageField" xml:lang="en"><![CDATA[Script that should be executed when the component's onDblClick event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="additionalComponentsToRefresh" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.MessageField" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onBlurScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.MessageField" xml:lang="en"><![CDATA[Script that should be executed when the component's onBlur event is fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="selfRendered" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.MessageField" xml:lang="en"><![CDATA[Indicates whether the component contains its own render output (through
 the renderOutput property)

 
 If self rendered is true, the corresponding template for the component
 will not be invoked and the renderOutput String will be written to the
 response as is.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="colSpan" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.MessageField" xml:lang="en"><![CDATA[Number of places the component should take up horizontally in the
 container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how many places
 horizontally the component should take up within the container. This is
 only applicable for table based layout managers. Default is 1
 

 TODO: this should not be on component interface since it only applies if
 the layout manager supports it, need some sort of layoutOptions map for
 field level options that depend on the manager]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="additionalCssClasses" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.MessageField" xml:lang="en"><![CDATA[Convenience property for adding css class names to the end of the list of cssClasses that may already exist on
 this Component (this is to avoid explicitly having to set list merge in the bean definition)]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="required" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.MessageField" xml:lang="en"><![CDATA[Indicates whether the component is required

 
 At the general component level required means there is some action the
 user needs to take within the component. For example, within a section it
 might mean the fields within the section should be completed. At a field
 level, it means the field should be completed. This provides the ability
 for the renderers to indicate the required action.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="finalizeMethodToCall" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.MessageField" xml:lang="en"><![CDATA[The name of the method that should be invoked for finalizing the component
 configuration (full method name, without parameters or return type)

 
 Note the method can also be set with the finalizeMethodInvoker
 targetMethod property. If the method is on the configured
 ViewHelperService, only this property needs to be configured
 

 
 The model backing the view will be passed as the first argument method and then
 the Component instance as the second argument. If any additional method
 arguments are declared with the finalizeMethodAdditionalArguments, they will then
 be passed in the order declared in the list
 

 
 If the component is selfRendered, the finalize method can return a string which
 will be set as the component's renderOutput. The selfRendered indicator will also
 be set to true on the component.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="resetDataOnRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.MessageField" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onKeyDownScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.MessageField" xml:lang="en"><![CDATA[Script that should be executed when the component's onKeyDown event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="template" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.MessageField" xml:lang="en"><![CDATA[The path to the JSP file that should be called to render the component

 
 The path should be relative to the web root. An attribute will be available to the component to use under the
 name given by the method getComponentTypeName. Based on the component type, additional attributes could
 be available for use. See the component documentation for more information on such attributes.
 

 
 e.g. '/krad/WEB-INF/jsp/tiles/component.jsp'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="align" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.MessageField" xml:lang="en"><![CDATA[Horizontal alignment of the component within its container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how the component
 should be aligned horizontally within the container. During the finalize
 phase the CSS text-align style will be created for the align setting.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseDownScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.MessageField" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseDown event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="width" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.MessageField" xml:lang="en"><![CDATA[Width the component should take up in the container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies a width the component
 should take up in the Container. This is not applicable for all layout
 managers. During the finalize phase the CSS width style will be created
 for the width setting.
 

 
 e.g. '30%', '55px'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="label" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.MessageField" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="postContent">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.MessageField" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:sequence>
                <xsd:any minOccurs="0" processContents="skip"/>
              </xsd:sequence>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onClickScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.MessageField" xml:lang="en"><![CDATA[Script that should be executed when the component's onClick event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="render" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.MessageField" xml:lang="en"><![CDATA[Indicates whether the component should be rendered in the UI

 
 If set to false, the corresponding component template will not be invoked
 (therefore nothing will be rendered to the UI).
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onLoadScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.MessageField" xml:lang="en"><![CDATA[Script that should be executed when the component's onLoad event is fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="methodToCallOnRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.MessageField" xml:lang="en"><![CDATA[Name of a method on the controller that should be invoked as part of the component refresh
 and disclosure process
 
 
 During the component refresh or disclosure process it might be necessary to perform other
 operations, such as preparing data or executing a business process. This allows the
 configuration of a method on the underlying controller that should be called for the
 component refresh action. In this method, the necessary logic can be performed and then the
 base component update method invoked to carry out the component refresh.
 
 
 
 Controller method to invoke must accept the form, binding result, request, and response
 arguments
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="finalizeMethodInvoker" type="org.kuali.rice.krad.uif.component.MethodInvokerConfig">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.MessageField" xml:lang="en"><![CDATA[MethodInvokerConfig instance for the method that should be invoked
 for finalizing the component configuration

 
 MethodInvoker can be configured to specify the class or object the method
 should be called on. For static method invocations, the targetClass
 property can be configured. For object invocations, that targetObject
 property can be configured
 

 
 If the component is selfRendered, the finalize method can return a string which
 will be set as the component's renderOutput. The selfRendered indicator will also
 be set to true on the component.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="shortLabel" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.MessageField" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="componentModifiers">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.MessageField" xml:lang="en"><![CDATA[ComponentModifier instances that should be invoked to
 initialize the component

 
 These provide dynamic initialization behavior for the component and are
 configured through the components definition. Each initializer will get
 invoked by the initialize method.
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="org.kuali.rice.krad.uif.modifier.ComponentModifier">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="componentCode" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.MessageField" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onDocumentReadyScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.MessageField" xml:lang="en"><![CDATA[Script to be run when the document ready event is triggered]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="propertyReplacers">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.MessageField" xml:lang="en"><![CDATA[gets a list of PropertyReplacer instances

 They will be evaluated
 during the view lifecycle to conditionally set properties on the
 Component based on expression evaluations]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="org.kuali.rice.krad.uif.component.PropertyReplacer">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="refreshWhenChangedPropertyNames" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.MessageField" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseUpScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.MessageField" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseUp event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onKeyUpScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.MessageField" xml:lang="en"><![CDATA[Script that should be executed when the component's onKeyUp event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="renderedHtmlOutput" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.MessageField" xml:lang="en"><![CDATA[Rendering output for the component that will be sent as part of the
 response (can contain static text and HTML)]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="inlineComponents" type="xsd:anyType">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.MessageField" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="fieldLabel" type="org.kuali.rice.krad.uif.element.Label">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.MessageField" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onCloseScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.MessageField" xml:lang="en"><![CDATA[Script that should be executed when the component's onClose event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="id" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.MessageField" xml:lang="en"><![CDATA[The unique id (within a given tree) for the element.

 The id is used to identify an element instance within the tree, and
 will be used by renderers to set the HTML element id. This gives a way to find various elements
 for scripting. If the id is not given, a default will be generated by the framework.
 

 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="title" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.MessageField" xml:lang="en"><![CDATA[The component title

 
 Depending on the component can be used in various ways. For example with a Container component the title is
 used to set the header text. For components like controls other other components that render an HTML element it
 is used to set the HTML title attribute.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="order" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.MessageField" xml:lang="en"><![CDATA[Order of a component within a List of other components

 Lower numbers are placed higher up in the list, while higher numbers are placed
 lower in the list]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="style" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.MessageField" xml:lang="en"><![CDATA[CSS style string to be applied to the component

 
 Any style override or additions can be specified with this attribute.
 This is used by the renderer to set the style attribute on the
 corresponding element.
 

 
 e.g. 'color: #000000;text-decoration: underline;'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="finalizeMethodAdditionalArguments" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.MessageField" xml:lang="en"><![CDATA[The List of Object instances that should be passed as arguments to the finalize method

 
 These arguments are passed to the finalize method after the standard model and component
 arguments. They are passed in the order declared in the list
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="conditionalRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.MessageField" xml:lang="en"><![CDATA[When set if the condition is satisfied, the component will be refreshed.
 
 
 The component MUST BE a container or field type. conditionalRefresh is defined in a limited
 Spring EL syntax. Only valid form property names, and, or, logical comparison operators
 (non-arithmetic), #listContains, #emptyList, and the matches clause are allowed. String and
 regex values must use single quotes ('), booleans must be either true or false, numbers must
 be a valid double either negative or positive.
 
 
 DO NOT use progressiveRender and conditionalRefresh on the same component unless it is known
 that the component will always be visible in all cases when a conditionalRefresh happens (ie
 conditionalRefresh has progressiveRender's condition anded with its own condition). If a
 component should be refreshed every time it is shown, use the progressiveRenderAndRefresh
 option with this property instead.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onSubmitScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.MessageField" xml:lang="en"><![CDATA[Script that should be executed when the component's onSubmit event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="rowSpan" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.MessageField" xml:lang="en"><![CDATA[Number of places the component should take up vertically in the container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how many places
 vertically the component should take up within the container. This is
 only applicable for table based layout managers. Default is 1
 

 TODO: this should not be on component interface since it only applies if
 the layout manager supports it, need some sort of layoutOptions map for
 field level options that depend on the manager]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="retrieveViaAjax" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.MessageField" xml:lang="en"><![CDATA[When true, this component will render as a placeholder component instead of rendering normally because the
 content will be later retrieved through manually ajax retrieval calls in the js

 This flag does not imply any automation, there must be a js call invoked for the content to be retrieved
 by the server, but this does mark it with a placeholder component which KRAD js uses during these calls.
 This placeholder component is used for ajax retrievals.  In particular, this flag is useful for use in
 combination with the showLightboxComponent js function which will automatically retrieve the
 real content of a component through ajax if a placeholder component is detected.  This allows for the full
 content to only be retrieved when the lightbox is first opened.
 When this flag is set to true, the forceSessionPersistence
 flag is set to true AUTOMATICALLY because it is implied that this component will be retrieved by an ajax call
 in the future.  This may also be useful for direct custom calls to retrieveComponent function,
 as well, which also relies on the placeholder being present.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="namespaceCode" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.MessageField" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="progressiveRender" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.MessageField" xml:lang="en"><![CDATA[When set if the condition is satisfied, the component will be displayed. The component MUST
 BE a container or field type. progressiveRender is defined in a limited Spring EL syntax.
 Only valid form property names, and, or, logical comparison operators (non-arithmetic),
 #listContains, #emptyList, matches clause are allowed. String and regex values must use
 single quotes ('), booleans must be either true or false, numbers must be a valid double,
 either negative or positive.
 
 
 DO NOT use progressiveRender and a conditional refresh statement on the same component unless
 it is known that the component will always be visible in all cases when a conditional refresh
 happens (ie conditional refresh has progressiveRender's condition anded with its own
 condition).
 
 
 
 If a component should be refreshed every time it is shown, use the
 progressiveRenderAndRefresh option with this property instead.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="labelPlacement" type="xsd:anyType">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.MessageField" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="templateOptionsJSString" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.MessageField" xml:lang="en"><![CDATA[Builds a string from the underlying Map of template options that will export
 that options as a JavaScript Map for use in js and jQuery plugins]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseOutScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.MessageField" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseOut event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="templateOptions">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.MessageField" xml:lang="en"><![CDATA[The options that are passed through to the Component renderer

 
 The Map key is the option name, with the Map value as the option value. See
 documentation on the particular widget render for available options.
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:mapType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:choice maxOccurs="1" minOccurs="0">
            <xsd:element ref="tooltip"/>
            <xsd:element ref="tooltipFocus"/>
            <xsd:element ref="tooltipHelp"/>
          </xsd:choice>
          <xsd:element maxOccurs="1" minOccurs="0" name="preContent">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.MessageField" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:sequence>
                <xsd:any minOccurs="0" processContents="skip"/>
              </xsd:sequence>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseOverScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.MessageField" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseOver event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="dataAttributes">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.MessageField" xml:lang="en"><![CDATA[Get the dataAttributes setup for this component - to be written to the html/jQuery data
 
 
 The attributes that are complex objects (contain {}) they will be written through script. The
 attritubes that are simple (contain no objects) will be written directly to the html of the
 component using standard data-. Either way they can be access through .data() call in jQuery
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:mapType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="labelColSpan" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.MessageField" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:choice maxOccurs="1" minOccurs="0">
            <xsd:element ref="message"/>
          </xsd:choice>
          <xsd:choice maxOccurs="1" minOccurs="0">
            <xsd:element ref="fieldSecurity"/>
            <xsd:element ref="dataFieldSecurity"/>
            <xsd:element ref="actionSecurity"/>
            <xsd:element ref="collectionGroupSecurity"/>
            <xsd:element ref="componentSecurity"/>
          </xsd:choice>
          <xsd:element maxOccurs="1" minOccurs="0" name="readOnly" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.MessageField" xml:lang="en"><![CDATA[Indicates whether the component can be edited

 
 When readOnly the controls and widgets of Field components
 will not be rendered. If the Field has an underlying value it will be
 displayed readOnly to the user.
 

 
 For a Container component, the readOnly setting will apply
 to all contained components (making a section readOnly makes all fields
 within the section readOnly).
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseMoveScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.MessageField" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseMove event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="progressiveRenderAndRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.MessageField" xml:lang="en"><![CDATA[If true, when the progressiveRender condition is satisfied, the component will always be
 retrieved from the server and shown(as opposed to being stored on the client, but hidden,
 after the first retrieval as is the case with the progressiveRenderViaAJAX option).
 
 
 By default, this is false, so components with progressive render capabilities will always
 be already within the client html and toggled to be hidden or visible.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="labelStyleClasses" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.MessageField" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="hidden" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.MessageField" xml:lang="en"><![CDATA[Indicates whether the component should be hidden in the UI

 
 How the hidden data is maintained depends on the views persistence mode.
 If the mode is request, the corresponding data will be rendered to the UI
 but not visible. If the mode is session, the data will not be rendered to
 the UI but maintained server side.
 

 
 For a Container component, the hidden setting will apply to
 all contained components (making a section hidden makes all fields within
 the section hidden)
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="skipInTabOrder" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.MessageField" xml:lang="en"><![CDATA[Flag indicating that this component and its nested components must be skipped when keyboard
 tabbing.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="context">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.MessageField" xml:lang="en"><![CDATA[Context map for the component

 
 Any el statements configured for the components properties (e.g.
 title="@{foo.property}") are evaluated using the el context map. This map
 will get populated with default objects like the model, view, and request
 from the ViewHelperService. Other components can push
 further objects into the context so that they are available for use with
 that component. For example, Field instances that are part
 of a collection line as receive the current line instance
 

 
 Context map also provides objects to methods that are invoked for
 GeneratedField instances
 

 
 The Map key gives the name of the variable that can be used within
 expressions, and the Map value gives the object instance for which
 expressions containing the variable should evaluate against
 

 
 NOTE: Calling getContext().putAll() will skip updating any configured property replacers for the
 component. Instead you should call #pushAllToContext
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:mapType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onUnloadScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.MessageField" xml:lang="en"><![CDATA[Script that should be executed when the component's onUnload event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="labelRendered" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.MessageField" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="forceSessionPersistence" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.MessageField" xml:lang="en"><![CDATA[Indicates whether the component should be stored with the session view regardless of configuration

 
 By default the framework nulls out any components that do not have a refresh condition or are needed for
 collection processing. This can be a problem if custom application code is written to refresh a component
 without setting the corresponding component flag. In this case this property can be set to true to force the
 framework to keep the component in session. Defaults to false
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="valign" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.MessageField" xml:lang="en"><![CDATA[Vertical alignment of the component within its container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how the component
 should be aligned vertically within the container. During the finalize
 phase the CSS vertical-align style will be created for the valign
 setting.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="progressiveRenderViaAJAX" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.MessageField" xml:lang="en"><![CDATA[When progressiveRenderViaAJAX is true, this component will be retrieved from the server when
 it first satisfies its progressive render condition.
 
 
 After the first retrieval, it is hidden/shown in the html by the js when its progressive
 condition result changes. By default, this is false, so components with progressive render
 capabilities will always be already within the client html and toggled to be hidden or
 visible.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onFocusScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.MessageField" xml:lang="en"><![CDATA[Script that should be executed when the component's onFocus event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="cssClasses" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.MessageField" xml:lang="en"><![CDATA[CSS style class(s) to be applied to the component

 
 Declares style classes for the component. Multiple classes are specified
 with a space delimiter. This is used by the renderer to set the class
 attribute on the corresponding element. The class(s) declared must be
 available in the common style sheets or the style sheets specified for
 the view
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="templateName" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.field.MessageField" xml:lang="en"><![CDATA[The name for which the template can be invoked by

 
 Whether the template name is needed depends on the underlying rendering engine being used. In the example of
 Freemarker, the template points to the actual source file, which then loads a macro. From then on the macro is
 simply invoked to execute the template
 

 
 e.g. 'uif_text'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="unbounded" minOccurs="0" ref="spring:property"/>
          <xsd:element maxOccurs="unbounded" minOccurs="0" ref="property"/>
        </xsd:choice>
        <xsd:attribute name="messageText">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.MessageField" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="messageComponentStructure">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.MessageField" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="label">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.MessageField" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="shortLabel">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.MessageField" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="inlineComponents">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.MessageField" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="labelColSpan">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.MessageField" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="labelStyleClasses">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.MessageField" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="labelRendered">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.field.MessageField" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:anyAttribute processContents="skip"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="page-mixedType">
    <xsd:complexContent>
      <xsd:extension base="page-type">
        <xsd:choice maxOccurs="1" minOccurs="0">
          <xsd:element ref="documentPage"/>
          <xsd:element ref="page"/>
          <xsd:element ref="maintenancePage"/>
          <xsd:element ref="inquiryPage"/>
        </xsd:choice>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="maintenanceView-type">
    <xsd:complexContent>
      <xsd:extension base="componentAttributes-type">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element maxOccurs="1" minOccurs="0" name="applicationHeader" type="org.kuali.rice.krad.uif.element.Header">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="stateObjectBindingPath" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="additionalComponentsToRefresh" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="displayTopicFieldInNotes" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[Gets boolean that indicates if the document view displays the topic field in notes]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="documentClass" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[Gets the document class]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="viewHelperService" type="org.kuali.rice.krad.uif.service.ViewHelperService">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="refreshBlockUI" type="org.kuali.rice.krad.uif.widget.BlockUI">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="breadcrumbOptions" type="org.kuali.rice.krad.uif.util.BreadcrumbOptions">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:choice maxOccurs="1" minOccurs="0">
            <xsd:element ref="help"/>
          </xsd:choice>
          <xsd:element maxOccurs="1" minOccurs="0" name="selfRendered" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[Indicates whether the component contains its own render output (through
 the renderOutput property)

 
 If self rendered is true, the corresponding template for the component
 will not be invoked and the renderOutput String will be written to the
 response as is.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element ref="page"/>
          <xsd:element maxOccurs="1" minOccurs="0" name="topGroup" type="org.kuali.rice.krad.uif.container.Group">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="resetDataOnRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onKeyDownScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[Script that should be executed when the component's onKeyDown event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="template" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[The path to the JSP file that should be called to render the component

 
 The path should be relative to the web root. An attribute will be available to the component to use under the
 name given by the method getComponentTypeName. Based on the component type, additional attributes could
 be available for use. See the component documentation for more information on such attributes.
 

 
 e.g. '/krad/WEB-INF/jsp/tiles/component.jsp'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="expressionVariables">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:mapType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="validateServerSide" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[Indicates whether to perform the validate model phase of the view
 lifecycle. This phase will validate the model against configured
 dictionary validations and report errors. Defaults to true]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseDownScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseDown event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:choice maxOccurs="1" minOccurs="0">
            <xsd:element ref="pageHeader"/>
            <xsd:element ref="header"/>
            <xsd:element ref="headerSix"/>
            <xsd:element ref="headerTwo"/>
            <xsd:element ref="sectionHeader"/>
            <xsd:element ref="headerOne"/>
            <xsd:element ref="headerFive"/>
            <xsd:element ref="subCollectionHeader"/>
            <xsd:element ref="headerThree"/>
            <xsd:element ref="subSectionHeader"/>
            <xsd:element ref="headerFour"/>
            <xsd:element ref="viewHeader"/>
          </xsd:choice>
          <xsd:element maxOccurs="1" minOccurs="0" name="objectPathConcreteClassMapping">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:mapType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onLoadScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[Script that should be executed when the component's onLoad event is fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="viewHelperServiceClass" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="finalizeMethodInvoker" type="org.kuali.rice.krad.uif.component.MethodInvokerConfig">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[MethodInvokerConfig instance for the method that should be invoked
 for finalizing the component configuration

 
 MethodInvoker can be configured to specify the class or object the method
 should be called on. For static method invocations, the targetClass
 property can be configured. For object invocations, that targetObject
 property can be configured
 

 
 If the component is selfRendered, the finalize method can return a string which
 will be set as the component's renderOutput. The selfRendered indicator will also
 be set to true on the component.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="actionFlags" type="java.util.Map">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="componentCode" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="headertext" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="propertyReplacers">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[gets a list of PropertyReplacer instances

 They will be evaluated
 during the view lifecycle to conditionally set properties on the
 Component based on expression evaluations]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="org.kuali.rice.krad.uif.component.PropertyReplacer">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="defaultItemPosition" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="instructionalText" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseUpScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseUp event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:choice maxOccurs="1" minOccurs="0">
            <xsd:element ref="pageValidationMessages"/>
            <xsd:element ref="fieldValidationMessages"/>
            <xsd:element ref="groupValidationMessages"/>
            <xsd:element ref="validationMessages"/>
          </xsd:choice>
          <xsd:element maxOccurs="1" minOccurs="0" name="onKeyUpScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[Script that should be executed when the component's onKeyUp event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="attachmentTypesValuesFinderClass" type="java.lang.Class">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[Gets attachment types values finder classs]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="formPostUrl" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[Specifies the URL the view's form should post to

 
 Any valid form post URL (full or relative) can be specified. If left
 empty, the form will be posted to the same URL of the preceding request
 URL.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="singlePageView" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onCloseScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[Script that should be executed when the component's onClose event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="entryPageId" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="authorizer" type="org.kuali.rice.krad.uif.view.ViewAuthorizer">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="title" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[The component title

 
 Depending on the component can be used in various ways. For example with a Container component the title is
 used to set the header text. For components like controls other other components that render an HTML element it
 is used to set the HTML title attribute.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="finalizeMethodAdditionalArguments" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[The List of Object instances that should be passed as arguments to the finalize method

 
 These arguments are passed to the finalize method after the standard model and component
 arguments. They are passed in the order declared in the list
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onSubmitScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[Script that should be executed when the component's onSubmit event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="rowSpan" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[Number of places the component should take up vertically in the container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how many places
 vertically the component should take up within the container. This is
 only applicable for table based layout managers. Default is 1
 

 TODO: this should not be on component interface since it only applies if
 the layout manager supports it, need some sort of layoutOptions map for
 field level options that depend on the manager]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="namespaceCode" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="progressiveRender" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[When set if the condition is satisfied, the component will be displayed. The component MUST
 BE a container or field type. progressiveRender is defined in a limited Spring EL syntax.
 Only valid form property names, and, or, logical comparison operators (non-arithmetic),
 #listContains, #emptyList, matches clause are allowed. String and regex values must use
 single quotes ('), booleans must be either true or false, numbers must be a valid double,
 either negative or positive.
 
 
 DO NOT use progressiveRender and a conditional refresh statement on the same component unless
 it is known that the component will always be visible in all cases when a conditional refresh
 happens (ie conditional refresh has progressiveRender's condition anded with its own
 condition).
 
 
 
 If a component should be refreshed every time it is shown, use the
 progressiveRenderAndRefresh option with this property instead.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="templateOptionsJSString" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[Builds a string from the underlying Map of template options that will export
 that options as a JavaScript Map for use in js and jQuery plugins]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="dialogs">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="org.kuali.rice.krad.uif.container.Group">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:choice maxOccurs="1" minOccurs="0">
            <xsd:element ref="tooltip"/>
            <xsd:element ref="tooltipFocus"/>
            <xsd:element ref="tooltipHelp"/>
          </xsd:choice>
          <xsd:element maxOccurs="1" minOccurs="0" name="preContent">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:sequence>
                <xsd:any minOccurs="0" processContents="skip"/>
              </xsd:sequence>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="theme" type="org.kuali.rice.krad.uif.view.ViewTheme">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="dataAttributes">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[Get the dataAttributes setup for this component - to be written to the html/jQuery data
 
 
 The attributes that are complex objects (contain {}) they will be written through script. The
 attritubes that are simple (contain no objects) will be written directly to the html of the
 component using standard data-. Either way they can be access through .data() call in jQuery
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:mapType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element ref="footer"/>
          <xsd:element maxOccurs="1" minOccurs="0" name="preLoadScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:choice maxOccurs="1" minOccurs="0">
            <xsd:element ref="tableLayout"/>
            <xsd:element ref="listLayout"/>
            <xsd:element ref="orderedListLayout"/>
            <xsd:element ref="cssGridLayout"/>
            <xsd:element ref="fourColumnGridLayout"/>
            <xsd:element ref="gridLayout"/>
            <xsd:element ref="sixColumnGridLayout"/>
            <xsd:element ref="twoColumnGridLayout"/>
            <xsd:element ref="cssGridLabelColumnLayout"/>
            <xsd:element ref="cssGridLayoutBase"/>
            <xsd:element ref="stackedLayout"/>
            <xsd:element ref="stackedLayoutGridItems"/>
            <xsd:element ref="stackedLayoutList"/>
            <xsd:element ref="stackedLayoutBoxItems"/>
            <xsd:element ref="boxLayout"/>
            <xsd:element ref="horizontalBoxLayout"/>
            <xsd:element ref="verticalBoxLayout"/>
            <xsd:element maxOccurs="1" minOccurs="0" name="layoutManager" type="org.kuali.rice.krad.uif.layout.LayoutManager"/>
          </xsd:choice>
          <xsd:element maxOccurs="1" minOccurs="0" name="viewName" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="readOnly" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[Indicates whether the component can be edited

 
 When readOnly the controls and widgets of Field components
 will not be rendered. If the Field has an underlying value it will be
 displayed readOnly to the user.
 

 
 For a Container component, the readOnly setting will apply
 to all contained components (making a section readOnly makes all fields
 within the section readOnly).
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseMoveScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseMove event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="viewMenuLink" type="org.kuali.rice.krad.uif.element.Link">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="skipInTabOrder" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[Flag indicating that this component and its nested components must be skipped when keyboard
 tabbing.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="stickyHeader" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="maintenanceAction" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[Indicates what maintenance action (new, edit, copy) was
 requested]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="progressiveRenderViaAJAX" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[When progressiveRenderViaAJAX is true, this component will be retrieved from the server when
 it first satisfies its progressive render condition.
 
 
 After the first retrieval, it is hidden/shown in the html by the js when its progressive
 condition result changes. By default, this is false, so components with progressive render
 capabilities will always be already within the client html and toggled to be hidden or
 visible.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onFocusScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[Script that should be executed when the component's onFocus event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="stickyTopGroup" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onChangeScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[Script that should be executed when the component's onChange event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onKeyPressScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[Script that should be executed when the component's onKeyPress event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="stateMapping" type="org.kuali.rice.krad.datadictionary.state.StateMapping">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="defaultObjectPath" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="refreshTimer" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[Time in seconds that the component will be automatically refreshed
 
 
 This will invoke the refresh process just like the conditionalRefresh and
 refreshWhenChangedPropertyNames. When using this property methodToCallOnRefresh and id should
 also be specified
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="disableSessionPersistence" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[Disables the storage of the component in session (when the framework determines it needs to be due to a
 refresh condition)

 
 When the framework determines there is a condition on the component that requires it to keep around between
 posts, it will store the component instance in session. This flag can be set to disable this behavior (which
 would require custom application logic to support behavior such as refresh)
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onDblClickScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[Script that should be executed when the component's onDblClick event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="viewIndex" type="org.kuali.rice.krad.uif.view.ViewIndex">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="breadcrumbItem" type="org.kuali.rice.krad.uif.util.BreadcrumbItem">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="viewTypeName" type="xsd:anyType">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onBlurScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[Script that should be executed when the component's onBlur event is fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="colSpan" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[Number of places the component should take up horizontally in the
 container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how many places
 horizontally the component should take up within the container. This is
 only applicable for table based layout managers. Default is 1
 

 TODO: this should not be on component interface since it only applies if
 the layout manager supports it, need some sort of layoutOptions map for
 field level options that depend on the manager]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="additionalCssClasses" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[Convenience property for adding css class names to the end of the list of cssClasses that may already exist on
 this Component (this is to avoid explicitly having to set list merge in the bean definition)]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="navigationBlockUI" type="org.kuali.rice.krad.uif.widget.BlockUI">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="required" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[Indicates whether the component is required

 
 At the general component level required means there is some action the
 user needs to take within the component. For example, within a section it
 might mean the fields within the section should be completed. At a field
 level, it means the field should be completed. This provides the ability
 for the renderers to indicate the required action.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="renderForm" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[Indicates whether a Form element should be rendered for the View. This is
 necessary for pages that need to submit data back to the server. Note
 that even if a page is read-only, a form element is generally needed for
 the navigation. Defaults to true]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="finalizeMethodToCall" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[The name of the method that should be invoked for finalizing the component
 configuration (full method name, without parameters or return type)

 
 Note the method can also be set with the finalizeMethodInvoker
 targetMethod property. If the method is on the configured
 ViewHelperService, only this property needs to be configured
 

 
 The model backing the view will be passed as the first argument method and then
 the Component instance as the second argument. If any additional method
 arguments are declared with the finalizeMethodAdditionalArguments, they will then
 be passed in the order declared in the list
 

 
 If the component is selfRendered, the finalize method can return a string which
 will be set as the component's renderOutput. The selfRendered indicator will also
 be set to true on the component.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="allowsNoteFYI" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[Gets boolean that indicates if the document view allows note FYI]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="align" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[Horizontal alignment of the component within its container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how the component
 should be aligned horizontally within the container. During the finalize
 phase the CSS text-align style will be created for the align setting.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="width" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[Width the component should take up in the container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies a width the component
 should take up in the Container. This is not applicable for all layout
 managers. During the finalize phase the CSS width style will be created
 for the width setting.
 

 
 e.g. '30%', '55px'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="stickyBreadcrumbs" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="postContent">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:sequence>
                <xsd:any minOccurs="0" processContents="skip"/>
              </xsd:sequence>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onClickScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[Script that should be executed when the component's onClick event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="render" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[Indicates whether the component should be rendered in the UI

 
 If set to false, the corresponding component template will not be invoked
 (therefore nothing will be rendered to the UI).
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="stickyApplicationFooter" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="methodToCallOnRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[Name of a method on the controller that should be invoked as part of the component refresh
 and disclosure process
 
 
 During the component refresh or disclosure process it might be necessary to perform other
 operations, such as preparing data or executing a business process. This allows the
 configuration of a method on the underlying controller that should be called for the
 component refresh action. In this method, the necessary logic can be performed and then the
 base component update method invoked to carry out the component refresh.
 
 
 
 Controller method to invoke must accept the form, binding result, request, and response
 arguments
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="formClass" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="validateClientSide" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[Indicates whether to perform on-the-fly validation on the client using js
 during user data entry. Defaults to true]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="navigation" type="org.kuali.rice.krad.uif.container.Group">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="items">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:listOrSetType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="presentationController" type="org.kuali.rice.krad.uif.view.ViewPresentationController">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="componentModifiers">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[ComponentModifier instances that should be invoked to
 initialize the component

 
 These provide dynamic initialization behavior for the component and are
 configured through the components definition. Each initializer will get
 invoked by the initialize method.
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="org.kuali.rice.krad.uif.modifier.ComponentModifier">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="oldObjectBindingPath" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[Gives the binding path to the old object (record being edited) to display
 for comparison]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="stickyFooter" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="applicationFooter" type="org.kuali.rice.krad.uif.container.Group">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onDocumentReadyScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[Script to be run when the document ready event is triggered]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="refreshWhenChangedPropertyNames" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="allowsNoteAttachments" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[Gets boolean that indicates if the document view allows note attachments]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="unifiedHeader" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="renderedHtmlOutput" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[Rendering output for the component that will be sent as part of the
 response (can contain static text and HTML)]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="dataObjectClassName" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[Class name for the object the maintenance document applies to

 
 The object class name is used to pick up a dictionary entry which will
 feed the attribute field definitions and other configuration. In addition
 it is used to configure the Maintainable which will carry
 out the maintenance action
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="translateCodesOnReadOnlyDisplay" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="breadcrumbs" type="org.kuali.rice.krad.uif.widget.Breadcrumbs">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="id" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[The unique id (within a given tree) for the element.

 The id is used to identify an element instance within the tree, and
 will be used by renderers to set the HTML element id. This gives a way to find various elements
 for scripting. If the id is not given, a default will be generated by the framework.
 

 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="supportsRequestOverrideOfReadOnlyFields" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="order" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[Order of a component within a List of other components

 Lower numbers are placed higher up in the list, while higher numbers are placed
 lower in the list]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="style" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[CSS style string to be applied to the component

 
 Any style override or additions can be specified with this attribute.
 This is used by the renderer to set the style attribute on the
 corresponding element.
 

 
 e.g. 'color: #000000;text-decoration: underline;'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="applyDirtyCheck" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="conditionalRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[When set if the condition is satisfied, the component will be refreshed.
 
 
 The component MUST BE a container or field type. conditionalRefresh is defined in a limited
 Spring EL syntax. Only valid form property names, and, or, logical comparison operators
 (non-arithmetic), #listContains, #emptyList, and the matches clause are allowed. String and
 regex values must use single quotes ('), booleans must be either true or false, numbers must
 be a valid double either negative or positive.
 
 
 DO NOT use progressiveRender and conditionalRefresh on the same component unless it is known
 that the component will always be visible in all cases when a conditionalRefresh happens (ie
 conditionalRefresh has progressiveRender's condition anded with its own condition). If a
 component should be refreshed every time it is shown, use the progressiveRenderAndRefresh
 option with this property instead.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="additionalCssFiles" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="retrieveViaAjax" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[When true, this component will render as a placeholder component instead of rendering normally because the
 content will be later retrieved through manually ajax retrieval calls in the js

 This flag does not imply any automation, there must be a js call invoked for the content to be retrieved
 by the server, but this does mark it with a placeholder component which KRAD js uses during these calls.
 This placeholder component is used for ajax retrievals.  In particular, this flag is useful for use in
 combination with the showLightboxComponent js function which will automatically retrieve the
 real content of a component through ajax if a placeholder component is detected.  This allows for the full
 content to only be retrieved when the lightbox is first opened.
 When this flag is set to true, the forceSessionPersistence
 flag is set to true AUTOMATICALLY because it is implied that this component will be retrieved by an ajax call
 in the future.  This may also be useful for direct custom calls to retrieveComponent function,
 as well, which also relies on the placeholder being present.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="growlMessagingEnabled" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseOutScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseOut event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="templateOptions">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[The options that are passed through to the Component renderer

 
 The Map key is the option name, with the Map value as the option value. See
 documentation on the particular widget render for available options.
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:mapType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="editModes" type="java.util.Map">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseOverScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseOver event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="additionalScriptFiles" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="stickyApplicationHeader" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="parentLocation" type="org.kuali.rice.krad.uif.util.ParentLocation">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="growls" type="org.kuali.rice.krad.uif.widget.Growls">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:choice maxOccurs="1" minOccurs="0">
            <xsd:element ref="fieldSecurity"/>
            <xsd:element ref="dataFieldSecurity"/>
            <xsd:element ref="actionSecurity"/>
            <xsd:element ref="collectionGroupSecurity"/>
            <xsd:element ref="componentSecurity"/>
          </xsd:choice>
          <xsd:element maxOccurs="1" minOccurs="0" name="progressiveRenderAndRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[If true, when the progressiveRender condition is satisfied, the component will always be
 retrieved from the server and shown(as opposed to being stored on the client, but hidden,
 after the first retrieval as is the case with the progressiveRenderViaAJAX option).
 
 
 By default, this is false, so components with progressive render capabilities will always
 be already within the client html and toggled to be hidden or visible.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="persistFormToSession" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="hidden" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[Indicates whether the component should be hidden in the UI

 
 How the hidden data is maintained depends on the views persistence mode.
 If the mode is request, the corresponding data will be rendered to the UI
 but not visible. If the mode is session, the data will not be rendered to
 the UI but maintained server side.
 

 
 For a Container component, the hidden setting will apply to
 all contained components (making a section hidden makes all fields within
 the section hidden)
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="context">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[Context map for the component

 
 Any el statements configured for the components properties (e.g.
 title="@{foo.property}") are evaluated using the el context map. This map
 will get populated with default objects like the model, view, and request
 from the ViewHelperService. Other components can push
 further objects into the context so that they are available for use with
 that component. For example, Field instances that are part
 of a collection line as receive the current line instance
 

 
 Context map also provides objects to methods that are invoked for
 GeneratedField instances
 

 
 The Map key gives the name of the variable that can be used within
 expressions, and the Map value gives the object instance for which
 expressions containing the variable should evaluate against
 

 
 NOTE: Calling getContext().putAll() will skip updating any configured property replacers for the
 component. Instead you should call #pushAllToContext
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:mapType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onUnloadScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[Script that should be executed when the component's onUnload event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="forceSessionPersistence" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[Indicates whether the component should be stored with the session view regardless of configuration

 
 By default the framework nulls out any components that do not have a refresh condition or are needed for
 collection processing. This can be a problem if custom application code is written to refresh a component
 without setting the corresponding component flag. In this case this property can be set to true to force the
 framework to keep the component in session. Defaults to false
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="valign" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[Vertical alignment of the component within its container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how the component
 should be aligned vertically within the container. During the finalize
 phase the CSS vertical-align style will be created for the valign
 setting.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="viewMenuGroupName" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="instructionalMessage" type="org.kuali.rice.krad.uif.element.Message">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="templateName" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[The name for which the template can be invoked by

 
 Whether the template name is needed depends on the underlying rendering engine being used. In the example of
 Freemarker, the template points to the actual source file, which then loads a macro. From then on the macro is
 simply invoked to execute the template
 

 
 e.g. 'uif_text'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="cssClasses" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[CSS style class(s) to be applied to the component

 
 Declares style classes for the component. Multiple classes are specified
 with a space delimiter. This is used by the renderer to set the class
 attribute on the corresponding element. The class(s) declared must be
 available in the common style sheets or the style sheets specified for
 the view
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="unbounded" minOccurs="0" ref="spring:property"/>
          <xsd:element maxOccurs="unbounded" minOccurs="0" ref="property"/>
        </xsd:choice>
        <xsd:attribute name="stateObjectBindingPath">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="displayTopicFieldInNotes">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[Gets boolean that indicates if the document view displays the topic field in notes]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="documentClass">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[Gets the document class]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="expressionVariables">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="validateServerSide">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[Indicates whether to perform the validate model phase of the view
 lifecycle. This phase will validate the model against configured
 dictionary validations and report errors. Defaults to true]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="objectPathConcreteClassMapping">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="viewHelperServiceClass">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="headertext">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="defaultItemPosition">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="instructionalText">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="formPostUrl">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[Specifies the URL the view's form should post to

 
 Any valid form post URL (full or relative) can be specified. If left
 empty, the form will be posted to the same URL of the preceding request
 URL.
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="singlePageView">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="entryPageId">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="preLoadScript">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="viewName">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="stickyHeader">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="maintenanceAction">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[Indicates what maintenance action (new, edit, copy) was
 requested]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="stickyTopGroup">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="defaultObjectPath">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="renderForm">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[Indicates whether a Form element should be rendered for the View. This is
 necessary for pages that need to submit data back to the server. Note
 that even if a page is read-only, a form element is generally needed for
 the navigation. Defaults to true]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="allowsNoteFYI">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[Gets boolean that indicates if the document view allows note FYI]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="stickyBreadcrumbs">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="stickyApplicationFooter">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="formClass">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="validateClientSide">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[Indicates whether to perform on-the-fly validation on the client using js
 during user data entry. Defaults to true]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="oldObjectBindingPath">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[Gives the binding path to the old object (record being edited) to display
 for comparison]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="stickyFooter">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="allowsNoteAttachments">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[Gets boolean that indicates if the document view allows note attachments]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="unifiedHeader">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="dataObjectClassName">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[Class name for the object the maintenance document applies to

 
 The object class name is used to pick up a dictionary entry which will
 feed the attribute field definitions and other configuration. In addition
 it is used to configure the Maintainable which will carry
 out the maintenance action
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="translateCodesOnReadOnlyDisplay">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="supportsRequestOverrideOfReadOnlyFields">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="applyDirtyCheck">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="additionalCssFiles">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="growlMessagingEnabled">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="additionalScriptFiles">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="stickyApplicationHeader">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="persistFormToSession">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="viewMenuGroupName">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.view.MaintenanceDocumentView" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:anyAttribute processContents="skip"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="header-type">
    <xsd:complexContent>
      <xsd:extension base="componentAttributes-type">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element maxOccurs="1" minOccurs="0" name="onChangeScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Header" xml:lang="en"><![CDATA[Script that should be executed when the component's onChange event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onKeyPressScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Header" xml:lang="en"><![CDATA[Script that should be executed when the component's onKeyPress event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="headerTagStyle" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Header" xml:lang="en"><![CDATA[Style that should be applied to the header h tag

 
 Note the style given here applies to only the header text. The style
 property inherited from the Component interface can be used
 to set the style for the whole header div (which could include a nested
 Group)
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="refreshTimer" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Header" xml:lang="en"><![CDATA[Time in seconds that the component will be automatically refreshed
 
 
 This will invoke the refresh process just like the conditionalRefresh and
 refreshWhenChangedPropertyNames. When using this property methodToCallOnRefresh and id should
 also be specified
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="disableSessionPersistence" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Header" xml:lang="en"><![CDATA[Disables the storage of the component in session (when the framework determines it needs to be due to a
 refresh condition)

 
 When the framework determines there is a condition on the component that requires it to keep around between
 posts, it will store the component instance in session. This flag can be set to disable this behavior (which
 would require custom application logic to support behavior such as refresh)
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onDblClickScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Header" xml:lang="en"><![CDATA[Script that should be executed when the component's onDblClick event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="additionalComponentsToRefresh" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Header" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onBlurScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Header" xml:lang="en"><![CDATA[Script that should be executed when the component's onBlur event is fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="rightGroup" type="org.kuali.rice.krad.uif.container.Group">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Header" xml:lang="en"><![CDATA[Nested group instance that can be used to render contents to the right of the header text

 
 The header group is useful for adding content such as links or actions that is presented with the header
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="selfRendered" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Header" xml:lang="en"><![CDATA[Indicates whether the component contains its own render output (through
 the renderOutput property)

 
 If self rendered is true, the corresponding template for the component
 will not be invoked and the renderOutput String will be written to the
 response as is.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="colSpan" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Header" xml:lang="en"><![CDATA[Number of places the component should take up horizontally in the
 container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how many places
 horizontally the component should take up within the container. This is
 only applicable for table based layout managers. Default is 1
 

 TODO: this should not be on component interface since it only applies if
 the layout manager supports it, need some sort of layoutOptions map for
 field level options that depend on the manager]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="additionalCssClasses" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Header" xml:lang="en"><![CDATA[Convenience property for adding css class names to the end of the list of cssClasses that may already exist on
 this Component (this is to avoid explicitly having to set list merge in the bean definition)]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="lowerGroup" type="org.kuali.rice.krad.uif.container.Group">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Header" xml:lang="en"><![CDATA[Nested group instance that can be used to render contents below the header text

 
 The header group is useful for adding content such as links or actions that is presented with the header
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="upperGroup" type="org.kuali.rice.krad.uif.container.Group">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Header" xml:lang="en"><![CDATA[Nested group instance that can be used to render contents above the header text

 
 The header group is useful for adding content such as links or actions that is presented with the header
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="required" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Header" xml:lang="en"><![CDATA[Indicates whether the component is required

 
 At the general component level required means there is some action the
 user needs to take within the component. For example, within a section it
 might mean the fields within the section should be completed. At a field
 level, it means the field should be completed. This provides the ability
 for the renderers to indicate the required action.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="finalizeMethodToCall" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Header" xml:lang="en"><![CDATA[The name of the method that should be invoked for finalizing the component
 configuration (full method name, without parameters or return type)

 
 Note the method can also be set with the finalizeMethodInvoker
 targetMethod property. If the method is on the configured
 ViewHelperService, only this property needs to be configured
 

 
 The model backing the view will be passed as the first argument method and then
 the Component instance as the second argument. If any additional method
 arguments are declared with the finalizeMethodAdditionalArguments, they will then
 be passed in the order declared in the list
 

 
 If the component is selfRendered, the finalize method can return a string which
 will be set as the component's renderOutput. The selfRendered indicator will also
 be set to true on the component.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="richHeaderMessage" type="org.kuali.rice.krad.uif.element.Message">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Header" xml:lang="en"><![CDATA[Gets the Message that represents the rich message content of the header if headerText is using rich message
 tags.
 DO NOT set this
 property directly unless you need full control over the message structure.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="resetDataOnRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Header" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onKeyDownScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Header" xml:lang="en"><![CDATA[Script that should be executed when the component's onKeyDown event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="template" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Header" xml:lang="en"><![CDATA[The path to the JSP file that should be called to render the component

 
 The path should be relative to the web root. An attribute will be available to the component to use under the
 name given by the method getComponentTypeName. Based on the component type, additional attributes could
 be available for use. See the component documentation for more information on such attributes.
 

 
 e.g. '/krad/WEB-INF/jsp/tiles/component.jsp'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="align" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Header" xml:lang="en"><![CDATA[Horizontal alignment of the component within its container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how the component
 should be aligned horizontally within the container. During the finalize
 phase the CSS text-align style will be created for the align setting.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseDownScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Header" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseDown event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="width" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Header" xml:lang="en"><![CDATA[Width the component should take up in the container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies a width the component
 should take up in the Container. This is not applicable for all layout
 managers. During the finalize phase the CSS width style will be created
 for the width setting.
 

 
 e.g. '30%', '55px'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="headerTagCssClasses" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Header" xml:lang="en"><![CDATA[Style classes that should be applied to the header text (h tag)

 
 Note the style class given here applies to only the header text. The
 style class property inherited from the Component interface
 can be used to set the class for the whole field div (which could
 include a nested Group)
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="postContent">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Header" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:sequence>
                <xsd:any minOccurs="0" processContents="skip"/>
              </xsd:sequence>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onClickScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Header" xml:lang="en"><![CDATA[Script that should be executed when the component's onClick event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="render" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Header" xml:lang="en"><![CDATA[Indicates whether the component should be rendered in the UI

 
 If set to false, the corresponding component template will not be invoked
 (therefore nothing will be rendered to the UI).
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onLoadScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Header" xml:lang="en"><![CDATA[Script that should be executed when the component's onLoad event is fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="methodToCallOnRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Header" xml:lang="en"><![CDATA[Name of a method on the controller that should be invoked as part of the component refresh
 and disclosure process
 
 
 During the component refresh or disclosure process it might be necessary to perform other
 operations, such as preparing data or executing a business process. This allows the
 configuration of a method on the underlying controller that should be called for the
 component refresh action. In this method, the necessary logic can be performed and then the
 base component update method invoked to carry out the component refresh.
 
 
 
 Controller method to invoke must accept the form, binding result, request, and response
 arguments
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="finalizeMethodInvoker" type="org.kuali.rice.krad.uif.component.MethodInvokerConfig">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Header" xml:lang="en"><![CDATA[MethodInvokerConfig instance for the method that should be invoked
 for finalizing the component configuration

 
 MethodInvoker can be configured to specify the class or object the method
 should be called on. For static method invocations, the targetClass
 property can be configured. For object invocations, that targetObject
 property can be configured
 

 
 If the component is selfRendered, the finalize method can return a string which
 will be set as the component's renderOutput. The selfRendered indicator will also
 be set to true on the component.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="items">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Header" xml:lang="en"><![CDATA[List of Component instances contained in the lower header group

 
 Convenience method for configuration to get the items List from the
 lower header group
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:listOrSetType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="componentModifiers">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Header" xml:lang="en"><![CDATA[ComponentModifier instances that should be invoked to
 initialize the component

 
 These provide dynamic initialization behavior for the component and are
 configured through the components definition. Each initializer will get
 invoked by the initialize method.
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="org.kuali.rice.krad.uif.modifier.ComponentModifier">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="componentCode" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Header" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="headerText" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Header" xml:lang="en"><![CDATA[Text that should be displayed on the header]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onDocumentReadyScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Header" xml:lang="en"><![CDATA[Script to be run when the document ready event is triggered]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="propertyReplacers">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Header" xml:lang="en"><![CDATA[gets a list of PropertyReplacer instances

 They will be evaluated
 during the view lifecycle to conditionally set properties on the
 Component based on expression evaluations]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="org.kuali.rice.krad.uif.component.PropertyReplacer">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="refreshWhenChangedPropertyNames" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Header" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseUpScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Header" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseUp event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onKeyUpScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Header" xml:lang="en"><![CDATA[Script that should be executed when the component's onKeyUp event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="renderedHtmlOutput" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Header" xml:lang="en"><![CDATA[Rendering output for the component that will be sent as part of the
 response (can contain static text and HTML)]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="inlineComponents">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Header" xml:lang="en"><![CDATA[Gets the inlineComponents used by index in a Header that has rich message component index tags in its headerText]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="org.kuali.rice.krad.uif.component.Component">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="headerLevel" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Header" xml:lang="en"><![CDATA[HTML header level (h1 ... h6) that should be applied to the header text]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onCloseScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Header" xml:lang="en"><![CDATA[Script that should be executed when the component's onClose event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="id" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Header" xml:lang="en"><![CDATA[The unique id (within a given tree) for the element.

 The id is used to identify an element instance within the tree, and
 will be used by renderers to set the HTML element id. This gives a way to find various elements
 for scripting. If the id is not given, a default will be generated by the framework.
 

 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="title" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Header" xml:lang="en"><![CDATA[The component title

 
 Depending on the component can be used in various ways. For example with a Container component the title is
 used to set the header text. For components like controls other other components that render an HTML element it
 is used to set the HTML title attribute.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="order" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Header" xml:lang="en"><![CDATA[Order of a component within a List of other components

 Lower numbers are placed higher up in the list, while higher numbers are placed
 lower in the list]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="style" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Header" xml:lang="en"><![CDATA[CSS style string to be applied to the component

 
 Any style override or additions can be specified with this attribute.
 This is used by the renderer to set the style attribute on the
 corresponding element.
 

 
 e.g. 'color: #000000;text-decoration: underline;'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="finalizeMethodAdditionalArguments" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Header" xml:lang="en"><![CDATA[The List of Object instances that should be passed as arguments to the finalize method

 
 These arguments are passed to the finalize method after the standard model and component
 arguments. They are passed in the order declared in the list
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="conditionalRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Header" xml:lang="en"><![CDATA[When set if the condition is satisfied, the component will be refreshed.
 
 
 The component MUST BE a container or field type. conditionalRefresh is defined in a limited
 Spring EL syntax. Only valid form property names, and, or, logical comparison operators
 (non-arithmetic), #listContains, #emptyList, and the matches clause are allowed. String and
 regex values must use single quotes ('), booleans must be either true or false, numbers must
 be a valid double either negative or positive.
 
 
 DO NOT use progressiveRender and conditionalRefresh on the same component unless it is known
 that the component will always be visible in all cases when a conditionalRefresh happens (ie
 conditionalRefresh has progressiveRender's condition anded with its own condition). If a
 component should be refreshed every time it is shown, use the progressiveRenderAndRefresh
 option with this property instead.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onSubmitScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Header" xml:lang="en"><![CDATA[Script that should be executed when the component's onSubmit event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="rowSpan" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Header" xml:lang="en"><![CDATA[Number of places the component should take up vertically in the container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how many places
 vertically the component should take up within the container. This is
 only applicable for table based layout managers. Default is 1
 

 TODO: this should not be on component interface since it only applies if
 the layout manager supports it, need some sort of layoutOptions map for
 field level options that depend on the manager]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="retrieveViaAjax" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Header" xml:lang="en"><![CDATA[When true, this component will render as a placeholder component instead of rendering normally because the
 content will be later retrieved through manually ajax retrieval calls in the js

 This flag does not imply any automation, there must be a js call invoked for the content to be retrieved
 by the server, but this does mark it with a placeholder component which KRAD js uses during these calls.
 This placeholder component is used for ajax retrievals.  In particular, this flag is useful for use in
 combination with the showLightboxComponent js function which will automatically retrieve the
 real content of a component through ajax if a placeholder component is detected.  This allows for the full
 content to only be retrieved when the lightbox is first opened.
 When this flag is set to true, the forceSessionPersistence
 flag is set to true AUTOMATICALLY because it is implied that this component will be retrieved by an ajax call
 in the future.  This may also be useful for direct custom calls to retrieveComponent function,
 as well, which also relies on the placeholder being present.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="namespaceCode" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Header" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="progressiveRender" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Header" xml:lang="en"><![CDATA[When set if the condition is satisfied, the component will be displayed. The component MUST
 BE a container or field type. progressiveRender is defined in a limited Spring EL syntax.
 Only valid form property names, and, or, logical comparison operators (non-arithmetic),
 #listContains, #emptyList, matches clause are allowed. String and regex values must use
 single quotes ('), booleans must be either true or false, numbers must be a valid double,
 either negative or positive.
 
 
 DO NOT use progressiveRender and a conditional refresh statement on the same component unless
 it is known that the component will always be visible in all cases when a conditional refresh
 happens (ie conditional refresh has progressiveRender's condition anded with its own
 condition).
 
 
 
 If a component should be refreshed every time it is shown, use the
 progressiveRenderAndRefresh option with this property instead.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="templateOptionsJSString" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Header" xml:lang="en"><![CDATA[Builds a string from the underlying Map of template options that will export
 that options as a JavaScript Map for use in js and jQuery plugins]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseOutScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Header" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseOut event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="templateOptions">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Header" xml:lang="en"><![CDATA[The options that are passed through to the Component renderer

 
 The Map key is the option name, with the Map value as the option value. See
 documentation on the particular widget render for available options.
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:mapType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:choice maxOccurs="1" minOccurs="0">
            <xsd:element ref="tooltip"/>
            <xsd:element ref="tooltipFocus"/>
            <xsd:element ref="tooltipHelp"/>
          </xsd:choice>
          <xsd:element maxOccurs="1" minOccurs="0" name="preContent">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Header" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:sequence>
                <xsd:any minOccurs="0" processContents="skip"/>
              </xsd:sequence>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseOverScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Header" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseOver event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="dataAttributes">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Header" xml:lang="en"><![CDATA[Get the dataAttributes setup for this component - to be written to the html/jQuery data
 
 
 The attributes that are complex objects (contain {}) they will be written through script. The
 attritubes that are simple (contain no objects) will be written directly to the html of the
 component using standard data-. Either way they can be access through .data() call in jQuery
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:mapType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:choice maxOccurs="1" minOccurs="0">
            <xsd:element ref="fieldSecurity"/>
            <xsd:element ref="dataFieldSecurity"/>
            <xsd:element ref="actionSecurity"/>
            <xsd:element ref="collectionGroupSecurity"/>
            <xsd:element ref="componentSecurity"/>
          </xsd:choice>
          <xsd:element maxOccurs="1" minOccurs="0" name="readOnly" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Header" xml:lang="en"><![CDATA[Indicates whether the component can be edited

 
 When readOnly the controls and widgets of Field components
 will not be rendered. If the Field has an underlying value it will be
 displayed readOnly to the user.
 

 
 For a Container component, the readOnly setting will apply
 to all contained components (making a section readOnly makes all fields
 within the section readOnly).
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseMoveScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Header" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseMove event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="progressiveRenderAndRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Header" xml:lang="en"><![CDATA[If true, when the progressiveRender condition is satisfied, the component will always be
 retrieved from the server and shown(as opposed to being stored on the client, but hidden,
 after the first retrieval as is the case with the progressiveRenderViaAJAX option).
 
 
 By default, this is false, so components with progressive render capabilities will always
 be already within the client html and toggled to be hidden or visible.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="hidden" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Header" xml:lang="en"><![CDATA[Indicates whether the component should be hidden in the UI

 
 How the hidden data is maintained depends on the views persistence mode.
 If the mode is request, the corresponding data will be rendered to the UI
 but not visible. If the mode is session, the data will not be rendered to
 the UI but maintained server side.
 

 
 For a Container component, the hidden setting will apply to
 all contained components (making a section hidden makes all fields within
 the section hidden)
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="skipInTabOrder" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Header" xml:lang="en"><![CDATA[Flag indicating that this component and its nested components must be skipped when keyboard
 tabbing.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="context">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Header" xml:lang="en"><![CDATA[Context map for the component

 
 Any el statements configured for the components properties (e.g.
 title="@{foo.property}") are evaluated using the el context map. This map
 will get populated with default objects like the model, view, and request
 from the ViewHelperService. Other components can push
 further objects into the context so that they are available for use with
 that component. For example, Field instances that are part
 of a collection line as receive the current line instance
 

 
 Context map also provides objects to methods that are invoked for
 GeneratedField instances
 

 
 The Map key gives the name of the variable that can be used within
 expressions, and the Map value gives the object instance for which
 expressions containing the variable should evaluate against
 

 
 NOTE: Calling getContext().putAll() will skip updating any configured property replacers for the
 component. Instead you should call #pushAllToContext
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:mapType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onUnloadScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Header" xml:lang="en"><![CDATA[Script that should be executed when the component's onUnload event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="forceSessionPersistence" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Header" xml:lang="en"><![CDATA[Indicates whether the component should be stored with the session view regardless of configuration

 
 By default the framework nulls out any components that do not have a refresh condition or are needed for
 collection processing. This can be a problem if custom application code is written to refresh a component
 without setting the corresponding component flag. In this case this property can be set to true to force the
 framework to keep the component in session. Defaults to false
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="valign" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Header" xml:lang="en"><![CDATA[Vertical alignment of the component within its container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how the component
 should be aligned vertically within the container. During the finalize
 phase the CSS vertical-align style will be created for the valign
 setting.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="progressiveRenderViaAJAX" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Header" xml:lang="en"><![CDATA[When progressiveRenderViaAJAX is true, this component will be retrieved from the server when
 it first satisfies its progressive render condition.
 
 
 After the first retrieval, it is hidden/shown in the html by the js when its progressive
 condition result changes. By default, this is false, so components with progressive render
 capabilities will always be already within the client html and toggled to be hidden or
 visible.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onFocusScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Header" xml:lang="en"><![CDATA[Script that should be executed when the component's onFocus event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="cssClasses" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Header" xml:lang="en"><![CDATA[CSS style class(s) to be applied to the component

 
 Declares style classes for the component. Multiple classes are specified
 with a space delimiter. This is used by the renderer to set the class
 attribute on the corresponding element. The class(s) declared must be
 available in the common style sheets or the style sheets specified for
 the view
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="templateName" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Header" xml:lang="en"><![CDATA[The name for which the template can be invoked by

 
 Whether the template name is needed depends on the underlying rendering engine being used. In the example of
 Freemarker, the template points to the actual source file, which then loads a macro. From then on the macro is
 simply invoked to execute the template
 

 
 e.g. 'uif_text'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="unbounded" minOccurs="0" ref="spring:property"/>
          <xsd:element maxOccurs="unbounded" minOccurs="0" ref="property"/>
        </xsd:choice>
        <xsd:attribute name="headerTagStyle">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.element.Header" xml:lang="en"><![CDATA[Style that should be applied to the header h tag

 
 Note the style given here applies to only the header text. The style
 property inherited from the Component interface can be used
 to set the style for the whole header div (which could include a nested
 Group)
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="headerTagCssClasses">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.element.Header" xml:lang="en"><![CDATA[Style classes that should be applied to the header text (h tag)

 
 Note the style class given here applies to only the header text. The
 style class property inherited from the Component interface
 can be used to set the class for the whole field div (which could
 include a nested Group)
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="headerText">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.element.Header" xml:lang="en"><![CDATA[Text that should be displayed on the header]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="headerLevel">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.element.Header" xml:lang="en"><![CDATA[HTML header level (h1 ... h6) that should be applied to the header text]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:anyAttribute processContents="skip"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="syntaxHighlighter-type">
    <xsd:complexContent>
      <xsd:extension base="componentAttributes-type">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element maxOccurs="1" minOccurs="0" name="onChangeScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.SyntaxHighlighter" xml:lang="en"><![CDATA[Script that should be executed when the component's onChange event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onKeyPressScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.SyntaxHighlighter" xml:lang="en"><![CDATA[Script that should be executed when the component's onKeyPress event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="sourceCode" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.SyntaxHighlighter" xml:lang="en"><![CDATA[The text to render with syntax highlighting]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="refreshTimer" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.SyntaxHighlighter" xml:lang="en"><![CDATA[Time in seconds that the component will be automatically refreshed
 
 
 This will invoke the refresh process just like the conditionalRefresh and
 refreshWhenChangedPropertyNames. When using this property methodToCallOnRefresh and id should
 also be specified
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="disableSessionPersistence" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.SyntaxHighlighter" xml:lang="en"><![CDATA[Disables the storage of the component in session (when the framework determines it needs to be due to a
 refresh condition)

 
 When the framework determines there is a condition on the component that requires it to keep around between
 posts, it will store the component instance in session. This flag can be set to disable this behavior (which
 would require custom application logic to support behavior such as refresh)
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onDblClickScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.SyntaxHighlighter" xml:lang="en"><![CDATA[Script that should be executed when the component's onDblClick event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="additionalComponentsToRefresh" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.SyntaxHighlighter" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onBlurScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.SyntaxHighlighter" xml:lang="en"><![CDATA[Script that should be executed when the component's onBlur event is fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="selfRendered" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.SyntaxHighlighter" xml:lang="en"><![CDATA[Indicates whether the component contains its own render output (through
 the renderOutput property)

 
 If self rendered is true, the corresponding template for the component
 will not be invoked and the renderOutput String will be written to the
 response as is.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="colSpan" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.SyntaxHighlighter" xml:lang="en"><![CDATA[Number of places the component should take up horizontally in the
 container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how many places
 horizontally the component should take up within the container. This is
 only applicable for table based layout managers. Default is 1
 

 TODO: this should not be on component interface since it only applies if
 the layout manager supports it, need some sort of layoutOptions map for
 field level options that depend on the manager]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="additionalCssClasses" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.SyntaxHighlighter" xml:lang="en"><![CDATA[Convenience property for adding css class names to the end of the list of cssClasses that may already exist on
 this Component (this is to avoid explicitly having to set list merge in the bean definition)]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="required" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.SyntaxHighlighter" xml:lang="en"><![CDATA[Indicates whether the component is required

 
 At the general component level required means there is some action the
 user needs to take within the component. For example, within a section it
 might mean the fields within the section should be completed. At a field
 level, it means the field should be completed. This provides the ability
 for the renderers to indicate the required action.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="finalizeMethodToCall" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.SyntaxHighlighter" xml:lang="en"><![CDATA[The name of the method that should be invoked for finalizing the component
 configuration (full method name, without parameters or return type)

 
 Note the method can also be set with the finalizeMethodInvoker
 targetMethod property. If the method is on the configured
 ViewHelperService, only this property needs to be configured
 

 
 The model backing the view will be passed as the first argument method and then
 the Component instance as the second argument. If any additional method
 arguments are declared with the finalizeMethodAdditionalArguments, they will then
 be passed in the order declared in the list
 

 
 If the component is selfRendered, the finalize method can return a string which
 will be set as the component's renderOutput. The selfRendered indicator will also
 be set to true on the component.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="resetDataOnRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.SyntaxHighlighter" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onKeyDownScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.SyntaxHighlighter" xml:lang="en"><![CDATA[Script that should be executed when the component's onKeyDown event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="template" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.SyntaxHighlighter" xml:lang="en"><![CDATA[The path to the JSP file that should be called to render the component

 
 The path should be relative to the web root. An attribute will be available to the component to use under the
 name given by the method getComponentTypeName. Based on the component type, additional attributes could
 be available for use. See the component documentation for more information on such attributes.
 

 
 e.g. '/krad/WEB-INF/jsp/tiles/component.jsp'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="align" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.SyntaxHighlighter" xml:lang="en"><![CDATA[Horizontal alignment of the component within its container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how the component
 should be aligned horizontally within the container. During the finalize
 phase the CSS text-align style will be created for the align setting.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="width" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.SyntaxHighlighter" xml:lang="en"><![CDATA[Width the component should take up in the container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies a width the component
 should take up in the Container. This is not applicable for all layout
 managers. During the finalize phase the CSS width style will be created
 for the width setting.
 

 
 e.g. '30%', '55px'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseDownScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.SyntaxHighlighter" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseDown event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="postContent">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.SyntaxHighlighter" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:sequence>
                <xsd:any minOccurs="0" processContents="skip"/>
              </xsd:sequence>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onClickScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.SyntaxHighlighter" xml:lang="en"><![CDATA[Script that should be executed when the component's onClick event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="header" type="xsd:anyType">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.SyntaxHighlighter" xml:lang="en"/>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="render" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.SyntaxHighlighter" xml:lang="en"><![CDATA[Indicates whether the component should be rendered in the UI

 
 If set to false, the corresponding component template will not be invoked
 (therefore nothing will be rendered to the UI).
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onLoadScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.SyntaxHighlighter" xml:lang="en"><![CDATA[Script that should be executed when the component's onLoad event is fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="methodToCallOnRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.SyntaxHighlighter" xml:lang="en"><![CDATA[Name of a method on the controller that should be invoked as part of the component refresh
 and disclosure process
 
 
 During the component refresh or disclosure process it might be necessary to perform other
 operations, such as preparing data or executing a business process. This allows the
 configuration of a method on the underlying controller that should be called for the
 component refresh action. In this method, the necessary logic can be performed and then the
 base component update method invoked to carry out the component refresh.
 
 
 
 Controller method to invoke must accept the form, binding result, request, and response
 arguments
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="finalizeMethodInvoker" type="org.kuali.rice.krad.uif.component.MethodInvokerConfig">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.SyntaxHighlighter" xml:lang="en"><![CDATA[MethodInvokerConfig instance for the method that should be invoked
 for finalizing the component configuration

 
 MethodInvoker can be configured to specify the class or object the method
 should be called on. For static method invocations, the targetClass
 property can be configured. For object invocations, that targetObject
 property can be configured
 

 
 If the component is selfRendered, the finalize method can return a string which
 will be set as the component's renderOutput. The selfRendered indicator will also
 be set to true on the component.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="componentModifiers">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.SyntaxHighlighter" xml:lang="en"><![CDATA[ComponentModifier instances that should be invoked to
 initialize the component

 
 These provide dynamic initialization behavior for the component and are
 configured through the components definition. Each initializer will get
 invoked by the initialize method.
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="org.kuali.rice.krad.uif.modifier.ComponentModifier">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="componentCode" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.SyntaxHighlighter" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="propertyReplacers">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.SyntaxHighlighter" xml:lang="en"><![CDATA[gets a list of PropertyReplacer instances

 They will be evaluated
 during the view lifecycle to conditionally set properties on the
 Component based on expression evaluations]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="org.kuali.rice.krad.uif.component.PropertyReplacer">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onDocumentReadyScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.SyntaxHighlighter" xml:lang="en"><![CDATA[Script to be run when the document ready event is triggered]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="refreshWhenChangedPropertyNames" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.SyntaxHighlighter" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseUpScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.SyntaxHighlighter" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseUp event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="renderedHtmlOutput" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.SyntaxHighlighter" xml:lang="en"><![CDATA[Rendering output for the component that will be sent as part of the
 response (can contain static text and HTML)]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onKeyUpScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.SyntaxHighlighter" xml:lang="en"><![CDATA[Script that should be executed when the component's onKeyUp event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onCloseScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.SyntaxHighlighter" xml:lang="en"><![CDATA[Script that should be executed when the component's onClose event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="id" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.SyntaxHighlighter" xml:lang="en"><![CDATA[The unique id (within a given tree) for the element.

 The id is used to identify an element instance within the tree, and
 will be used by renderers to set the HTML element id. This gives a way to find various elements
 for scripting. If the id is not given, a default will be generated by the framework.
 

 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="pluginCssClass" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.SyntaxHighlighter" xml:lang="en"><![CDATA[The class that will be set on the pre tags

 
 The class is used by the prettify plugin to identify text to highlight and to specify type of highlighting.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="title" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.SyntaxHighlighter" xml:lang="en"><![CDATA[The component title

 
 Depending on the component can be used in various ways. For example with a Container component the title is
 used to set the header text. For components like controls other other components that render an HTML element it
 is used to set the HTML title attribute.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="order" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.SyntaxHighlighter" xml:lang="en"><![CDATA[Order of a component within a List of other components

 Lower numbers are placed higher up in the list, while higher numbers are placed
 lower in the list]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="style" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.SyntaxHighlighter" xml:lang="en"><![CDATA[CSS style string to be applied to the component

 
 Any style override or additions can be specified with this attribute.
 This is used by the renderer to set the style attribute on the
 corresponding element.
 

 
 e.g. 'color: #000000;text-decoration: underline;'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="finalizeMethodAdditionalArguments" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.SyntaxHighlighter" xml:lang="en"><![CDATA[The List of Object instances that should be passed as arguments to the finalize method

 
 These arguments are passed to the finalize method after the standard model and component
 arguments. They are passed in the order declared in the list
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onSubmitScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.SyntaxHighlighter" xml:lang="en"><![CDATA[Script that should be executed when the component's onSubmit event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="conditionalRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.SyntaxHighlighter" xml:lang="en"><![CDATA[When set if the condition is satisfied, the component will be refreshed.
 
 
 The component MUST BE a container or field type. conditionalRefresh is defined in a limited
 Spring EL syntax. Only valid form property names, and, or, logical comparison operators
 (non-arithmetic), #listContains, #emptyList, and the matches clause are allowed. String and
 regex values must use single quotes ('), booleans must be either true or false, numbers must
 be a valid double either negative or positive.
 
 
 DO NOT use progressiveRender and conditionalRefresh on the same component unless it is known
 that the component will always be visible in all cases when a conditionalRefresh happens (ie
 conditionalRefresh has progressiveRender's condition anded with its own condition). If a
 component should be refreshed every time it is shown, use the progressiveRenderAndRefresh
 option with this property instead.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="rowSpan" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.SyntaxHighlighter" xml:lang="en"><![CDATA[Number of places the component should take up vertically in the container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how many places
 vertically the component should take up within the container. This is
 only applicable for table based layout managers. Default is 1
 

 TODO: this should not be on component interface since it only applies if
 the layout manager supports it, need some sort of layoutOptions map for
 field level options that depend on the manager]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="retrieveViaAjax" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.SyntaxHighlighter" xml:lang="en"><![CDATA[When true, this component will render as a placeholder component instead of rendering normally because the
 content will be later retrieved through manually ajax retrieval calls in the js

 This flag does not imply any automation, there must be a js call invoked for the content to be retrieved
 by the server, but this does mark it with a placeholder component which KRAD js uses during these calls.
 This placeholder component is used for ajax retrievals.  In particular, this flag is useful for use in
 combination with the showLightboxComponent js function which will automatically retrieve the
 real content of a component through ajax if a placeholder component is detected.  This allows for the full
 content to only be retrieved when the lightbox is first opened.
 When this flag is set to true, the forceSessionPersistence
 flag is set to true AUTOMATICALLY because it is implied that this component will be retrieved by an ajax call
 in the future.  This may also be useful for direct custom calls to retrieveComponent function,
 as well, which also relies on the placeholder being present.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="namespaceCode" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.SyntaxHighlighter" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="progressiveRender" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.SyntaxHighlighter" xml:lang="en"><![CDATA[When set if the condition is satisfied, the component will be displayed. The component MUST
 BE a container or field type. progressiveRender is defined in a limited Spring EL syntax.
 Only valid form property names, and, or, logical comparison operators (non-arithmetic),
 #listContains, #emptyList, matches clause are allowed. String and regex values must use
 single quotes ('), booleans must be either true or false, numbers must be a valid double,
 either negative or positive.
 
 
 DO NOT use progressiveRender and a conditional refresh statement on the same component unless
 it is known that the component will always be visible in all cases when a conditional refresh
 happens (ie conditional refresh has progressiveRender's condition anded with its own
 condition).
 
 
 
 If a component should be refreshed every time it is shown, use the
 progressiveRenderAndRefresh option with this property instead.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="templateOptionsJSString" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.SyntaxHighlighter" xml:lang="en"><![CDATA[Builds a string from the underlying Map of template options that will export
 that options as a JavaScript Map for use in js and jQuery plugins]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseOutScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.SyntaxHighlighter" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseOut event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="templateOptions">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.SyntaxHighlighter" xml:lang="en"><![CDATA[The options that are passed through to the Component renderer

 
 The Map key is the option name, with the Map value as the option value. See
 documentation on the particular widget render for available options.
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:mapType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:choice maxOccurs="1" minOccurs="0">
            <xsd:element ref="tooltip"/>
            <xsd:element ref="tooltipFocus"/>
            <xsd:element ref="tooltipHelp"/>
          </xsd:choice>
          <xsd:element maxOccurs="1" minOccurs="0" name="preContent">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.SyntaxHighlighter" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:sequence>
                <xsd:any minOccurs="0" processContents="skip"/>
              </xsd:sequence>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseOverScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.SyntaxHighlighter" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseOver event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="dataAttributes">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.SyntaxHighlighter" xml:lang="en"><![CDATA[Get the dataAttributes setup for this component - to be written to the html/jQuery data
 
 
 The attributes that are complex objects (contain {}) they will be written through script. The
 attritubes that are simple (contain no objects) will be written directly to the html of the
 component using standard data-. Either way they can be access through .data() call in jQuery
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:mapType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:choice maxOccurs="1" minOccurs="0">
            <xsd:element ref="fieldSecurity"/>
            <xsd:element ref="dataFieldSecurity"/>
            <xsd:element ref="actionSecurity"/>
            <xsd:element ref="collectionGroupSecurity"/>
            <xsd:element ref="componentSecurity"/>
          </xsd:choice>
          <xsd:element maxOccurs="1" minOccurs="0" name="readOnly" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.SyntaxHighlighter" xml:lang="en"><![CDATA[Indicates whether the component can be edited

 
 When readOnly the controls and widgets of Field components
 will not be rendered. If the Field has an underlying value it will be
 displayed readOnly to the user.
 

 
 For a Container component, the readOnly setting will apply
 to all contained components (making a section readOnly makes all fields
 within the section readOnly).
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseMoveScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.SyntaxHighlighter" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseMove event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="progressiveRenderAndRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.SyntaxHighlighter" xml:lang="en"><![CDATA[If true, when the progressiveRender condition is satisfied, the component will always be
 retrieved from the server and shown(as opposed to being stored on the client, but hidden,
 after the first retrieval as is the case with the progressiveRenderViaAJAX option).
 
 
 By default, this is false, so components with progressive render capabilities will always
 be already within the client html and toggled to be hidden or visible.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="hidden" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.SyntaxHighlighter" xml:lang="en"><![CDATA[Indicates whether the component should be hidden in the UI

 
 How the hidden data is maintained depends on the views persistence mode.
 If the mode is request, the corresponding data will be rendered to the UI
 but not visible. If the mode is session, the data will not be rendered to
 the UI but maintained server side.
 

 
 For a Container component, the hidden setting will apply to
 all contained components (making a section hidden makes all fields within
 the section hidden)
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="skipInTabOrder" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.SyntaxHighlighter" xml:lang="en"><![CDATA[Flag indicating that this component and its nested components must be skipped when keyboard
 tabbing.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="context">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.SyntaxHighlighter" xml:lang="en"><![CDATA[Context map for the component

 
 Any el statements configured for the components properties (e.g.
 title="@{foo.property}") are evaluated using the el context map. This map
 will get populated with default objects like the model, view, and request
 from the ViewHelperService. Other components can push
 further objects into the context so that they are available for use with
 that component. For example, Field instances that are part
 of a collection line as receive the current line instance
 

 
 Context map also provides objects to methods that are invoked for
 GeneratedField instances
 

 
 The Map key gives the name of the variable that can be used within
 expressions, and the Map value gives the object instance for which
 expressions containing the variable should evaluate against
 

 
 NOTE: Calling getContext().putAll() will skip updating any configured property replacers for the
 component. Instead you should call #pushAllToContext
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:mapType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onUnloadScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.SyntaxHighlighter" xml:lang="en"><![CDATA[Script that should be executed when the component's onUnload event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="forceSessionPersistence" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.SyntaxHighlighter" xml:lang="en"><![CDATA[Indicates whether the component should be stored with the session view regardless of configuration

 
 By default the framework nulls out any components that do not have a refresh condition or are needed for
 collection processing. This can be a problem if custom application code is written to refresh a component
 without setting the corresponding component flag. In this case this property can be set to true to force the
 framework to keep the component in session. Defaults to false
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="valign" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.SyntaxHighlighter" xml:lang="en"><![CDATA[Vertical alignment of the component within its container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how the component
 should be aligned vertically within the container. During the finalize
 phase the CSS vertical-align style will be created for the valign
 setting.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onFocusScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.SyntaxHighlighter" xml:lang="en"><![CDATA[Script that should be executed when the component's onFocus event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="progressiveRenderViaAJAX" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.SyntaxHighlighter" xml:lang="en"><![CDATA[When progressiveRenderViaAJAX is true, this component will be retrieved from the server when
 it first satisfies its progressive render condition.
 
 
 After the first retrieval, it is hidden/shown in the html by the js when its progressive
 condition result changes. By default, this is false, so components with progressive render
 capabilities will always be already within the client html and toggled to be hidden or
 visible.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="cssClasses" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.SyntaxHighlighter" xml:lang="en"><![CDATA[CSS style class(s) to be applied to the component

 
 Declares style classes for the component. Multiple classes are specified
 with a space delimiter. This is used by the renderer to set the class
 attribute on the corresponding element. The class(s) declared must be
 available in the common style sheets or the style sheets specified for
 the view
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="templateName" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.SyntaxHighlighter" xml:lang="en"><![CDATA[The name for which the template can be invoked by

 
 Whether the template name is needed depends on the underlying rendering engine being used. In the example of
 Freemarker, the template points to the actual source file, which then loads a macro. From then on the macro is
 simply invoked to execute the template
 

 
 e.g. 'uif_text'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="unbounded" minOccurs="0" ref="spring:property"/>
          <xsd:element maxOccurs="unbounded" minOccurs="0" ref="property"/>
        </xsd:choice>
        <xsd:attribute name="sourceCode">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.widget.SyntaxHighlighter" xml:lang="en"><![CDATA[The text to render with syntax highlighting]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="header">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.widget.SyntaxHighlighter" xml:lang="en"/>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="pluginCssClass">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.widget.SyntaxHighlighter" xml:lang="en"><![CDATA[The class that will be set on the pre tags

 
 The class is used by the prettify plugin to identify text to highlight and to specify type of highlighting.
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:anyAttribute processContents="skip"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="breadcrumbItem-type">
    <xsd:complexContent>
      <xsd:extension base="componentAttributes-type">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element maxOccurs="1" minOccurs="0" name="onChangeScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.util.BreadcrumbItem" xml:lang="en"><![CDATA[Script that should be executed when the component's onChange event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onKeyPressScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.util.BreadcrumbItem" xml:lang="en"><![CDATA[Script that should be executed when the component's onKeyPress event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="refreshTimer" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.util.BreadcrumbItem" xml:lang="en"><![CDATA[Time in seconds that the component will be automatically refreshed
 
 
 This will invoke the refresh process just like the conditionalRefresh and
 refreshWhenChangedPropertyNames. When using this property methodToCallOnRefresh and id should
 also be specified
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="disableSessionPersistence" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.util.BreadcrumbItem" xml:lang="en"><![CDATA[Disables the storage of the component in session (when the framework determines it needs to be due to a
 refresh condition)

 
 When the framework determines there is a condition on the component that requires it to keep around between
 posts, it will store the component instance in session. This flag can be set to disable this behavior (which
 would require custom application logic to support behavior such as refresh)
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onDblClickScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.util.BreadcrumbItem" xml:lang="en"><![CDATA[Script that should be executed when the component's onDblClick event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="renderAsLink" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.util.BreadcrumbItem" xml:lang="en"><![CDATA[If true, the breadcrumbItem will render as a link, otherwise it will render as a span (not-clickable).
 By default, the last BreadcrumbItem in the list will ALWAYS render as span regardless of this property's value.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="additionalComponentsToRefresh" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.util.BreadcrumbItem" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onBlurScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.util.BreadcrumbItem" xml:lang="en"><![CDATA[Script that should be executed when the component's onBlur event is fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="selfRendered" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.util.BreadcrumbItem" xml:lang="en"><![CDATA[Indicates whether the component contains its own render output (through
 the renderOutput property)

 
 If self rendered is true, the corresponding template for the component
 will not be invoked and the renderOutput String will be written to the
 response as is.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="colSpan" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.util.BreadcrumbItem" xml:lang="en"><![CDATA[Number of places the component should take up horizontally in the
 container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how many places
 horizontally the component should take up within the container. This is
 only applicable for table based layout managers. Default is 1
 

 TODO: this should not be on component interface since it only applies if
 the layout manager supports it, need some sort of layoutOptions map for
 field level options that depend on the manager]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="additionalCssClasses" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.util.BreadcrumbItem" xml:lang="en"><![CDATA[Convenience property for adding css class names to the end of the list of cssClasses that may already exist on
 this Component (this is to avoid explicitly having to set list merge in the bean definition)]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="required" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.util.BreadcrumbItem" xml:lang="en"><![CDATA[Indicates whether the component is required

 
 At the general component level required means there is some action the
 user needs to take within the component. For example, within a section it
 might mean the fields within the section should be completed. At a field
 level, it means the field should be completed. This provides the ability
 for the renderers to indicate the required action.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="finalizeMethodToCall" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.util.BreadcrumbItem" xml:lang="en"><![CDATA[The name of the method that should be invoked for finalizing the component
 configuration (full method name, without parameters or return type)

 
 Note the method can also be set with the finalizeMethodInvoker
 targetMethod property. If the method is on the configured
 ViewHelperService, only this property needs to be configured
 

 
 The model backing the view will be passed as the first argument method and then
 the Component instance as the second argument. If any additional method
 arguments are declared with the finalizeMethodAdditionalArguments, they will then
 be passed in the order declared in the list
 

 
 If the component is selfRendered, the finalize method can return a string which
 will be set as the component's renderOutput. The selfRendered indicator will also
 be set to true on the component.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="resetDataOnRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.util.BreadcrumbItem" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onKeyDownScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.util.BreadcrumbItem" xml:lang="en"><![CDATA[Script that should be executed when the component's onKeyDown event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="template" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.util.BreadcrumbItem" xml:lang="en"><![CDATA[The path to the JSP file that should be called to render the component

 
 The path should be relative to the web root. An attribute will be available to the component to use under the
 name given by the method getComponentTypeName. Based on the component type, additional attributes could
 be available for use. See the component documentation for more information on such attributes.
 

 
 e.g. '/krad/WEB-INF/jsp/tiles/component.jsp'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="align" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.util.BreadcrumbItem" xml:lang="en"><![CDATA[Horizontal alignment of the component within its container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how the component
 should be aligned horizontally within the container. During the finalize
 phase the CSS text-align style will be created for the align setting.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="width" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.util.BreadcrumbItem" xml:lang="en"><![CDATA[Width the component should take up in the container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies a width the component
 should take up in the Container. This is not applicable for all layout
 managers. During the finalize phase the CSS width style will be created
 for the width setting.
 

 
 e.g. '30%', '55px'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseDownScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.util.BreadcrumbItem" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseDown event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="label" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.util.BreadcrumbItem" xml:lang="en"><![CDATA[The label for this breadcrumbItem.  The label is the textual content that will be displayed for the breadcrumb.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="postContent">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.util.BreadcrumbItem" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:sequence>
                <xsd:any minOccurs="0" processContents="skip"/>
              </xsd:sequence>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onClickScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.util.BreadcrumbItem" xml:lang="en"><![CDATA[Script that should be executed when the component's onClick event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="url" type="xsd:anyType">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.util.BreadcrumbItem" xml:lang="en"><![CDATA[The url used for the breadcrumb link represented by this item]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="render" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.util.BreadcrumbItem" xml:lang="en"><![CDATA[Indicates whether the component should be rendered in the UI

 
 If set to false, the corresponding component template will not be invoked
 (therefore nothing will be rendered to the UI).
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onLoadScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.util.BreadcrumbItem" xml:lang="en"><![CDATA[Script that should be executed when the component's onLoad event is fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="methodToCallOnRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.util.BreadcrumbItem" xml:lang="en"><![CDATA[Name of a method on the controller that should be invoked as part of the component refresh
 and disclosure process
 
 
 During the component refresh or disclosure process it might be necessary to perform other
 operations, such as preparing data or executing a business process. This allows the
 configuration of a method on the underlying controller that should be called for the
 component refresh action. In this method, the necessary logic can be performed and then the
 base component update method invoked to carry out the component refresh.
 
 
 
 Controller method to invoke must accept the form, binding result, request, and response
 arguments
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="finalizeMethodInvoker" type="org.kuali.rice.krad.uif.component.MethodInvokerConfig">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.util.BreadcrumbItem" xml:lang="en"><![CDATA[MethodInvokerConfig instance for the method that should be invoked
 for finalizing the component configuration

 
 MethodInvoker can be configured to specify the class or object the method
 should be called on. For static method invocations, the targetClass
 property can be configured. For object invocations, that targetObject
 property can be configured
 

 
 If the component is selfRendered, the finalize method can return a string which
 will be set as the component's renderOutput. The selfRendered indicator will also
 be set to true on the component.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="componentModifiers">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.util.BreadcrumbItem" xml:lang="en"><![CDATA[ComponentModifier instances that should be invoked to
 initialize the component

 
 These provide dynamic initialization behavior for the component and are
 configured through the components definition. Each initializer will get
 invoked by the initialize method.
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="org.kuali.rice.krad.uif.modifier.ComponentModifier">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="componentCode" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.util.BreadcrumbItem" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="siblingBreadcrumbComponent" type="org.kuali.rice.krad.uif.component.Component">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.util.BreadcrumbItem" xml:lang="en"><![CDATA[Set the breadcrumb component for this breadcrumbs sibling content/navigation.  This content will appear in
 a pop-up menu.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="propertyReplacers">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.util.BreadcrumbItem" xml:lang="en"><![CDATA[gets a list of PropertyReplacer instances

 They will be evaluated
 during the view lifecycle to conditionally set properties on the
 Component based on expression evaluations]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="org.kuali.rice.krad.uif.component.PropertyReplacer">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onDocumentReadyScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.util.BreadcrumbItem" xml:lang="en"><![CDATA[Script to be run when the document ready event is triggered]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="refreshWhenChangedPropertyNames" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.util.BreadcrumbItem" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseUpScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.util.BreadcrumbItem" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseUp event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="renderedHtmlOutput" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.util.BreadcrumbItem" xml:lang="en"><![CDATA[Rendering output for the component that will be sent as part of the
 response (can contain static text and HTML)]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onKeyUpScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.util.BreadcrumbItem" xml:lang="en"><![CDATA[Script that should be executed when the component's onKeyUp event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onCloseScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.util.BreadcrumbItem" xml:lang="en"><![CDATA[Script that should be executed when the component's onClose event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="id" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.util.BreadcrumbItem" xml:lang="en"><![CDATA[The unique id (within a given tree) for the element.

 The id is used to identify an element instance within the tree, and
 will be used by renderers to set the HTML element id. This gives a way to find various elements
 for scripting. If the id is not given, a default will be generated by the framework.
 

 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="title" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.util.BreadcrumbItem" xml:lang="en"><![CDATA[The component title

 
 Depending on the component can be used in various ways. For example with a Container component the title is
 used to set the header text. For components like controls other other components that render an HTML element it
 is used to set the HTML title attribute.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="order" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.util.BreadcrumbItem" xml:lang="en"><![CDATA[Order of a component within a List of other components

 Lower numbers are placed higher up in the list, while higher numbers are placed
 lower in the list]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="style" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.util.BreadcrumbItem" xml:lang="en"><![CDATA[CSS style string to be applied to the component

 
 Any style override or additions can be specified with this attribute.
 This is used by the renderer to set the style attribute on the
 corresponding element.
 

 
 e.g. 'color: #000000;text-decoration: underline;'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="finalizeMethodAdditionalArguments" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.util.BreadcrumbItem" xml:lang="en"><![CDATA[The List of Object instances that should be passed as arguments to the finalize method

 
 These arguments are passed to the finalize method after the standard model and component
 arguments. They are passed in the order declared in the list
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onSubmitScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.util.BreadcrumbItem" xml:lang="en"><![CDATA[Script that should be executed when the component's onSubmit event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="conditionalRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.util.BreadcrumbItem" xml:lang="en"><![CDATA[When set if the condition is satisfied, the component will be refreshed.
 
 
 The component MUST BE a container or field type. conditionalRefresh is defined in a limited
 Spring EL syntax. Only valid form property names, and, or, logical comparison operators
 (non-arithmetic), #listContains, #emptyList, and the matches clause are allowed. String and
 regex values must use single quotes ('), booleans must be either true or false, numbers must
 be a valid double either negative or positive.
 
 
 DO NOT use progressiveRender and conditionalRefresh on the same component unless it is known
 that the component will always be visible in all cases when a conditionalRefresh happens (ie
 conditionalRefresh has progressiveRender's condition anded with its own condition). If a
 component should be refreshed every time it is shown, use the progressiveRenderAndRefresh
 option with this property instead.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="rowSpan" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.util.BreadcrumbItem" xml:lang="en"><![CDATA[Number of places the component should take up vertically in the container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how many places
 vertically the component should take up within the container. This is
 only applicable for table based layout managers. Default is 1
 

 TODO: this should not be on component interface since it only applies if
 the layout manager supports it, need some sort of layoutOptions map for
 field level options that depend on the manager]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="retrieveViaAjax" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.util.BreadcrumbItem" xml:lang="en"><![CDATA[When true, this component will render as a placeholder component instead of rendering normally because the
 content will be later retrieved through manually ajax retrieval calls in the js

 This flag does not imply any automation, there must be a js call invoked for the content to be retrieved
 by the server, but this does mark it with a placeholder component which KRAD js uses during these calls.
 This placeholder component is used for ajax retrievals.  In particular, this flag is useful for use in
 combination with the showLightboxComponent js function which will automatically retrieve the
 real content of a component through ajax if a placeholder component is detected.  This allows for the full
 content to only be retrieved when the lightbox is first opened.
 When this flag is set to true, the forceSessionPersistence
 flag is set to true AUTOMATICALLY because it is implied that this component will be retrieved by an ajax call
 in the future.  This may also be useful for direct custom calls to retrieveComponent function,
 as well, which also relies on the placeholder being present.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="namespaceCode" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.util.BreadcrumbItem" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="progressiveRender" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.util.BreadcrumbItem" xml:lang="en"><![CDATA[When set if the condition is satisfied, the component will be displayed. The component MUST
 BE a container or field type. progressiveRender is defined in a limited Spring EL syntax.
 Only valid form property names, and, or, logical comparison operators (non-arithmetic),
 #listContains, #emptyList, matches clause are allowed. String and regex values must use
 single quotes ('), booleans must be either true or false, numbers must be a valid double,
 either negative or positive.
 
 
 DO NOT use progressiveRender and a conditional refresh statement on the same component unless
 it is known that the component will always be visible in all cases when a conditional refresh
 happens (ie conditional refresh has progressiveRender's condition anded with its own
 condition).
 
 
 
 If a component should be refreshed every time it is shown, use the
 progressiveRenderAndRefresh option with this property instead.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="templateOptionsJSString" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.util.BreadcrumbItem" xml:lang="en"><![CDATA[Builds a string from the underlying Map of template options that will export
 that options as a JavaScript Map for use in js and jQuery plugins]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseOutScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.util.BreadcrumbItem" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseOut event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="templateOptions">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.util.BreadcrumbItem" xml:lang="en"><![CDATA[The options that are passed through to the Component renderer

 
 The Map key is the option name, with the Map value as the option value. See
 documentation on the particular widget render for available options.
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:mapType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:choice maxOccurs="1" minOccurs="0">
            <xsd:element ref="tooltip"/>
            <xsd:element ref="tooltipFocus"/>
            <xsd:element ref="tooltipHelp"/>
          </xsd:choice>
          <xsd:element maxOccurs="1" minOccurs="0" name="preContent">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.util.BreadcrumbItem" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:sequence>
                <xsd:any minOccurs="0" processContents="skip"/>
              </xsd:sequence>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseOverScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.util.BreadcrumbItem" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseOver event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="dataAttributes">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.util.BreadcrumbItem" xml:lang="en"><![CDATA[Get the dataAttributes setup for this component - to be written to the html/jQuery data
 
 
 The attributes that are complex objects (contain {}) they will be written through script. The
 attritubes that are simple (contain no objects) will be written directly to the html of the
 component using standard data-. Either way they can be access through .data() call in jQuery
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:mapType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:choice maxOccurs="1" minOccurs="0">
            <xsd:element ref="fieldSecurity"/>
            <xsd:element ref="dataFieldSecurity"/>
            <xsd:element ref="actionSecurity"/>
            <xsd:element ref="collectionGroupSecurity"/>
            <xsd:element ref="componentSecurity"/>
          </xsd:choice>
          <xsd:element maxOccurs="1" minOccurs="0" name="readOnly" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.util.BreadcrumbItem" xml:lang="en"><![CDATA[Indicates whether the component can be edited

 
 When readOnly the controls and widgets of Field components
 will not be rendered. If the Field has an underlying value it will be
 displayed readOnly to the user.
 

 
 For a Container component, the readOnly setting will apply
 to all contained components (making a section readOnly makes all fields
 within the section readOnly).
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseMoveScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.util.BreadcrumbItem" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseMove event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="progressiveRenderAndRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.util.BreadcrumbItem" xml:lang="en"><![CDATA[If true, when the progressiveRender condition is satisfied, the component will always be
 retrieved from the server and shown(as opposed to being stored on the client, but hidden,
 after the first retrieval as is the case with the progressiveRenderViaAJAX option).
 
 
 By default, this is false, so components with progressive render capabilities will always
 be already within the client html and toggled to be hidden or visible.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="hidden" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.util.BreadcrumbItem" xml:lang="en"><![CDATA[Indicates whether the component should be hidden in the UI

 
 How the hidden data is maintained depends on the views persistence mode.
 If the mode is request, the corresponding data will be rendered to the UI
 but not visible. If the mode is session, the data will not be rendered to
 the UI but maintained server side.
 

 
 For a Container component, the hidden setting will apply to
 all contained components (making a section hidden makes all fields within
 the section hidden)
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="skipInTabOrder" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.util.BreadcrumbItem" xml:lang="en"><![CDATA[Flag indicating that this component and its nested components must be skipped when keyboard
 tabbing.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="context">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.util.BreadcrumbItem" xml:lang="en"><![CDATA[Context map for the component

 
 Any el statements configured for the components properties (e.g.
 title="@{foo.property}") are evaluated using the el context map. This map
 will get populated with default objects like the model, view, and request
 from the ViewHelperService. Other components can push
 further objects into the context so that they are available for use with
 that component. For example, Field instances that are part
 of a collection line as receive the current line instance
 

 
 Context map also provides objects to methods that are invoked for
 GeneratedField instances
 

 
 The Map key gives the name of the variable that can be used within
 expressions, and the Map value gives the object instance for which
 expressions containing the variable should evaluate against
 

 
 NOTE: Calling getContext().putAll() will skip updating any configured property replacers for the
 component. Instead you should call #pushAllToContext
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:mapType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onUnloadScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.util.BreadcrumbItem" xml:lang="en"><![CDATA[Script that should be executed when the component's onUnload event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="forceSessionPersistence" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.util.BreadcrumbItem" xml:lang="en"><![CDATA[Indicates whether the component should be stored with the session view regardless of configuration

 
 By default the framework nulls out any components that do not have a refresh condition or are needed for
 collection processing. This can be a problem if custom application code is written to refresh a component
 without setting the corresponding component flag. In this case this property can be set to true to force the
 framework to keep the component in session. Defaults to false
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="valign" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.util.BreadcrumbItem" xml:lang="en"><![CDATA[Vertical alignment of the component within its container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how the component
 should be aligned vertically within the container. During the finalize
 phase the CSS vertical-align style will be created for the valign
 setting.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="progressiveRenderViaAJAX" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.util.BreadcrumbItem" xml:lang="en"><![CDATA[When progressiveRenderViaAJAX is true, this component will be retrieved from the server when
 it first satisfies its progressive render condition.
 
 
 After the first retrieval, it is hidden/shown in the html by the js when its progressive
 condition result changes. By default, this is false, so components with progressive render
 capabilities will always be already within the client html and toggled to be hidden or
 visible.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onFocusScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.util.BreadcrumbItem" xml:lang="en"><![CDATA[Script that should be executed when the component's onFocus event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="cssClasses" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.util.BreadcrumbItem" xml:lang="en"><![CDATA[CSS style class(s) to be applied to the component

 
 Declares style classes for the component. Multiple classes are specified
 with a space delimiter. This is used by the renderer to set the class
 attribute on the corresponding element. The class(s) declared must be
 available in the common style sheets or the style sheets specified for
 the view
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="templateName" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.util.BreadcrumbItem" xml:lang="en"><![CDATA[The name for which the template can be invoked by

 
 Whether the template name is needed depends on the underlying rendering engine being used. In the example of
 Freemarker, the template points to the actual source file, which then loads a macro. From then on the macro is
 simply invoked to execute the template
 

 
 e.g. 'uif_text'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="unbounded" minOccurs="0" ref="spring:property"/>
          <xsd:element maxOccurs="unbounded" minOccurs="0" ref="property"/>
        </xsd:choice>
        <xsd:attribute name="renderAsLink">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.util.BreadcrumbItem" xml:lang="en"><![CDATA[If true, the breadcrumbItem will render as a link, otherwise it will render as a span (not-clickable).
 By default, the last BreadcrumbItem in the list will ALWAYS render as span regardless of this property's value.]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="label">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.util.BreadcrumbItem" xml:lang="en"><![CDATA[The label for this breadcrumbItem.  The label is the textual content that will be displayed for the breadcrumb.]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="url">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.util.BreadcrumbItem" xml:lang="en"><![CDATA[The url used for the breadcrumb link represented by this item]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:anyAttribute processContents="skip"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="tooltip-type">
    <xsd:complexContent>
      <xsd:extension base="componentAttributes-type">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element maxOccurs="1" minOccurs="0" name="onChangeScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tooltip" xml:lang="en"><![CDATA[Script that should be executed when the component's onChange event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onKeyPressScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tooltip" xml:lang="en"><![CDATA[Script that should be executed when the component's onKeyPress event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="refreshTimer" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tooltip" xml:lang="en"><![CDATA[Time in seconds that the component will be automatically refreshed
 
 
 This will invoke the refresh process just like the conditionalRefresh and
 refreshWhenChangedPropertyNames. When using this property methodToCallOnRefresh and id should
 also be specified
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="disableSessionPersistence" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tooltip" xml:lang="en"><![CDATA[Disables the storage of the component in session (when the framework determines it needs to be due to a
 refresh condition)

 
 When the framework determines there is a condition on the component that requires it to keep around between
 posts, it will store the component instance in session. This flag can be set to disable this behavior (which
 would require custom application logic to support behavior such as refresh)
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onDblClickScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tooltip" xml:lang="en"><![CDATA[Script that should be executed when the component's onDblClick event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="additionalComponentsToRefresh" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tooltip" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onBlurScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tooltip" xml:lang="en"><![CDATA[Script that should be executed when the component's onBlur event is fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseHover" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tooltip" xml:lang="en"><![CDATA[Indicates the tooltip should be triggered by mouse hover]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="selfRendered" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tooltip" xml:lang="en"><![CDATA[Indicates whether the component contains its own render output (through
 the renderOutput property)

 
 If self rendered is true, the corresponding template for the component
 will not be invoked and the renderOutput String will be written to the
 response as is.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="colSpan" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tooltip" xml:lang="en"><![CDATA[Number of places the component should take up horizontally in the
 container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how many places
 horizontally the component should take up within the container. This is
 only applicable for table based layout managers. Default is 1
 

 TODO: this should not be on component interface since it only applies if
 the layout manager supports it, need some sort of layoutOptions map for
 field level options that depend on the manager]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="additionalCssClasses" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tooltip" xml:lang="en"><![CDATA[Convenience property for adding css class names to the end of the list of cssClasses that may already exist on
 this Component (this is to avoid explicitly having to set list merge in the bean definition)]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onFocus" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tooltip" xml:lang="en"><![CDATA[Indicates the tooltip should be triggered by focus/blur]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="required" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tooltip" xml:lang="en"><![CDATA[Indicates whether the component is required

 
 At the general component level required means there is some action the
 user needs to take within the component. For example, within a section it
 might mean the fields within the section should be completed. At a field
 level, it means the field should be completed. This provides the ability
 for the renderers to indicate the required action.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="finalizeMethodToCall" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tooltip" xml:lang="en"><![CDATA[The name of the method that should be invoked for finalizing the component
 configuration (full method name, without parameters or return type)

 
 Note the method can also be set with the finalizeMethodInvoker
 targetMethod property. If the method is on the configured
 ViewHelperService, only this property needs to be configured
 

 
 The model backing the view will be passed as the first argument method and then
 the Component instance as the second argument. If any additional method
 arguments are declared with the finalizeMethodAdditionalArguments, they will then
 be passed in the order declared in the list
 

 
 If the component is selfRendered, the finalize method can return a string which
 will be set as the component's renderOutput. The selfRendered indicator will also
 be set to true on the component.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="resetDataOnRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tooltip" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onKeyDownScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tooltip" xml:lang="en"><![CDATA[Script that should be executed when the component's onKeyDown event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="template" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tooltip" xml:lang="en"><![CDATA[The path to the JSP file that should be called to render the component

 
 The path should be relative to the web root. An attribute will be available to the component to use under the
 name given by the method getComponentTypeName. Based on the component type, additional attributes could
 be available for use. See the component documentation for more information on such attributes.
 

 
 e.g. '/krad/WEB-INF/jsp/tiles/component.jsp'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="align" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tooltip" xml:lang="en"><![CDATA[Horizontal alignment of the component within its container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how the component
 should be aligned horizontally within the container. During the finalize
 phase the CSS text-align style will be created for the align setting.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="width" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tooltip" xml:lang="en"><![CDATA[Width the component should take up in the container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies a width the component
 should take up in the Container. This is not applicable for all layout
 managers. During the finalize phase the CSS width style will be created
 for the width setting.
 

 
 e.g. '30%', '55px'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseDownScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tooltip" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseDown event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="postContent">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tooltip" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:sequence>
                <xsd:any minOccurs="0" processContents="skip"/>
              </xsd:sequence>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onClickScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tooltip" xml:lang="en"><![CDATA[Script that should be executed when the component's onClick event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="render" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tooltip" xml:lang="en"><![CDATA[Indicates whether the component should be rendered in the UI

 
 If set to false, the corresponding component template will not be invoked
 (therefore nothing will be rendered to the UI).
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onLoadScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tooltip" xml:lang="en"><![CDATA[Script that should be executed when the component's onLoad event is fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="methodToCallOnRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tooltip" xml:lang="en"><![CDATA[Name of a method on the controller that should be invoked as part of the component refresh
 and disclosure process
 
 
 During the component refresh or disclosure process it might be necessary to perform other
 operations, such as preparing data or executing a business process. This allows the
 configuration of a method on the underlying controller that should be called for the
 component refresh action. In this method, the necessary logic can be performed and then the
 base component update method invoked to carry out the component refresh.
 
 
 
 Controller method to invoke must accept the form, binding result, request, and response
 arguments
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="finalizeMethodInvoker" type="org.kuali.rice.krad.uif.component.MethodInvokerConfig">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tooltip" xml:lang="en"><![CDATA[MethodInvokerConfig instance for the method that should be invoked
 for finalizing the component configuration

 
 MethodInvoker can be configured to specify the class or object the method
 should be called on. For static method invocations, the targetClass
 property can be configured. For object invocations, that targetObject
 property can be configured
 

 
 If the component is selfRendered, the finalize method can return a string which
 will be set as the component's renderOutput. The selfRendered indicator will also
 be set to true on the component.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="componentModifiers">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tooltip" xml:lang="en"><![CDATA[ComponentModifier instances that should be invoked to
 initialize the component

 
 These provide dynamic initialization behavior for the component and are
 configured through the components definition. Each initializer will get
 invoked by the initialize method.
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="org.kuali.rice.krad.uif.modifier.ComponentModifier">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="componentCode" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tooltip" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="propertyReplacers">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tooltip" xml:lang="en"><![CDATA[gets a list of PropertyReplacer instances

 They will be evaluated
 during the view lifecycle to conditionally set properties on the
 Component based on expression evaluations]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="org.kuali.rice.krad.uif.component.PropertyReplacer">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onDocumentReadyScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tooltip" xml:lang="en"><![CDATA[Script to be run when the document ready event is triggered]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="refreshWhenChangedPropertyNames" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tooltip" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseUpScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tooltip" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseUp event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="tooltipContent" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tooltip" xml:lang="en"><![CDATA[Plain text or HTML string that will be used to render the tooltip div]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="renderedHtmlOutput" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tooltip" xml:lang="en"><![CDATA[Rendering output for the component that will be sent as part of the
 response (can contain static text and HTML)]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onKeyUpScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tooltip" xml:lang="en"><![CDATA[Script that should be executed when the component's onKeyUp event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onCloseScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tooltip" xml:lang="en"><![CDATA[Script that should be executed when the component's onClose event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="id" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tooltip" xml:lang="en"><![CDATA[The unique id (within a given tree) for the element.

 The id is used to identify an element instance within the tree, and
 will be used by renderers to set the HTML element id. This gives a way to find various elements
 for scripting. If the id is not given, a default will be generated by the framework.
 

 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="title" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tooltip" xml:lang="en"><![CDATA[The component title

 
 Depending on the component can be used in various ways. For example with a Container component the title is
 used to set the header text. For components like controls other other components that render an HTML element it
 is used to set the HTML title attribute.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="order" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tooltip" xml:lang="en"><![CDATA[Order of a component within a List of other components

 Lower numbers are placed higher up in the list, while higher numbers are placed
 lower in the list]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="style" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tooltip" xml:lang="en"><![CDATA[CSS style string to be applied to the component

 
 Any style override or additions can be specified with this attribute.
 This is used by the renderer to set the style attribute on the
 corresponding element.
 

 
 e.g. 'color: #000000;text-decoration: underline;'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="finalizeMethodAdditionalArguments" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tooltip" xml:lang="en"><![CDATA[The List of Object instances that should be passed as arguments to the finalize method

 
 These arguments are passed to the finalize method after the standard model and component
 arguments. They are passed in the order declared in the list
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onSubmitScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tooltip" xml:lang="en"><![CDATA[Script that should be executed when the component's onSubmit event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="conditionalRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tooltip" xml:lang="en"><![CDATA[When set if the condition is satisfied, the component will be refreshed.
 
 
 The component MUST BE a container or field type. conditionalRefresh is defined in a limited
 Spring EL syntax. Only valid form property names, and, or, logical comparison operators
 (non-arithmetic), #listContains, #emptyList, and the matches clause are allowed. String and
 regex values must use single quotes ('), booleans must be either true or false, numbers must
 be a valid double either negative or positive.
 
 
 DO NOT use progressiveRender and conditionalRefresh on the same component unless it is known
 that the component will always be visible in all cases when a conditionalRefresh happens (ie
 conditionalRefresh has progressiveRender's condition anded with its own condition). If a
 component should be refreshed every time it is shown, use the progressiveRenderAndRefresh
 option with this property instead.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="rowSpan" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tooltip" xml:lang="en"><![CDATA[Number of places the component should take up vertically in the container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how many places
 vertically the component should take up within the container. This is
 only applicable for table based layout managers. Default is 1
 

 TODO: this should not be on component interface since it only applies if
 the layout manager supports it, need some sort of layoutOptions map for
 field level options that depend on the manager]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="retrieveViaAjax" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tooltip" xml:lang="en"><![CDATA[When true, this component will render as a placeholder component instead of rendering normally because the
 content will be later retrieved through manually ajax retrieval calls in the js

 This flag does not imply any automation, there must be a js call invoked for the content to be retrieved
 by the server, but this does mark it with a placeholder component which KRAD js uses during these calls.
 This placeholder component is used for ajax retrievals.  In particular, this flag is useful for use in
 combination with the showLightboxComponent js function which will automatically retrieve the
 real content of a component through ajax if a placeholder component is detected.  This allows for the full
 content to only be retrieved when the lightbox is first opened.
 When this flag is set to true, the forceSessionPersistence
 flag is set to true AUTOMATICALLY because it is implied that this component will be retrieved by an ajax call
 in the future.  This may also be useful for direct custom calls to retrieveComponent function,
 as well, which also relies on the placeholder being present.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="namespaceCode" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tooltip" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="progressiveRender" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tooltip" xml:lang="en"><![CDATA[When set if the condition is satisfied, the component will be displayed. The component MUST
 BE a container or field type. progressiveRender is defined in a limited Spring EL syntax.
 Only valid form property names, and, or, logical comparison operators (non-arithmetic),
 #listContains, #emptyList, matches clause are allowed. String and regex values must use
 single quotes ('), booleans must be either true or false, numbers must be a valid double,
 either negative or positive.
 
 
 DO NOT use progressiveRender and a conditional refresh statement on the same component unless
 it is known that the component will always be visible in all cases when a conditional refresh
 happens (ie conditional refresh has progressiveRender's condition anded with its own
 condition).
 
 
 
 If a component should be refreshed every time it is shown, use the
 progressiveRenderAndRefresh option with this property instead.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="templateOptionsJSString" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tooltip" xml:lang="en"><![CDATA[Builds a string from the underlying Map of template options that will export
 that options as a JavaScript Map for use in js and jQuery plugins]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseOutScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tooltip" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseOut event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="templateOptions">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tooltip" xml:lang="en"><![CDATA[The options that are passed through to the Component renderer

 
 The Map key is the option name, with the Map value as the option value. See
 documentation on the particular widget render for available options.
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:mapType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:choice maxOccurs="1" minOccurs="0">
            <xsd:element ref="tooltip"/>
            <xsd:element ref="tooltipFocus"/>
            <xsd:element ref="tooltipHelp"/>
          </xsd:choice>
          <xsd:element maxOccurs="1" minOccurs="0" name="preContent">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tooltip" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:sequence>
                <xsd:any minOccurs="0" processContents="skip"/>
              </xsd:sequence>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseOverScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tooltip" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseOver event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="dataAttributes">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tooltip" xml:lang="en"><![CDATA[Get the dataAttributes setup for this component - to be written to the html/jQuery data
 
 
 The attributes that are complex objects (contain {}) they will be written through script. The
 attritubes that are simple (contain no objects) will be written directly to the html of the
 component using standard data-. Either way they can be access through .data() call in jQuery
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:mapType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:choice maxOccurs="1" minOccurs="0">
            <xsd:element ref="fieldSecurity"/>
            <xsd:element ref="dataFieldSecurity"/>
            <xsd:element ref="actionSecurity"/>
            <xsd:element ref="collectionGroupSecurity"/>
            <xsd:element ref="componentSecurity"/>
          </xsd:choice>
          <xsd:element maxOccurs="1" minOccurs="0" name="readOnly" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tooltip" xml:lang="en"><![CDATA[Indicates whether the component can be edited

 
 When readOnly the controls and widgets of Field components
 will not be rendered. If the Field has an underlying value it will be
 displayed readOnly to the user.
 

 
 For a Container component, the readOnly setting will apply
 to all contained components (making a section readOnly makes all fields
 within the section readOnly).
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseMoveScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tooltip" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseMove event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="progressiveRenderAndRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tooltip" xml:lang="en"><![CDATA[If true, when the progressiveRender condition is satisfied, the component will always be
 retrieved from the server and shown(as opposed to being stored on the client, but hidden,
 after the first retrieval as is the case with the progressiveRenderViaAJAX option).
 
 
 By default, this is false, so components with progressive render capabilities will always
 be already within the client html and toggled to be hidden or visible.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="hidden" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tooltip" xml:lang="en"><![CDATA[Indicates whether the component should be hidden in the UI

 
 How the hidden data is maintained depends on the views persistence mode.
 If the mode is request, the corresponding data will be rendered to the UI
 but not visible. If the mode is session, the data will not be rendered to
 the UI but maintained server side.
 

 
 For a Container component, the hidden setting will apply to
 all contained components (making a section hidden makes all fields within
 the section hidden)
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="skipInTabOrder" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tooltip" xml:lang="en"><![CDATA[Flag indicating that this component and its nested components must be skipped when keyboard
 tabbing.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="context">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tooltip" xml:lang="en"><![CDATA[Context map for the component

 
 Any el statements configured for the components properties (e.g.
 title="@{foo.property}") are evaluated using the el context map. This map
 will get populated with default objects like the model, view, and request
 from the ViewHelperService. Other components can push
 further objects into the context so that they are available for use with
 that component. For example, Field instances that are part
 of a collection line as receive the current line instance
 

 
 Context map also provides objects to methods that are invoked for
 GeneratedField instances
 

 
 The Map key gives the name of the variable that can be used within
 expressions, and the Map value gives the object instance for which
 expressions containing the variable should evaluate against
 

 
 NOTE: Calling getContext().putAll() will skip updating any configured property replacers for the
 component. Instead you should call #pushAllToContext
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:mapType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onUnloadScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tooltip" xml:lang="en"><![CDATA[Script that should be executed when the component's onUnload event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="forceSessionPersistence" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tooltip" xml:lang="en"><![CDATA[Indicates whether the component should be stored with the session view regardless of configuration

 
 By default the framework nulls out any components that do not have a refresh condition or are needed for
 collection processing. This can be a problem if custom application code is written to refresh a component
 without setting the corresponding component flag. In this case this property can be set to true to force the
 framework to keep the component in session. Defaults to false
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="valign" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tooltip" xml:lang="en"><![CDATA[Vertical alignment of the component within its container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how the component
 should be aligned vertically within the container. During the finalize
 phase the CSS vertical-align style will be created for the valign
 setting.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onFocusScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tooltip" xml:lang="en"><![CDATA[Script that should be executed when the component's onFocus event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="progressiveRenderViaAJAX" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tooltip" xml:lang="en"><![CDATA[When progressiveRenderViaAJAX is true, this component will be retrieved from the server when
 it first satisfies its progressive render condition.
 
 
 After the first retrieval, it is hidden/shown in the html by the js when its progressive
 condition result changes. By default, this is false, so components with progressive render
 capabilities will always be already within the client html and toggled to be hidden or
 visible.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="cssClasses" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tooltip" xml:lang="en"><![CDATA[CSS style class(s) to be applied to the component

 
 Declares style classes for the component. Multiple classes are specified
 with a space delimiter. This is used by the renderer to set the class
 attribute on the corresponding element. The class(s) declared must be
 available in the common style sheets or the style sheets specified for
 the view
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="templateName" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tooltip" xml:lang="en"><![CDATA[The name for which the template can be invoked by

 
 Whether the template name is needed depends on the underlying rendering engine being used. In the example of
 Freemarker, the template points to the actual source file, which then loads a macro. From then on the macro is
 simply invoked to execute the template
 

 
 e.g. 'uif_text'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="unbounded" minOccurs="0" ref="spring:property"/>
          <xsd:element maxOccurs="unbounded" minOccurs="0" ref="property"/>
        </xsd:choice>
        <xsd:attribute name="onMouseHover">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tooltip" xml:lang="en"><![CDATA[Indicates the tooltip should be triggered by mouse hover]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="onFocus">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tooltip" xml:lang="en"><![CDATA[Indicates the tooltip should be triggered by focus/blur]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:attribute name="tooltipContent">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.widget.Tooltip" xml:lang="en"><![CDATA[Plain text or HTML string that will be used to render the tooltip div]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:anyAttribute processContents="skip"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
  <xsd:complexType name="dataObjectEntry-type">
    <xsd:choice maxOccurs="unbounded" minOccurs="0">
      <xsd:element maxOccurs="1" minOccurs="0" name="stateMapping" type="org.kuali.rice.krad.datadictionary.state.StateMapping">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.DataObjectEntry" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="mustOccurConstraints">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.DataObjectEntry" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
        <xsd:complexType>
          <xsd:complexContent>
            <xsd:extension base="org.kuali.rice.krad.datadictionary.validation.constraint.MustOccurConstraint">
              <xsd:attribute name="merge" type="xsd:boolean"/>
            </xsd:extension>
          </xsd:complexContent>
        </xsd:complexType>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="objectLabel" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.DataObjectEntry" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="exporterClass" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.DataObjectEntry" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="objectDescription" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.DataObjectEntry" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="helpDefintion" type="org.kuali.rice.krad.datadictionary.HelpDefinition">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.DataObjectEntry" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="dataObjectClass" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.DataObjectEntry" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="titleAttribute" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.DataObjectEntry" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="name" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.DataObjectEntry" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="primaryKeys" type="basicList-type">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.DataObjectEntry" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="boNotesEnabled" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.DataObjectEntry" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="namespaceCode" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.DataObjectEntry" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="inactivationBlockingDefinitions">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.DataObjectEntry" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
        <xsd:complexType>
          <xsd:complexContent>
            <xsd:extension base="org.kuali.rice.krad.datadictionary.InactivationBlockingDefinition">
              <xsd:attribute name="merge" type="xsd:boolean"/>
            </xsd:extension>
          </xsd:complexContent>
        </xsd:complexType>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="attributes">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.DataObjectEntry" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
        <xsd:complexType>
          <xsd:complexContent>
            <xsd:extension base="org.kuali.rice.krad.datadictionary.AttributeDefinition">
              <xsd:attribute name="merge" type="xsd:boolean"/>
            </xsd:extension>
          </xsd:complexContent>
        </xsd:complexType>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="groupByAttributesForEffectiveDating" type="basicList-type">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.DataObjectEntry" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="componentCode" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.DataObjectEntry" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="relationships">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.DataObjectEntry" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
        <xsd:complexType>
          <xsd:complexContent>
            <xsd:extension base="org.kuali.rice.krad.datadictionary.RelationshipDefinition">
              <xsd:attribute name="merge" type="xsd:boolean"/>
            </xsd:extension>
          </xsd:complexContent>
        </xsd:complexType>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="collections">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.datadictionary.DataObjectEntry" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
        <xsd:complexType>
          <xsd:complexContent>
            <xsd:extension base="org.kuali.rice.krad.datadictionary.CollectionDefinition">
              <xsd:attribute name="merge" type="xsd:boolean"/>
            </xsd:extension>
          </xsd:complexContent>
        </xsd:complexType>
      </xsd:element>
      <xsd:element maxOccurs="unbounded" minOccurs="0" ref="spring:property"/>
      <xsd:element maxOccurs="unbounded" minOccurs="0" ref="property"/>
    </xsd:choice>
    <xsd:attribute name="objectLabel">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.DataObjectEntry" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="exporterClass">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.DataObjectEntry" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="objectDescription">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.DataObjectEntry" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="dataObjectClass">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.DataObjectEntry" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="titleAttribute">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.DataObjectEntry" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="name">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.DataObjectEntry" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="primaryKeys">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.DataObjectEntry" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="boNotesEnabled">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.DataObjectEntry" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="namespaceCode">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.DataObjectEntry" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="groupByAttributesForEffectiveDating">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.DataObjectEntry" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="componentCode">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.datadictionary.DataObjectEntry" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="parent" type="xsd:string"/>
    <xsd:anyAttribute processContents="skip"/>
  </xsd:complexType>
  <xsd:complexType name="compareConfig-type">
    <xsd:choice maxOccurs="unbounded" minOccurs="0">
      <xsd:element maxOccurs="1" minOccurs="0" name="bindingObjectPath" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.modifier.ComparableInfo" xml:lang="en"><![CDATA[Returns the path (from the form) for the object to compare to

 
 When a comparison view is rendered, a group will be rendered for each
 comparison object using the fields defined on the view. This gives the
 path to one of the comparison objects
 

 
 e.g. For maintenance documents the compare object paths would be
 document.newMaintainableObject.businessObject and
 document.oldMaintainableObject.businessObject
 ]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="readOnly" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.modifier.ComparableInfo" xml:lang="en"><![CDATA[Indicates whether the compare group should be read-only]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="order" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.modifier.ComparableInfo" xml:lang="en"><![CDATA[Sets the order value that will be used to determine where the compare
 group should be placed in relation to the other compare groups

 
 For example if the compare groups are being rendered from left to right
 in columns, a lower order value would be placed to the left of a compare
 group with a higher order value
 ]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="compareToForValueChange" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.modifier.ComparableInfo" xml:lang="en"><![CDATA[Indicates whether this comparable group's field values should be compared
 to when highlighting changes of values between comparables (versions)]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="highlightValueChange" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.modifier.ComparableInfo" xml:lang="en"><![CDATA[Indicates whether the fields in this comparable group should be
 highlighted if their values defer from the comparable group marked for
 comparison]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="idSuffix" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.modifier.ComparableInfo" xml:lang="en"><![CDATA[Specifies an id suffix to use for the generated comparison fields

 
 For the given string, all components created for the comparison group
 will contain the string on their id. This can be helpful for scripting.
 If not given, the items will receive a default id suffix
 ]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="namespaceCode" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.modifier.ComparableInfo" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="componentCode" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.modifier.ComparableInfo" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="1" minOccurs="0" name="headerText" type="xsd:string">
        <xsd:annotation>
          <xsd:documentation source="org.kuali.rice.krad.uif.modifier.ComparableInfo" xml:lang="en"><![CDATA[Text that should display on the header for the compare group

 
 In the comparison view each compare group can be labeled, this gives the
 text that should be used for that label. For example in the maintenance
 view the compare record is labeled 'Old' to indicate it is the old
 version of the record
 ]]></xsd:documentation>
        </xsd:annotation>
      </xsd:element>
      <xsd:element maxOccurs="unbounded" minOccurs="0" ref="spring:property"/>
      <xsd:element maxOccurs="unbounded" minOccurs="0" ref="property"/>
    </xsd:choice>
    <xsd:attribute name="bindingObjectPath">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.modifier.ComparableInfo" xml:lang="en"><![CDATA[Returns the path (from the form) for the object to compare to

 
 When a comparison view is rendered, a group will be rendered for each
 comparison object using the fields defined on the view. This gives the
 path to one of the comparison objects
 

 
 e.g. For maintenance documents the compare object paths would be
 document.newMaintainableObject.businessObject and
 document.oldMaintainableObject.businessObject
 ]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="readOnly">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.modifier.ComparableInfo" xml:lang="en"><![CDATA[Indicates whether the compare group should be read-only]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="order">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.modifier.ComparableInfo" xml:lang="en"><![CDATA[Sets the order value that will be used to determine where the compare
 group should be placed in relation to the other compare groups

 
 For example if the compare groups are being rendered from left to right
 in columns, a lower order value would be placed to the left of a compare
 group with a higher order value
 ]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="compareToForValueChange">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.modifier.ComparableInfo" xml:lang="en"><![CDATA[Indicates whether this comparable group's field values should be compared
 to when highlighting changes of values between comparables (versions)]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="highlightValueChange">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.modifier.ComparableInfo" xml:lang="en"><![CDATA[Indicates whether the fields in this comparable group should be
 highlighted if their values defer from the comparable group marked for
 comparison]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="idSuffix">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.modifier.ComparableInfo" xml:lang="en"><![CDATA[Specifies an id suffix to use for the generated comparison fields

 
 For the given string, all components created for the comparison group
 will contain the string on their id. This can be helpful for scripting.
 If not given, the items will receive a default id suffix
 ]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="namespaceCode">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.modifier.ComparableInfo" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="componentCode">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.modifier.ComparableInfo" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="headerText">
      <xsd:annotation>
        <xsd:documentation source="org.kuali.rice.krad.uif.modifier.ComparableInfo" xml:lang="en"><![CDATA[Text that should display on the header for the compare group

 
 In the comparison view each compare group can be labeled, this gives the
 text that should be used for that label. For example in the maintenance
 view the compare record is labeled 'Old' to indicate it is the old
 version of the record
 ]]></xsd:documentation>
      </xsd:annotation>
    </xsd:attribute>
    <xsd:attribute name="parent" type="xsd:string"/>
    <xsd:anyAttribute processContents="skip"/>
  </xsd:complexType>
  <xsd:complexType name="icon-type">
    <xsd:complexContent>
      <xsd:extension base="componentAttributes-type">
        <xsd:choice maxOccurs="unbounded" minOccurs="0">
          <xsd:element maxOccurs="1" minOccurs="0" name="onChangeScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Icon" xml:lang="en"><![CDATA[Script that should be executed when the component's onChange event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onKeyPressScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Icon" xml:lang="en"><![CDATA[Script that should be executed when the component's onKeyPress event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="refreshTimer" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Icon" xml:lang="en"><![CDATA[Time in seconds that the component will be automatically refreshed
 
 
 This will invoke the refresh process just like the conditionalRefresh and
 refreshWhenChangedPropertyNames. When using this property methodToCallOnRefresh and id should
 also be specified
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="disableSessionPersistence" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Icon" xml:lang="en"><![CDATA[Disables the storage of the component in session (when the framework determines it needs to be due to a
 refresh condition)

 
 When the framework determines there is a condition on the component that requires it to keep around between
 posts, it will store the component instance in session. This flag can be set to disable this behavior (which
 would require custom application logic to support behavior such as refresh)
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onDblClickScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Icon" xml:lang="en"><![CDATA[Script that should be executed when the component's onDblClick event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="additionalComponentsToRefresh" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Icon" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onBlurScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Icon" xml:lang="en"><![CDATA[Script that should be executed when the component's onBlur event is fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="selfRendered" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Icon" xml:lang="en"><![CDATA[Indicates whether the component contains its own render output (through
 the renderOutput property)

 
 If self rendered is true, the corresponding template for the component
 will not be invoked and the renderOutput String will be written to the
 response as is.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="colSpan" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Icon" xml:lang="en"><![CDATA[Number of places the component should take up horizontally in the
 container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how many places
 horizontally the component should take up within the container. This is
 only applicable for table based layout managers. Default is 1
 

 TODO: this should not be on component interface since it only applies if
 the layout manager supports it, need some sort of layoutOptions map for
 field level options that depend on the manager]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="additionalCssClasses" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Icon" xml:lang="en"><![CDATA[Convenience property for adding css class names to the end of the list of cssClasses that may already exist on
 this Component (this is to avoid explicitly having to set list merge in the bean definition)]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="required" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Icon" xml:lang="en"><![CDATA[Indicates whether the component is required

 
 At the general component level required means there is some action the
 user needs to take within the component. For example, within a section it
 might mean the fields within the section should be completed. At a field
 level, it means the field should be completed. This provides the ability
 for the renderers to indicate the required action.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="finalizeMethodToCall" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Icon" xml:lang="en"><![CDATA[The name of the method that should be invoked for finalizing the component
 configuration (full method name, without parameters or return type)

 
 Note the method can also be set with the finalizeMethodInvoker
 targetMethod property. If the method is on the configured
 ViewHelperService, only this property needs to be configured
 

 
 The model backing the view will be passed as the first argument method and then
 the Component instance as the second argument. If any additional method
 arguments are declared with the finalizeMethodAdditionalArguments, they will then
 be passed in the order declared in the list
 

 
 If the component is selfRendered, the finalize method can return a string which
 will be set as the component's renderOutput. The selfRendered indicator will also
 be set to true on the component.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="resetDataOnRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Icon" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onKeyDownScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Icon" xml:lang="en"><![CDATA[Script that should be executed when the component's onKeyDown event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="template" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Icon" xml:lang="en"><![CDATA[The path to the JSP file that should be called to render the component

 
 The path should be relative to the web root. An attribute will be available to the component to use under the
 name given by the method getComponentTypeName. Based on the component type, additional attributes could
 be available for use. See the component documentation for more information on such attributes.
 

 
 e.g. '/krad/WEB-INF/jsp/tiles/component.jsp'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="align" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Icon" xml:lang="en"><![CDATA[Horizontal alignment of the component within its container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how the component
 should be aligned horizontally within the container. During the finalize
 phase the CSS text-align style will be created for the align setting.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="width" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Icon" xml:lang="en"><![CDATA[Width the component should take up in the container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies a width the component
 should take up in the Container. This is not applicable for all layout
 managers. During the finalize phase the CSS width style will be created
 for the width setting.
 

 
 e.g. '30%', '55px'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseDownScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Icon" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseDown event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="postContent">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Icon" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:sequence>
                <xsd:any minOccurs="0" processContents="skip"/>
              </xsd:sequence>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onClickScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Icon" xml:lang="en"><![CDATA[Script that should be executed when the component's onClick event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="render" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Icon" xml:lang="en"><![CDATA[Indicates whether the component should be rendered in the UI

 
 If set to false, the corresponding component template will not be invoked
 (therefore nothing will be rendered to the UI).
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onLoadScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Icon" xml:lang="en"><![CDATA[Script that should be executed when the component's onLoad event is fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="methodToCallOnRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Icon" xml:lang="en"><![CDATA[Name of a method on the controller that should be invoked as part of the component refresh
 and disclosure process
 
 
 During the component refresh or disclosure process it might be necessary to perform other
 operations, such as preparing data or executing a business process. This allows the
 configuration of a method on the underlying controller that should be called for the
 component refresh action. In this method, the necessary logic can be performed and then the
 base component update method invoked to carry out the component refresh.
 
 
 
 Controller method to invoke must accept the form, binding result, request, and response
 arguments
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="finalizeMethodInvoker" type="org.kuali.rice.krad.uif.component.MethodInvokerConfig">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Icon" xml:lang="en"><![CDATA[MethodInvokerConfig instance for the method that should be invoked
 for finalizing the component configuration

 
 MethodInvoker can be configured to specify the class or object the method
 should be called on. For static method invocations, the targetClass
 property can be configured. For object invocations, that targetObject
 property can be configured
 

 
 If the component is selfRendered, the finalize method can return a string which
 will be set as the component's renderOutput. The selfRendered indicator will also
 be set to true on the component.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="componentModifiers">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Icon" xml:lang="en"><![CDATA[ComponentModifier instances that should be invoked to
 initialize the component

 
 These provide dynamic initialization behavior for the component and are
 configured through the components definition. Each initializer will get
 invoked by the initialize method.
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="org.kuali.rice.krad.uif.modifier.ComponentModifier">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="componentCode" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Icon" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="propertyReplacers">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Icon" xml:lang="en"><![CDATA[gets a list of PropertyReplacer instances

 They will be evaluated
 during the view lifecycle to conditionally set properties on the
 Component based on expression evaluations]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="org.kuali.rice.krad.uif.component.PropertyReplacer">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onDocumentReadyScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Icon" xml:lang="en"><![CDATA[Script to be run when the document ready event is triggered]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="refreshWhenChangedPropertyNames" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Icon" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseUpScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Icon" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseUp event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="renderedHtmlOutput" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Icon" xml:lang="en"><![CDATA[Rendering output for the component that will be sent as part of the
 response (can contain static text and HTML)]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onKeyUpScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Icon" xml:lang="en"><![CDATA[Script that should be executed when the component's onKeyUp event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="iconClass" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Icon" xml:lang="en"><![CDATA[Icon Class for the action

 
 Bootstrap Icon Class to be rendered on this Action
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onCloseScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Icon" xml:lang="en"><![CDATA[Script that should be executed when the component's onClose event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="id" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Icon" xml:lang="en"><![CDATA[The unique id (within a given tree) for the element.

 The id is used to identify an element instance within the tree, and
 will be used by renderers to set the HTML element id. This gives a way to find various elements
 for scripting. If the id is not given, a default will be generated by the framework.
 

 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="title" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Icon" xml:lang="en"><![CDATA[The component title

 
 Depending on the component can be used in various ways. For example with a Container component the title is
 used to set the header text. For components like controls other other components that render an HTML element it
 is used to set the HTML title attribute.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="order" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Icon" xml:lang="en"><![CDATA[Order of a component within a List of other components

 Lower numbers are placed higher up in the list, while higher numbers are placed
 lower in the list]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="style" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Icon" xml:lang="en"><![CDATA[CSS style string to be applied to the component

 
 Any style override or additions can be specified with this attribute.
 This is used by the renderer to set the style attribute on the
 corresponding element.
 

 
 e.g. 'color: #000000;text-decoration: underline;'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="finalizeMethodAdditionalArguments" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Icon" xml:lang="en"><![CDATA[The List of Object instances that should be passed as arguments to the finalize method

 
 These arguments are passed to the finalize method after the standard model and component
 arguments. They are passed in the order declared in the list
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onSubmitScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Icon" xml:lang="en"><![CDATA[Script that should be executed when the component's onSubmit event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="conditionalRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Icon" xml:lang="en"><![CDATA[When set if the condition is satisfied, the component will be refreshed.
 
 
 The component MUST BE a container or field type. conditionalRefresh is defined in a limited
 Spring EL syntax. Only valid form property names, and, or, logical comparison operators
 (non-arithmetic), #listContains, #emptyList, and the matches clause are allowed. String and
 regex values must use single quotes ('), booleans must be either true or false, numbers must
 be a valid double either negative or positive.
 
 
 DO NOT use progressiveRender and conditionalRefresh on the same component unless it is known
 that the component will always be visible in all cases when a conditionalRefresh happens (ie
 conditionalRefresh has progressiveRender's condition anded with its own condition). If a
 component should be refreshed every time it is shown, use the progressiveRenderAndRefresh
 option with this property instead.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="rowSpan" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Icon" xml:lang="en"><![CDATA[Number of places the component should take up vertically in the container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how many places
 vertically the component should take up within the container. This is
 only applicable for table based layout managers. Default is 1
 

 TODO: this should not be on component interface since it only applies if
 the layout manager supports it, need some sort of layoutOptions map for
 field level options that depend on the manager]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="retrieveViaAjax" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Icon" xml:lang="en"><![CDATA[When true, this component will render as a placeholder component instead of rendering normally because the
 content will be later retrieved through manually ajax retrieval calls in the js

 This flag does not imply any automation, there must be a js call invoked for the content to be retrieved
 by the server, but this does mark it with a placeholder component which KRAD js uses during these calls.
 This placeholder component is used for ajax retrievals.  In particular, this flag is useful for use in
 combination with the showLightboxComponent js function which will automatically retrieve the
 real content of a component through ajax if a placeholder component is detected.  This allows for the full
 content to only be retrieved when the lightbox is first opened.
 When this flag is set to true, the forceSessionPersistence
 flag is set to true AUTOMATICALLY because it is implied that this component will be retrieved by an ajax call
 in the future.  This may also be useful for direct custom calls to retrieveComponent function,
 as well, which also relies on the placeholder being present.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="namespaceCode" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Icon" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="progressiveRender" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Icon" xml:lang="en"><![CDATA[When set if the condition is satisfied, the component will be displayed. The component MUST
 BE a container or field type. progressiveRender is defined in a limited Spring EL syntax.
 Only valid form property names, and, or, logical comparison operators (non-arithmetic),
 #listContains, #emptyList, matches clause are allowed. String and regex values must use
 single quotes ('), booleans must be either true or false, numbers must be a valid double,
 either negative or positive.
 
 
 DO NOT use progressiveRender and a conditional refresh statement on the same component unless
 it is known that the component will always be visible in all cases when a conditional refresh
 happens (ie conditional refresh has progressiveRender's condition anded with its own
 condition).
 
 
 
 If a component should be refreshed every time it is shown, use the
 progressiveRenderAndRefresh option with this property instead.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="templateOptionsJSString" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Icon" xml:lang="en"><![CDATA[Builds a string from the underlying Map of template options that will export
 that options as a JavaScript Map for use in js and jQuery plugins]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseOutScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Icon" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseOut event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="templateOptions">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Icon" xml:lang="en"><![CDATA[The options that are passed through to the Component renderer

 
 The Map key is the option name, with the Map value as the option value. See
 documentation on the particular widget render for available options.
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:mapType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:choice maxOccurs="1" minOccurs="0">
            <xsd:element ref="tooltip"/>
            <xsd:element ref="tooltipFocus"/>
            <xsd:element ref="tooltipHelp"/>
          </xsd:choice>
          <xsd:element maxOccurs="1" minOccurs="0" name="preContent">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Icon" xml:lang="en"><![CDATA[documentation not available]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:sequence>
                <xsd:any minOccurs="0" processContents="skip"/>
              </xsd:sequence>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseOverScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Icon" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseOver event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="dataAttributes">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Icon" xml:lang="en"><![CDATA[Get the dataAttributes setup for this component - to be written to the html/jQuery data
 
 
 The attributes that are complex objects (contain {}) they will be written through script. The
 attritubes that are simple (contain no objects) will be written directly to the html of the
 component using standard data-. Either way they can be access through .data() call in jQuery
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:mapType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:choice maxOccurs="1" minOccurs="0">
            <xsd:element ref="fieldSecurity"/>
            <xsd:element ref="dataFieldSecurity"/>
            <xsd:element ref="actionSecurity"/>
            <xsd:element ref="collectionGroupSecurity"/>
            <xsd:element ref="componentSecurity"/>
          </xsd:choice>
          <xsd:element maxOccurs="1" minOccurs="0" name="readOnly" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Icon" xml:lang="en"><![CDATA[Indicates whether the component can be edited

 
 When readOnly the controls and widgets of Field components
 will not be rendered. If the Field has an underlying value it will be
 displayed readOnly to the user.
 

 
 For a Container component, the readOnly setting will apply
 to all contained components (making a section readOnly makes all fields
 within the section readOnly).
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onMouseMoveScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Icon" xml:lang="en"><![CDATA[Script that should be executed when the component's onMouseMove event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="progressiveRenderAndRefresh" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Icon" xml:lang="en"><![CDATA[If true, when the progressiveRender condition is satisfied, the component will always be
 retrieved from the server and shown(as opposed to being stored on the client, but hidden,
 after the first retrieval as is the case with the progressiveRenderViaAJAX option).
 
 
 By default, this is false, so components with progressive render capabilities will always
 be already within the client html and toggled to be hidden or visible.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="hidden" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Icon" xml:lang="en"><![CDATA[Indicates whether the component should be hidden in the UI

 
 How the hidden data is maintained depends on the views persistence mode.
 If the mode is request, the corresponding data will be rendered to the UI
 but not visible. If the mode is session, the data will not be rendered to
 the UI but maintained server side.
 

 
 For a Container component, the hidden setting will apply to
 all contained components (making a section hidden makes all fields within
 the section hidden)
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="skipInTabOrder" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Icon" xml:lang="en"><![CDATA[Flag indicating that this component and its nested components must be skipped when keyboard
 tabbing.]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onUnloadScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Icon" xml:lang="en"><![CDATA[Script that should be executed when the component's onUnload event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="context">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Icon" xml:lang="en"><![CDATA[Context map for the component

 
 Any el statements configured for the components properties (e.g.
 title="@{foo.property}") are evaluated using the el context map. This map
 will get populated with default objects like the model, view, and request
 from the ViewHelperService. Other components can push
 further objects into the context so that they are available for use with
 that component. For example, Field instances that are part
 of a collection line as receive the current line instance
 

 
 Context map also provides objects to methods that are invoked for
 GeneratedField instances
 

 
 The Map key gives the name of the variable that can be used within
 expressions, and the Map value gives the object instance for which
 expressions containing the variable should evaluate against
 

 
 NOTE: Calling getContext().putAll() will skip updating any configured property replacers for the
 component. Instead you should call #pushAllToContext
 ]]></xsd:documentation>
            </xsd:annotation>
            <xsd:complexType>
              <xsd:complexContent>
                <xsd:extension base="spring:mapType">
                  <xsd:attribute name="merge" type="xsd:boolean"/>
                </xsd:extension>
              </xsd:complexContent>
            </xsd:complexType>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="forceSessionPersistence" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Icon" xml:lang="en"><![CDATA[Indicates whether the component should be stored with the session view regardless of configuration

 
 By default the framework nulls out any components that do not have a refresh condition or are needed for
 collection processing. This can be a problem if custom application code is written to refresh a component
 without setting the corresponding component flag. In this case this property can be set to true to force the
 framework to keep the component in session. Defaults to false
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="valign" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Icon" xml:lang="en"><![CDATA[Vertical alignment of the component within its container

 
 All components belong to a Container and are placed using a
 LayoutManager. This property specifies how the component
 should be aligned vertically within the container. During the finalize
 phase the CSS vertical-align style will be created for the valign
 setting.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="onFocusScript" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Icon" xml:lang="en"><![CDATA[Script that should be executed when the component's onFocus event is
 fired]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="progressiveRenderViaAJAX" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Icon" xml:lang="en"><![CDATA[When progressiveRenderViaAJAX is true, this component will be retrieved from the server when
 it first satisfies its progressive render condition.
 
 
 After the first retrieval, it is hidden/shown in the html by the js when its progressive
 condition result changes. By default, this is false, so components with progressive render
 capabilities will always be already within the client html and toggled to be hidden or
 visible.
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="templateName" type="xsd:string">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Icon" xml:lang="en"><![CDATA[The name for which the template can be invoked by

 
 Whether the template name is needed depends on the underlying rendering engine being used. In the example of
 Freemarker, the template points to the actual source file, which then loads a macro. From then on the macro is
 simply invoked to execute the template
 

 
 e.g. 'uif_text'
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="1" minOccurs="0" name="cssClasses" type="basicList-type">
            <xsd:annotation>
              <xsd:documentation source="org.kuali.rice.krad.uif.element.Icon" xml:lang="en"><![CDATA[CSS style class(s) to be applied to the component

 
 Declares style classes for the component. Multiple classes are specified
 with a space delimiter. This is used by the renderer to set the class
 attribute on the corresponding element. The class(s) declared must be
 available in the common style sheets or the style sheets specified for
 the view
 ]]></xsd:documentation>
            </xsd:annotation>
          </xsd:element>
          <xsd:element maxOccurs="unbounded" minOccurs="0" ref="spring:property"/>
          <xsd:element maxOccurs="unbounded" minOccurs="0" ref="property"/>
        </xsd:choice>
        <xsd:attribute name="iconClass">
          <xsd:annotation>
            <xsd:documentation source="org.kuali.rice.krad.uif.element.Icon" xml:lang="en"><![CDATA[Icon Class for the action

 
 Bootstrap Icon Class to be rendered on this Action
 ]]></xsd:documentation>
          </xsd:annotation>
        </xsd:attribute>
        <xsd:anyAttribute processContents="skip"/>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>
</xsd:schema>
